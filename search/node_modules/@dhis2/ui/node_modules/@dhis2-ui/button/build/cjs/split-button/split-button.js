"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SplitButton = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _layer = require("@dhis2-ui/layer");

var _popper = require("@dhis2-ui/popper");

var _uiConstants = require("@dhis2/ui-constants");

var _uiIcons = require("@dhis2/ui-icons");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _index = require("../index.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const rightButton = {
  styles: /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "2502148942"
  }, ["button.jsx-2502148942{padding:0 ".concat(_uiConstants.spacers.dp12, ";}")]),
  className: "jsx-2502148942"
};

class SplitButton extends _react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      open: false
    });

    _defineProperty(this, "anchorRef", /*#__PURE__*/_react.default.createRef());

    _defineProperty(this, "onClick", (payload, event) => {
      if (this.props.onClick) {
        this.props.onClick({
          name: payload.name,
          value: payload.value,
          open: this.state.open
        }, event);
      }
    });

    _defineProperty(this, "onToggle", () => this.setState({
      open: !this.state.open
    }));
  }

  render() {
    const {
      open
    } = this.state;
    const {
      component,
      children,
      className,
      name,
      value,
      icon,
      small,
      large,
      primary,
      secondary,
      destructive,
      disabled,
      type,
      tabIndex,
      dataTest,
      initialFocus
    } = this.props;
    const arrow = open ? /*#__PURE__*/_react.default.createElement(_uiIcons.IconChevronUp16, null) : /*#__PURE__*/_react.default.createElement(_uiIcons.IconChevronDown16, null);
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: this.anchorRef,
      "data-test": dataTest,
      className: "jsx-4268400365"
    }, /*#__PURE__*/_react.default.createElement(_index.Button, {
      name: name,
      value: value,
      icon: icon,
      small: small,
      large: large,
      primary: primary,
      secondary: secondary,
      destructive: destructive,
      disabled: disabled,
      onClick: this.onClick,
      type: type,
      tabIndex: tabIndex,
      className: (0, _classnames.default)(className),
      initialFocus: initialFocus,
      dataTest: "".concat(dataTest, "-button")
    }, children), /*#__PURE__*/_react.default.createElement(_index.Button, {
      name: name,
      value: value,
      small: small,
      large: large,
      primary: primary,
      secondary: secondary,
      destructive: destructive,
      disabled: disabled,
      onClick: this.onToggle,
      type: type,
      tabIndex: tabIndex,
      className: (0, _classnames.default)(className, rightButton.className),
      dataTest: "".concat(dataTest, "-toggle")
    }, arrow), open && /*#__PURE__*/_react.default.createElement(_layer.Layer, {
      onClick: this.onToggle,
      transparent: true
    }, /*#__PURE__*/_react.default.createElement(_popper.Popper, {
      dataTest: "".concat(dataTest, "-menu"),
      placement: "bottom-end",
      reference: this.anchorRef
    }, component)), rightButton.styles, /*#__PURE__*/_react.default.createElement(_style.default, {
      id: "4268400365"
    }, ["div.jsx-4268400365{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;color:inherit;white-space:nowrap;position:relative;z-index:0;}", "div.jsx-4268400365>button:first-child{border-top-right-radius:0;border-bottom-right-radius:0;border-right:0;}", "div.jsx-4268400365>button:last-child{border-top-left-radius:0;border-bottom-left-radius:0;}"]));
  }

}

exports.SplitButton = SplitButton;
SplitButton.defaultProps = {
  dataTest: 'dhis2-uicore-splitbutton'
};
SplitButton.propTypes = {
  children: _propTypes.default.string,
  className: _propTypes.default.string,

  /** Component to render when the dropdown is opened */
  component: _propTypes.default.element,
  dataTest: _propTypes.default.string,

  /** Applies 'destructive' appearance to indicate purpose. Mutually exclusive with `primary` and `secondary` props */
  destructive: _uiConstants.sharedPropTypes.buttonVariantPropType,

  /** Disables the button and makes it uninteractive */
  disabled: _propTypes.default.bool,

  /** An icon to add inside the button */
  icon: _propTypes.default.element,

  /** Grants the button the initial focus */
  initialFocus: _propTypes.default.bool,

  /** Changes button size. Mutually exclusive with `small` prop */
  large: _uiConstants.sharedPropTypes.sizePropType,
  name: _propTypes.default.string,

  /** Applies 'primary' appearance to indicate purpose. Mutually exclusive with `destructive` and `secondary` props */
  primary: _uiConstants.sharedPropTypes.buttonVariantPropType,

  /** Applies 'secondary' appearance to indicate purpose. Mutually exclusive with `primary` and `destructive` props */
  secondary: _uiConstants.sharedPropTypes.buttonVariantPropType,

  /** Changes button size. Mutually exclusive with `large` prop */
  small: _uiConstants.sharedPropTypes.sizePropType,
  tabIndex: _propTypes.default.string,

  /** Type of button. Applied to html `button` element */
  type: _propTypes.default.oneOf(['submit', 'reset', 'button']),

  /** Value associated with the button. Passed in object to onClick handler */
  value: _propTypes.default.string,
  onClick: _propTypes.default.func
};