"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WithValue = exports.WithHelpText = exports.TextareaTextOverflow = exports.StatusWarning = exports.StatusValid = exports.StatusLoading = exports.StatusError = exports.Rows = exports.Resize = exports.Required = exports.ReadOnly = exports.PlaceholderNoValue = exports.NoPlaceholderNoValue = exports.LabelTextOverflow = exports.InputWidth = exports.Focus = exports.Disabled = exports.Dense = exports.Autogrow = void 0;

var _uiConstants = require("@dhis2/ui-constants");

var _react = _interopRequireDefault(require("react"));

var _index = require("./index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const description = "\n`TextAreaField` wraps a `TextArea` component with a label, help text, validation text, and other functions.\n\nSee the regular TextArea for usage information and options.\n\n```js\nimport { TextAreaField } from '@dhis2/ui'\n```\n";
var _default = {
  title: 'Text Area Field',
  component: _index.TextAreaField,
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  // Default args:
  args: {
    onChange: console.log,
    name: 'textareaName'
  },
  argTypes: {
    valid: { ..._uiConstants.sharedPropTypes.statusArgType
    },
    warning: { ..._uiConstants.sharedPropTypes.statusArgType
    },
    error: { ..._uiConstants.sharedPropTypes.statusArgType
    }
  }
};
exports.default = _default;

const Template = args => /*#__PURE__*/_react.default.createElement(_index.TextAreaField, args);

const NoPlaceholderNoValue = Template.bind({});
exports.NoPlaceholderNoValue = NoPlaceholderNoValue;
NoPlaceholderNoValue.storyName = 'No placeholder, no value';
const PlaceholderNoValue = Template.bind({});
exports.PlaceholderNoValue = PlaceholderNoValue;
PlaceholderNoValue.args = {
  placeholder: 'Hold the place'
};
PlaceholderNoValue.storyName = 'Placeholder, no value';
const WithHelpText = Template.bind({});
exports.WithHelpText = WithHelpText;
WithHelpText.args = {
  helpText: 'With some helping text to guide the user along',
  ...PlaceholderNoValue.args
};
const WithValue = Template.bind({});
exports.WithValue = WithValue;
WithValue.args = {
  value: 'This is set through the value prop, which means the component is controlled.'
};
const Focus = Template.bind({});
exports.Focus = Focus;
Focus.args = {
  initialFocus: true
}; // Disable stories that manipulate focus on docs page

Focus.parameters = {
  docs: {
    disable: true
  }
};
const StatusValid = Template.bind({});
exports.StatusValid = StatusValid;
StatusValid.args = {
  valid: true,
  value: 'This value is valid'
};
StatusValid.storyName = 'Status: Valid';
const StatusWarning = Template.bind({});
exports.StatusWarning = StatusWarning;
StatusWarning.args = {
  warning: true,
  value: 'This value produces a warning'
};
StatusWarning.storyName = 'Status: Warning';
const StatusError = Template.bind({});
exports.StatusError = StatusError;
StatusError.args = {
  error: true,
  value: 'This value produces an error',
  helpText: 'This is some help text to advise what this input actually is.',
  validationText: 'This describes the error, if a message is supplied.'
};
StatusError.storyName = 'Status: Error';
const StatusLoading = Template.bind({});
exports.StatusLoading = StatusLoading;
StatusLoading.args = {
  loading: true,
  value: 'This value produces a loadingn state'
};
StatusLoading.storyName = 'Status: Loading';
const Disabled = Template.bind({});
exports.Disabled = Disabled;
Disabled.args = {
  disabled: true,
  value: 'This field is disabled'
};
const ReadOnly = Template.bind({});
exports.ReadOnly = ReadOnly;
ReadOnly.args = {
  readOnly: true,
  value: 'This field is readOnly'
};
const Dense = Template.bind({});
exports.Dense = Dense;
Dense.args = {
  dense: true,
  value: 'This field is dense'
};
const LabelTextOverflow = Template.bind({});
exports.LabelTextOverflow = LabelTextOverflow;
LabelTextOverflow.args = {
  label: "This label is too long to show on a single line of the input field's label. We just let it flow to the next line so the user can still read it. However, we should always aim to keep it shorter than this!"
};
LabelTextOverflow.storyName = 'Label text overflow';
const TextareaTextOverflow = Template.bind({});
exports.TextareaTextOverflow = TextareaTextOverflow;
TextareaTextOverflow.args = {
  label: 'I have a scrollbar',
  value: ['A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text'].join('\n')
};

const Required = () => /*#__PURE__*/_react.default.createElement(_index.TextAreaField, {
  onChange: () => {},
  name: "textarea",
  label: "I am required and have an asterisk",
  required: true
});

exports.Required = Required;
Required.args = {
  required: true,
  label: 'I am required and have an asterisk'
};
const Rows = Template.bind({});
exports.Rows = Rows;
Rows.args = {
  rows: 8,
  label: 'You can set the height with the rows prop. I have 8'
};

const InputWidth = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.TextAreaField, _extends({}, args, {
  label: "My textarea has a width of 220px (the minimum)",
  inputWidth: "220px"
})), /*#__PURE__*/_react.default.createElement(_index.TextAreaField, _extends({}, args, {
  label: "My textarea has a width of 400px",
  inputWidth: "400px"
})));

exports.InputWidth = InputWidth;

const Resize = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.TextAreaField, _extends({}, args, {
  name: "textarea1",
  label: "Resize: vertical (default)"
})), /*#__PURE__*/_react.default.createElement(_index.TextAreaField, _extends({}, args, {
  name: "textarea2",
  label: "Resize: none",
  resize: "none"
})), /*#__PURE__*/_react.default.createElement(_index.TextAreaField, _extends({}, args, {
  name: "textarea3",
  label: "Resize: both",
  resize: "both"
})), /*#__PURE__*/_react.default.createElement(_index.TextAreaField, _extends({}, args, {
  name: "textarea4",
  label: "Resize: horizontal",
  resize: "horizontal"
})));

exports.Resize = Resize;

const Autogrow = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.TextAreaField, _extends({}, args, {
  name: "textarea1",
  label: "Autogrow step 1",
  autoGrow: true,
  rows: 2,
  value: "This TextArea has a height of 2 rows"
})), /*#__PURE__*/_react.default.createElement(_index.TextAreaField, _extends({}, args, {
  name: "textarea2",
  label: "Autogrow step 2",
  autoGrow: true,
  rows: 2,
  value: ['This TextArea has a height of two rows', 'it also has autoGrow set to true so it will grow with the content'].join('\n')
})), /*#__PURE__*/_react.default.createElement(_index.TextAreaField, _extends({}, args, {
  name: "textarea3",
  label: "Autogrow step 3",
  autoGrow: true,
  rows: 2,
  value: ['This TextArea has a height of two rows', 'it also has autoGrow set to true so it will grow with the content.', 'See: rows is still 2, but I now have 3 lines.'].join('\n')
})), /*#__PURE__*/_react.default.createElement(_index.TextAreaField, _extends({}, args, {
  name: "textarea4",
  label: "Autogrow step 4",
  value: ['This TextArea has a height of two rows', 'it also has autoGrow set to true so it will grow with the content.', 'See: rows is still 2...', 'And now I have 4 lines and still no scroll bar in sight.'].join('\n')
})));

exports.Autogrow = Autogrow;