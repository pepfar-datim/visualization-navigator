"use strict";

require("../common/index.js");

var _steps = require("cypress-cucumber-preprocessor/steps");

const TOOLTIP_OFFSET = 4;
const TOOLTIP_HEIGHT = 25; // Stories

(0, _steps.Given)('there is not enough space between the reference element top and the body top to fit the Tooltip', () => {
  cy.visitStory('Tooltip', 'Flipped Vertically');
});
(0, _steps.Given)('there is enough space between the anchor bottom and the body bottom to fit the Tooltip', () => {
  getReferenceAndBodyPositions().should(_ref => {
    let [refPos, bodyPos] = _ref;
    expect(bodyPos.bottom).to.be.greaterThan(refPos.bottom + TOOLTIP_OFFSET + TOOLTIP_HEIGHT);
  });
});
(0, _steps.Given)('there is limited space available to the left of the anchor', () => {
  cy.visitStory('Tooltip', 'Adjusted Horizontal Position');
});
(0, _steps.Then)('the horizontal center of the Tooltip is aligned with the horizontal center of the anchor', () => {
  getReferenceAndContentPositions().should(_ref2 => {
    let [refPos, contentPos] = _ref2;
    const refCenterX = refPos.left + refPos.width / 2;
    const contentCenterX = contentPos.left + contentPos.width / 2;
    expect(refCenterX).to.be.approximately(contentCenterX, 1);
  });
});
(0, _steps.Then)('the horizontal center of the Tooltip is to the right of the horizontal center of the anchor', () => {
  getReferenceAndContentPositions().should(_ref3 => {
    let [refPos, contentPos] = _ref3;
    const contentCenterX = contentPos.left + contentPos.width / 2;
    const refCenterX = refPos.left + refPos.width / 2;
    expect(contentCenterX).to.be.greaterThan(refCenterX);
  });
});
(0, _steps.Then)('there is some space between the anchor bottom and the Tooltip top', () => {
  getReferenceAndContentPositions().should(_ref4 => {
    let [refPos, contentPos] = _ref4;
    expect(refPos.bottom + TOOLTIP_OFFSET).to.equal(contentPos.top);
  });
});
(0, _steps.Then)('there is some space between the anchor top and the Tooltip bottom', () => {
  getReferenceAndContentPositions().should(_ref5 => {
    let [refPos, contentPos] = _ref5;
    expect(refPos.top).to.equal(contentPos.bottom + TOOLTIP_OFFSET);
  });
});
(0, _steps.Then)('the Tooltip is rendered below the anchor', () => {
  getReferenceAndContentPositions().should(_ref6 => {
    let [refPos, contentPos] = _ref6;
    expect(contentPos.top).to.be.greaterThan(refPos.bottom);
  });
}); // helper

function getReferenceAndBodyPositions() {
  return cy.getPositionsBySelectors('[data-test="dhis2-uicore-tooltip-reference"]', 'body');
}

function getReferenceAndContentPositions() {
  return cy.getPositionsBySelectors('[data-test="dhis2-uicore-tooltip-reference"]', '[data-test="dhis2-uicore-tooltip-content"]');
}