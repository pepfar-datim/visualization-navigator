"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WithHelpText = exports.StatusWarning = exports.StatusValid = exports.StatusError = exports.Required = exports.InputWidth = exports.DefaultLoadingText = exports.DefaultFilterPlaceholderAndNoMatchText = exports.DefaultEmpty = exports.DefaultClearText = exports.Default = void 0;

var _uiConstants = require("@dhis2/ui-constants");

var _react = _interopRequireDefault(require("react"));

var _index = require("../index.js");

var _index2 = require("./index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const description = "\n`MultiSelectField` is a wrapper around a `MultiSelect` component that adds a label, help text, validation text, and other features.\n\nSee the MultiSelect for more information, and read more at [Design System: Select](https://github.com/dhis2/design-system/blob/master/molecules/select.md#multiple-selection).\n\n```js\nimport { MultiSelectField, MultiSelectOption } from '@dhis2/ui'\n```\n\n_**Note**: The dropdowns in some of the following stories won't appear correctly on this page. View these demos in the 'Canvas' tab._\n";

const onChange = selected => alert("Selected changed to: ".concat(JSON.stringify(selected, null, 2)));

const options = [/*#__PURE__*/_react.default.createElement(_index.MultiSelectOption, {
  key: "1",
  value: "1",
  label: "one"
}), /*#__PURE__*/_react.default.createElement(_index.MultiSelectOption, {
  key: "2",
  value: "2",
  label: "two"
}), /*#__PURE__*/_react.default.createElement(_index.MultiSelectOption, {
  key: "3",
  value: "3",
  label: "three"
}), /*#__PURE__*/_react.default.createElement(_index.MultiSelectOption, {
  key: "4",
  value: "4",
  label: "four"
}), /*#__PURE__*/_react.default.createElement(_index.MultiSelectOption, {
  key: "5",
  value: "5",
  label: "five"
}), /*#__PURE__*/_react.default.createElement(_index.MultiSelectOption, {
  key: "6",
  value: "6",
  label: "six"
}), /*#__PURE__*/_react.default.createElement(_index.MultiSelectOption, {
  key: "7",
  value: "7",
  label: "seven"
}), /*#__PURE__*/_react.default.createElement(_index.MultiSelectOption, {
  key: "8",
  value: "8",
  label: "eight"
}), /*#__PURE__*/_react.default.createElement(_index.MultiSelectOption, {
  key: "9",
  value: "9",
  label: "nine"
}), /*#__PURE__*/_react.default.createElement(_index.MultiSelectOption, {
  key: "10",
  value: "10",
  label: "ten"
})];
var _default = {
  title: 'Multi Select Field',
  component: _index2.MultiSelectField,
  subcomponents: {
    MultiSelectOption: _index.MultiSelectOption
  },
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  // default args for stories
  args: { // Fix default prop issues - causes 'i18n is not defined' error
    ..._index2.MultiSelectField.defaultProps,
    label: 'Default label',
    selected: ['1'],
    children: options,
    onChange: onChange
  },
  argTypes: {
    valid: { ..._uiConstants.sharedPropTypes.statusArgType
    },
    warning: { ..._uiConstants.sharedPropTypes.statusArgType
    },
    error: { ..._uiConstants.sharedPropTypes.statusArgType
    }
  }
};
exports.default = _default;

const Template = args => /*#__PURE__*/_react.default.createElement(_index2.MultiSelectField, args);

const Default = Template.bind({});
exports.Default = Default;
const WithHelpText = Template.bind({});
exports.WithHelpText = WithHelpText;
WithHelpText.args = {
  helpText: 'Helpful text.'
};
WithHelpText.parameters = {
  docs: {
    description: {
      story: "_**Note**: The dropdowns in the following stories won't appear correctly on this page. View these demos in the 'Canvas' tab._"
    }
  }
};
const StatusValid = Template.bind({});
exports.StatusValid = StatusValid;
StatusValid.args = {
  valid: true,
  validationText: 'Totally valid!',
  ...WithHelpText.args
};
StatusValid.storyName = 'Status: Valid';
const StatusWarning = Template.bind({});
exports.StatusWarning = StatusWarning;
StatusWarning.args = {
  warning: true,
  validationText: 'Hm, not quite, I warn thee!',
  ...WithHelpText.args
};
StatusWarning.storyName = 'Status: Warning';
const StatusError = Template.bind({});
exports.StatusError = StatusError;
StatusError.args = {
  error: true,
  validationText: 'That value is wrong. Sorry!',
  ...WithHelpText.args
};
StatusError.storyName = 'Status: Error';
const Required = Template.bind({});
exports.Required = Required;
Required.args = {
  required: true
};
const InputWidth = Template.bind({});
exports.InputWidth = InputWidth;
InputWidth.args = {
  inputWidth: '200px',
  label: 'A very long label indeed, well at least longer than the input field to show how it looks and works and stuff',
  required: true
};
const DefaultClearText = Template.bind({});
exports.DefaultClearText = DefaultClearText;
DefaultClearText.args = {
  clearable: true,
  children: /*#__PURE__*/_react.default.createElement(_index.MultiSelectOption, {
    key: "1",
    value: "1",
    label: "Not translated, just for showing clear button"
  }),
  label: null
};
DefaultClearText.storyName = 'Default: clearText';
const DefaultEmpty = Template.bind({});
exports.DefaultEmpty = DefaultEmpty;
DefaultEmpty.args = {
  children: null,
  selected: [],
  label: null
};
DefaultEmpty.storyName = 'Default: empty';
const DefaultFilterPlaceholderAndNoMatchText = Template.bind({});
exports.DefaultFilterPlaceholderAndNoMatchText = DefaultFilterPlaceholderAndNoMatchText;
DefaultFilterPlaceholderAndNoMatchText.args = {
  filterable: true,
  ...DefaultEmpty.args
};
DefaultFilterPlaceholderAndNoMatchText.storyName = 'Default: filterPlaceholder and noMatchText';
const DefaultLoadingText = Template.bind({});
exports.DefaultLoadingText = DefaultLoadingText;
DefaultLoadingText.args = {
  loading: true,
  ...DefaultEmpty.args
};
DefaultLoadingText.storyName = 'Default: loadingText';