import _JSXStyle from "styled-jsx/style";
import { Card } from '@dhis2-ui/card';
import { Layer } from '@dhis2-ui/layer';
import { Popper } from '@dhis2-ui/popper';
import { colors, spacers } from '@dhis2/ui-constants';
import { IconChevronUp24, IconChevronDown24 } from '@dhis2/ui-icons';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { useRef } from 'react';
const offsetModifier = {
  name: 'offset',
  options: {
    offset: [0, 2]
  }
};
/**
 * The reason this component expects the "open" state and "setOpen" function is
 * because certain actions inside the props.children might have to set "open"
 * to false as well.
 * A good example is selecting a value (which is not a click outside) and this
 * component neither has any control over that component nor does it have a way
 * to "observe" that behavior. Especially for selection bar items that allow
 * "multiple" selections, this would be more or less impossible to predict
 * inside this component
 */

export const SelectorBarItem = _ref => {
  let {
    children,
    className,
    dataTest,
    disabled,
    label,
    noValueMessage,
    open,
    setOpen,
    value
  } = _ref;
  const buttonRef = useRef();
  const Icon = open ? IconChevronUp24 : IconChevronDown24;
  return /*#__PURE__*/React.createElement("button", {
    ref: buttonRef,
    disabled: disabled,
    onClick: () => setOpen(true),
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["3065814091", [
    /*
     * The arrow icon has ~4px empty space on the sides,
     * that's why the padding on the right is only 8px.
     */
    '', spacers.dp8, spacers.dp12, colors.grey400, colors.grey600, spacers.dp8, spacers.dp4]]]) + " " + (cx('selector-bar-item', className) || "")
  }, /*#__PURE__*/React.createElement("span", {
    className: _JSXStyle.dynamic([["3065814091", ['', spacers.dp8, spacers.dp12, colors.grey400, colors.grey600, spacers.dp8, spacers.dp4]]]) + " " + "label"
  }, label), !disabled && /*#__PURE__*/React.createElement("span", {
    className: _JSXStyle.dynamic([["3065814091", ['', spacers.dp8, spacers.dp12, colors.grey400, colors.grey600, spacers.dp8, spacers.dp4]]]) + " " + "value"
  }, value || noValueMessage), /*#__PURE__*/React.createElement("span", {
    className: _JSXStyle.dynamic([["3065814091", ['', spacers.dp8, spacers.dp12, colors.grey400, colors.grey600, spacers.dp8, spacers.dp4]]]) + " " + "toggle-icon"
  }, /*#__PURE__*/React.createElement(Icon, {
    className: _JSXStyle.dynamic([["3065814091", ['', spacers.dp8, spacers.dp12, colors.grey400, colors.grey600, spacers.dp8, spacers.dp4]]])
  })), open && /*#__PURE__*/React.createElement(Layer, {
    onClick: (_, evt) => {
      evt.stopPropagation();
      setOpen(false);
    }
  }, /*#__PURE__*/React.createElement(Popper, {
    reference: buttonRef,
    placement: "bottom-end",
    modifiers: [offsetModifier]
  }, /*#__PURE__*/React.createElement(Card, null, children))), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3065814091",
    dynamic: ['', spacers.dp8, spacers.dp12, colors.grey400, colors.grey600, spacers.dp8, spacers.dp4]
  }, [".selector-bar-item.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;cursor:pointer;background:none;height:40px;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;".concat(" padding:0 ", spacers.dp8, " 0 ").concat(spacers.dp12, ";font-size:14px;line-height:16px;border:none;box-shadow:0px 0px 0px 1px ").concat(colors.grey400, ";}"), ".selector-bar-item.__jsx-style-dynamic-selector:disabled{cursor:not-allowed;}", ".label.__jsx-style-dynamic-selector{color:".concat(colors.grey600, ";}"), ".value.__jsx-style-dynamic-selector{padding-left:".concat(spacers.dp8, ";}"), ".toggle-icon.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin-left:".concat(spacers.dp4, ";height:100%;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}")]));
};
SelectorBarItem.defaultProps = {
  dataTest: 'dhis2-ui-selectorbaritem'
};
SelectorBarItem.propTypes = {
  children: PropTypes.any.isRequired,
  label: PropTypes.string.isRequired,
  noValueMessage: PropTypes.string.isRequired,
  open: PropTypes.bool.isRequired,
  setOpen: PropTypes.func.isRequired,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  disabled: PropTypes.bool,
  value: PropTypes.string
};