"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _loader = require("@dhis2-ui/loader");

var _uiConstants = require("@dhis2/ui-constants");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _buttonStyles = _interopRequireDefault(require("./button.styles.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const Button = _ref => {
  let {
    children,
    className,
    dataTest,
    destructive,
    disabled,
    icon,
    initialFocus,
    large,
    name,
    primary,
    secondary,
    small,
    tabIndex,
    toggled,
    type,
    value,
    onBlur,
    onClick,
    onFocus,
    loading
  } = _ref;
  const ref = (0, _react.useRef)();
  (0, _react.useEffect)(() => {
    if (initialFocus && ref.current) {
      ref.current.focus();
    }
  }, [initialFocus, ref.current]);

  const handleClick = event => onClick && onClick({
    value,
    name
  }, event);

  const handleBlur = event => onBlur && onBlur({
    value,
    name
  }, event);

  const handleFocus = event => onFocus && onFocus({
    value,
    name
  }, event);

  const iconOnly = icon && !children;
  const buttonClassName = (0, _classnames.default)(className, {
    primary,
    secondary,
    destructive,
    small,
    large,
    'icon-only': iconOnly,
    toggled,
    loading: loading
  });
  return /*#__PURE__*/_react.default.createElement("button", {
    ref: ref,
    name: name,
    "data-test": dataTest,
    disabled: disabled || loading,
    tabIndex: tabIndex,
    type: type,
    onBlur: handleBlur,
    onClick: handleClick,
    onFocus: handleFocus,
    className: "jsx-".concat(_buttonStyles.default.__hash) + " " + (buttonClassName || "")
  }, loading && /*#__PURE__*/_react.default.createElement("span", {
    className: "jsx-".concat(_buttonStyles.default.__hash) + " " + "loader"
  }, destructive || primary ? /*#__PURE__*/_react.default.createElement(_loader.CircularLoader, {
    extrasmall: true,
    invert: true
  }) : /*#__PURE__*/_react.default.createElement(_loader.CircularLoader, {
    extrasmall: true
  })), icon && /*#__PURE__*/_react.default.createElement("span", {
    className: "jsx-".concat(_buttonStyles.default.__hash) + " " + "button-icon"
  }, icon), children, /*#__PURE__*/_react.default.createElement(_style.default, {
    id: _buttonStyles.default.__hash
  }, _buttonStyles.default));
};

exports.Button = Button;
Button.defaultProps = {
  type: 'button',
  dataTest: 'dhis2-uicore-button'
};
Button.propTypes = {
  /** Component to render inside the button */
  children: _propTypes.default.node,

  /** A className that will be passed to the `<button>` element */
  className: _propTypes.default.string,

  /**
   * A string that will be applied as a `data-test` attribute on the button element
   * for identification during testing
   */
  dataTest: _propTypes.default.string,

  /**
   * Indicates that the button makes potentially dangerous
   * deletions or data changes.
   * Mutually exclusive with `primary` and `secondary` props
   */
  destructive: _uiConstants.sharedPropTypes.buttonVariantPropType,

  /** Applies a greyed-out appearance and makes the button non-interactive  */
  disabled: _propTypes.default.bool,

  /** An icon element to display inside the button */
  icon: _propTypes.default.element,

  /** Use this variant to capture the initial focus on the page. */
  initialFocus: _propTypes.default.bool,

  /** Makes the button large. Mutually exclusive with `small` */
  large: _uiConstants.sharedPropTypes.sizePropType,

  /** Sets the button into a loading state */
  loading: _propTypes.default.bool,

  /**
   * Sets `name` attribute on button element.
   * Gets passed as part of the first argument to callbacks (see `onClick`).
   */
  name: _propTypes.default.string,

  /**
   * Applies 'primary' button appearance.
   * Mutually exclusive with `destructive` and `secondary` props
   */
  primary: _uiConstants.sharedPropTypes.buttonVariantPropType,

  /**
   * Applies 'secondary' button appearance.
   * Mutually exclusive with `primary` and `destructive` props
   */
  secondary: _uiConstants.sharedPropTypes.buttonVariantPropType,

  /** Makes the button small. Mutually exclusive with `large` prop */
  small: _uiConstants.sharedPropTypes.sizePropType,

  /** Tab index for focusing the button with a keyboard */
  tabIndex: _propTypes.default.string,

  /** Changes appearance of button to an on/off state */
  toggled: _propTypes.default.bool,

  /** Sets `type` attribute on `<button>` element */
  type: _propTypes.default.oneOf(['submit', 'reset', 'button']),

  /**
   * Value associated with the button.
   * Gets passed as part of the first argument to callbacks (see `onClick`).
   */
  value: _propTypes.default.string,

  /**
   * Callback to trigger on de-focus (blur).
   * Called with same args as `onClick`
   * */
  onBlur: _propTypes.default.func,

  /**
   * Callback to trigger on click.
   * Called with args `({ value, name }, event)`
   * */
  onClick: _propTypes.default.func,

  /** Callback to trigger on focus. Called with same args as `onClick` */
  onFocus: _propTypes.default.func
};