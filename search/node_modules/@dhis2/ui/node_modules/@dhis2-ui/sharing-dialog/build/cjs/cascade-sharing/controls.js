"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Controls = void 0;

var _box = require("@dhis2-ui/box");

var _button = require("@dhis2-ui/button");

var _noticeBox = require("@dhis2-ui/notice-box");

var _appRuntime = require("@dhis2/app-runtime");

var _uiConstants = require("@dhis2/ui-constants");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _index = _interopRequireDefault(require("../locales/index.js"));

var _resultInfo = require("./result-info.js");

var _updateInfo = require("./update-info.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const query = {
  dashboard: {
    resource: 'dashboards',
    id: _ref => {
      let {
        id
      } = _ref;
      return id;
    },
    params: {
      fields: 'dashboardItems[type]'
    }
  }
};

const Controls = _ref2 => {
  var _mutationResult$error;

  let {
    id,
    entityAmount
  } = _ref2;
  const {
    offline
  } = (0, _appRuntime.useOnlineStatus)();
  const queryResult = (0, _appRuntime.useDataQuery)(query, {
    variables: {
      id
    }
  });
  (0, _react.useEffect)(() => {
    queryResult.refetch({
      id
    });
  }, [id]);
  /**
   * The useDataMutation hook does not allow for a variable id,
   * so we're using the engine directly as a workaround.
   */

  const engine = (0, _appRuntime.useDataEngine)(mutation);
  const [called, setCalled] = (0, _react.useState)(false);
  const [mutating, setMutating] = (0, _react.useState)(false);
  const [error, setError] = (0, _react.useState)(null);
  const [mutationResult, setMutationResult] = (0, _react.useState)(null);
  const mutation = {
    resource: "dashboards/cascadeSharing/".concat(id),
    type: 'create'
  };

  const mutate = () => {
    setCalled(true);
    setMutating(true);
    setMutationResult(null);
    setError(null);
    engine.mutate(mutation).then(data => {
      setMutationResult(data);
    }).catch(e => {
      setError(e.message || _index.default.t('Something went wrong'));
    }).finally(() => {
      setMutating(false);
    });
  };

  const hasErrors = (mutationResult === null || mutationResult === void 0 ? void 0 : (_mutationResult$error = mutationResult.errorReports) === null || _mutationResult$error === void 0 ? void 0 : _mutationResult$error.length) > 0;
  const updatedItems = mutationResult === null || mutationResult === void 0 ? void 0 : mutationResult.countUpdatedDashboardItems;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, !called && /*#__PURE__*/_react.default.createElement(_updateInfo.UpdateInfo, {
    id: id,
    entityAmount: entityAmount
  }), error && /*#__PURE__*/_react.default.createElement(_box.Box, {
    marginTop: _uiConstants.spacers.dp12
  }, /*#__PURE__*/_react.default.createElement(_noticeBox.NoticeBox, {
    error: true
  }, error)), queryResult.data && mutationResult && /*#__PURE__*/_react.default.createElement(_box.Box, {
    marginTop: _uiConstants.spacers.dp12
  }, /*#__PURE__*/_react.default.createElement(_resultInfo.ResultInfo, {
    hasErrors: hasErrors,
    updatedItems: updatedItems,
    dashboardItems: queryResult.data.dashboard.dashboardItems,
    itemsCount: queryResult.data.dashboard.itemsCount
  })), /*#__PURE__*/_react.default.createElement(_box.Box, {
    marginTop: _uiConstants.spacers.dp12
  }, /*#__PURE__*/_react.default.createElement(_button.Button, {
    type: "button",
    disabled: offline || mutating || !entityAmount,
    loading: mutating,
    secondary: true,
    onClick: mutate
  }, _index.default.t('Apply sharing to dashboard visualizations'))));
};

exports.Controls = Controls;
Controls.propTypes = {
  entityAmount: _propTypes.default.number.isRequired,
  id: _propTypes.default.string.isRequired
};