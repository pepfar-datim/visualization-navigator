"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomDataLink = void 0;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class CustomDataLink {
  constructor(customData, {
    failOnMiss = true,
    loadForever = false
  } = {}) {
    _defineProperty(this, "failOnMiss", void 0);

    _defineProperty(this, "loadForever", void 0);

    _defineProperty(this, "data", void 0);

    this.data = customData;
    this.failOnMiss = failOnMiss;
    this.loadForever = loadForever;
  }

  async executeResourceQuery(type, query, options) {
    if (this.loadForever) {
      return new Promise(() => undefined);
    }

    const customResource = this.data[query.resource];

    if (customResource === undefined) {
      if (this.failOnMiss) {
        throw new Error("No data provided for resource type ".concat(query.resource, "!"));
      }

      return Promise.resolve(null);
    }

    switch (typeof customResource) {
      case 'string':
      case 'number':
      case 'boolean':
      case 'object':
        return customResource;

      case 'function':
        {
          const result = await customResource(type, query, options);

          if (typeof result === 'undefined' && this.failOnMiss) {
            throw new Error("The custom function for resource ".concat(query.resource, " must always return a value but returned ").concat(result));
          }

          return result || null;
        }
    }
  }

}

exports.CustomDataLink = CustomDataLink;