"use strict";

var mockPagers = _interopRequireWildcard(require("../__fixtures__/index.js"));

var _getItemRange = require("../get-item-range.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('getItemRange', () => {
  it('calculates the firstItem and lastItem correctly', () => {
    const {
      page,
      pageSize,
      total
    } = mockPagers.atTenthPage;
    const {
      firstItem,
      lastItem
    } = (0, _getItemRange.getItemRange)({
      page,
      pageSize,
      total
    });
    expect(firstItem).toBe(451);
    expect(lastItem).toBe(500);
  });
  it('returns 0 for firstItem and lastItem if the total is 0', () => {
    const {
      firstItem,
      lastItem
    } = (0, _getItemRange.getItemRange)({
      page: 1,
      pageSize: 50,
      total: 0
    });
    expect(firstItem).toBe(0);
    expect(lastItem).toBe(0);
  });
  it('uses the total count as lastItem when the last page is reached', () => {
    const {
      page,
      pageSize,
      total
    } = mockPagers.atLastPage;
    const {
      lastItem
    } = (0, _getItemRange.getItemRange)({
      page,
      pageSize,
      total
    });
    expect(lastItem).toBe(total);
  });
  it('handles pagers without totals', () => {
    const {
      firstItem,
      lastItem
    } = (0, _getItemRange.getItemRange)({
      page: 3,
      pageSize: 50
    });
    expect(firstItem).toBe(101);
    expect(lastItem).toBe(150);
  });
  it('bases the lastItem on the pageLength for pagers without total when the last page is reached', () => {
    const {
      lastItem
    } = (0, _getItemRange.getItemRange)({
      page: 3,
      pageSize: 50,
      pageLength: 21,
      isLastPage: true
    });
    expect(lastItem).toBe(121);
  });
  it('sets lastItem to NaN when on the last page and there is no total or pageLength', () => {
    const {
      lastItem
    } = (0, _getItemRange.getItemRange)({
      page: 3,
      pageSize: 50,
      isLastPage: true
    });
    expect(lastItem).toBe(NaN);
  });
});