{"ast":null,"code":"import { config, getAuthorization, getFullUrl, isTestEnv } from \"../config.service\";\nimport { getMockedResponse, isGetMocked } from \"../mock/getMock.serivce\";\nimport { getCachedResponse, isResponseCached, saveResponseToCache } from \"../cache/getCache.service\";\nimport { ContentType } from \"../../types/http.types\";\n\nconst mergeOptions = (options, acceptType) => Object.assign({\n  headers: {\n    Accept: acceptType\n  }\n}, options);\n\nexport async function getJson(endpointUrl, options) {\n  let response = await getData(endpointUrl, mergeOptions(options, ContentType.json)).then(r => r.json()).catch(error => {\n    console.error(`Request failed`, endpointUrl, error);\n    throw error;\n  });\n  if (isTestEnv() && !isGetMocked(endpointUrl)) saveResponseToCache(config.testUsername, endpointUrl, response);\n  return response;\n}\nexport function getText(endpointUrl, options) {\n  return getData(endpointUrl, mergeOptions(options, ContentType.text)).then(r => r.text());\n}\n\nfunction getData(endpointUrl, options) {\n  if (isTestEnv() && isGetMocked(endpointUrl)) return Promise.resolve(getMockedResponse(endpointUrl));\n  if (isTestEnv() && isResponseCached(config.testUsername, endpointUrl)) return Promise.resolve(getCachedResponse(config.testUsername, endpointUrl));\n  if (isTestEnv()) options.headers['authorization'] = getAuthorization();\n  if (isTestEnv()) console.log(`Request not cached ${endpointUrl}`);\n  return fetch(getFullUrl(endpointUrl), {\n    credentials: 'include',\n    ...options\n  });\n}","map":{"version":3,"names":["config","getAuthorization","getFullUrl","isTestEnv","getMockedResponse","isGetMocked","getCachedResponse","isResponseCached","saveResponseToCache","ContentType","mergeOptions","options","acceptType","Object","assign","headers","Accept","getJson","endpointUrl","response","getData","json","then","r","catch","error","console","testUsername","getText","text","Promise","resolve","log","fetch","credentials"],"sources":["/home/jake/SRC/visualization-navigator-ts/node_modules/@pepfar-react-lib/datim-api/services/methods/get.service.ts"],"sourcesContent":["import {config, getAuthorization, getFullUrl, isTestEnv} from \"../config.service\";\nimport {getMockedResponse, isGetMocked} from \"../mock/getMock.serivce\";\nimport {getCachedResponse, isResponseCached, saveResponseToCache} from \"../cache/getCache.service\";\nimport {ContentType} from \"../../types/http.types\";\n\nconst mergeOptions = (options:RequestInit,acceptType:string)=>Object.assign({headers:{Accept: acceptType}},options);\n\nexport async function getJson(endpointUrl:string,options?:RequestInit):Promise<any>{\n    let response = await getData(endpointUrl,mergeOptions(options,ContentType.json)).then(r=>r.json()).catch(error=>{\n        console.error(`Request failed`,endpointUrl,error);\n        throw error;\n    });\n    if (isTestEnv()&&!isGetMocked(endpointUrl)) saveResponseToCache(config.testUsername,endpointUrl,response);\n    return response;\n}\n\nexport function getText(endpointUrl:string, options?:RequestInit):Promise<any>{\n    return getData(endpointUrl,mergeOptions(options,ContentType.text)).then(r=>r.text());\n}\n\nfunction getData(endpointUrl, options?:RequestInit):Promise<any>{\n    if (isTestEnv()&&isGetMocked(endpointUrl)) return Promise.resolve(getMockedResponse(endpointUrl));\n    if (isTestEnv()&&isResponseCached(config.testUsername,endpointUrl)) return Promise.resolve(getCachedResponse(config.testUsername,endpointUrl))\n    if (isTestEnv()) options.headers['authorization'] = getAuthorization();\n    if (isTestEnv()) console.log(`Request not cached ${endpointUrl}`)\n    return fetch(getFullUrl(endpointUrl),{credentials: 'include', ...options})\n}"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,gBAAhB,EAAkCC,UAAlC,EAA8CC,SAA9C,QAA8D,mBAA9D;AACA,SAAQC,iBAAR,EAA2BC,WAA3B,QAA6C,yBAA7C;AACA,SAAQC,iBAAR,EAA2BC,gBAA3B,EAA6CC,mBAA7C,QAAuE,2BAAvE;AACA,SAAQC,WAAR,QAA0B,wBAA1B;;AAEA,MAAMC,YAAY,GAAG,CAACC,OAAD,EAAqBC,UAArB,KAAyCC,MAAM,CAACC,MAAP,CAAc;EAACC,OAAO,EAAC;IAACC,MAAM,EAAEJ;EAAT;AAAT,CAAd,EAA6CD,OAA7C,CAA9D;;AAEA,OAAO,eAAeM,OAAf,CAAuBC,WAAvB,EAA0CP,OAA1C,EAA4E;EAC/E,IAAIQ,QAAQ,GAAG,MAAMC,OAAO,CAACF,WAAD,EAAaR,YAAY,CAACC,OAAD,EAASF,WAAW,CAACY,IAArB,CAAzB,CAAP,CAA4DC,IAA5D,CAAiEC,CAAC,IAAEA,CAAC,CAACF,IAAF,EAApE,EAA8EG,KAA9E,CAAoFC,KAAK,IAAE;IAC5GC,OAAO,CAACD,KAAR,CAAe,gBAAf,EAA+BP,WAA/B,EAA2CO,KAA3C;IACA,MAAMA,KAAN;EACH,CAHoB,CAArB;EAIA,IAAItB,SAAS,MAAI,CAACE,WAAW,CAACa,WAAD,CAA7B,EAA4CV,mBAAmB,CAACR,MAAM,CAAC2B,YAAR,EAAqBT,WAArB,EAAiCC,QAAjC,CAAnB;EAC5C,OAAOA,QAAP;AACH;AAED,OAAO,SAASS,OAAT,CAAiBV,WAAjB,EAAqCP,OAArC,EAAuE;EAC1E,OAAOS,OAAO,CAACF,WAAD,EAAaR,YAAY,CAACC,OAAD,EAASF,WAAW,CAACoB,IAArB,CAAzB,CAAP,CAA4DP,IAA5D,CAAiEC,CAAC,IAAEA,CAAC,CAACM,IAAF,EAApE,CAAP;AACH;;AAED,SAAST,OAAT,CAAiBF,WAAjB,EAA8BP,OAA9B,EAAgE;EAC5D,IAAIR,SAAS,MAAIE,WAAW,CAACa,WAAD,CAA5B,EAA2C,OAAOY,OAAO,CAACC,OAAR,CAAgB3B,iBAAiB,CAACc,WAAD,CAAjC,CAAP;EAC3C,IAAIf,SAAS,MAAII,gBAAgB,CAACP,MAAM,CAAC2B,YAAR,EAAqBT,WAArB,CAAjC,EAAoE,OAAOY,OAAO,CAACC,OAAR,CAAgBzB,iBAAiB,CAACN,MAAM,CAAC2B,YAAR,EAAqBT,WAArB,CAAjC,CAAP;EACpE,IAAIf,SAAS,EAAb,EAAiBQ,OAAO,CAACI,OAAR,CAAgB,eAAhB,IAAmCd,gBAAgB,EAAnD;EACjB,IAAIE,SAAS,EAAb,EAAiBuB,OAAO,CAACM,GAAR,CAAa,sBAAqBd,WAAY,EAA9C;EACjB,OAAOe,KAAK,CAAC/B,UAAU,CAACgB,WAAD,CAAX,EAAyB;IAACgB,WAAW,EAAE,SAAd;IAAyB,GAAGvB;EAA5B,CAAzB,CAAZ;AACH"},"metadata":{},"sourceType":"module"}