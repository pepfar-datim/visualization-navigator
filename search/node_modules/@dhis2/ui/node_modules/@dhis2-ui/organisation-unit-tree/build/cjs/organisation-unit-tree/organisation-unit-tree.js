"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OrganisationUnitTree = void 0;

var _propTypes = require("@dhis2/prop-types");

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _index = require("../organisation-unit-node/index.js");

var _propTypes3 = require("../prop-types.js");

var _index2 = require("./default-render-node-label/index.js");

var _filterRootIds = require("./filter-root-ids.js");

var _rootError = require("./root-error.js");

var _rootLoading = require("./root-loading.js");

var _index3 = require("./use-expanded/index.js");

var _useForceReload = require("./use-force-reload.js");

var _index4 = require("./use-root-org-data/index.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const OrganisationUnitTree = _ref => {
  let {
    onChange,
    roots,
    autoExpandLoadingError,
    dataTest,
    disableSelection,
    forceReload,
    highlighted,
    isUserDataViewFallback,
    initiallyExpanded,
    filter,
    renderNodeLabel,
    selected,
    singleSelection,
    suppressAlphabeticalSorting,
    expanded: expandedControlled,
    handleExpand: handleExpandControlled,
    handleCollapse: handleCollapseControlled,
    onExpand,
    onCollapse,
    onChildrenLoaded
  } = _ref;
  const rootIds = (0, _filterRootIds.filterRootIds)(filter, Array.isArray(roots) ? roots : [roots]);
  const reloadId = (0, _useForceReload.useForceReload)(forceReload);
  const [prevReloadId, setPrevReloadId] = (0, _react.useState)(reloadId);
  const {
    called,
    loading,
    error,
    data,
    refetch
  } = (0, _index4.useRootOrgData)(rootIds, {
    isUserDataViewFallback,
    suppressAlphabeticalSorting
  });
  const {
    expanded,
    handleExpand,
    handleCollapse
  } = (0, _index3.useExpanded)({
    initiallyExpanded,
    onExpand,
    onCollapse,
    expandedControlled,
    handleExpandControlled,
    handleCollapseControlled
  });
  (0, _react.useEffect)(() => {
    // do not refetch on initial render
    if (refetch && reloadId > 0 && reloadId !== prevReloadId) {
      refetch();
      setPrevReloadId(reloadId);
    }

    return () => console.warn('@TODO: Why does this component unmount after a force reload?');
  }, [reloadId, prevReloadId, refetch]);
  const isLoading = !called || loading;
  return /*#__PURE__*/_react.default.createElement("div", {
    "data-test": dataTest
  }, isLoading && /*#__PURE__*/_react.default.createElement(_rootLoading.RootLoading, null), error && /*#__PURE__*/_react.default.createElement(_rootError.RootError, {
    error: error
  }), !error && !isLoading && rootIds.map(rootId => {
    const rootNode = data[rootId];
    return /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitNode, {
      key: rootNode.path,
      rootId: rootId,
      autoExpandLoadingError: autoExpandLoadingError,
      dataTest: dataTest,
      disableSelection: disableSelection,
      displayName: rootNode.displayName,
      expanded: expanded,
      highlighted: highlighted,
      id: rootId,
      isUserDataViewFallback: isUserDataViewFallback,
      filter: filter,
      path: rootNode.path,
      renderNodeLabel: renderNodeLabel,
      selected: selected,
      singleSelection: singleSelection,
      suppressAlphabeticalSorting: suppressAlphabeticalSorting,
      onChange: onChange,
      onChildrenLoaded: onChildrenLoaded,
      onCollapse: handleCollapse,
      onExpand: handleExpand
    });
  }));
};

exports.OrganisationUnitTree = OrganisationUnitTree;
OrganisationUnitTree.propTypes = {
  /** Root org unit ID(s) */
  roots: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.string)]).isRequired,

  /** Will be called with the following object:
   * `{ id: string, displayName: string, path: string, checked: boolean, selected: string[] }` */
  onChange: _propTypes2.default.func.isRequired,

  /** When set, the error when loading children fails will be shown automatically */
  autoExpandLoadingError: _propTypes2.default.bool,
  dataTest: _propTypes2.default.string,

  /** When set to true, no unit can be selected */
  disableSelection: _propTypes2.default.bool,
  expanded: (0, _propTypes.requiredIf)(props => !!props.handleExpand || !!props.handleCollapse, _propTypes2.default.arrayOf(_propTypes2.default.string)),

  /**
   * All organisation units with a path that includes the provided paths will be shown.
   * All others will not be rendered. When not provided, all org units will be shown.
   */
  filter: _propTypes2.default.arrayOf(_propTypes3.orgUnitPathPropType),

  /** When true, everything will be reloaded. In order to load it again after reloading, `forceReload` has to be set to `false` and then to `true` again */
  forceReload: _propTypes2.default.bool,
  handleCollapse: (0, _propTypes.requiredIf)(props => !!props.expanded || !!props.handleExpand, _propTypes2.default.func),
  handleExpand: (0, _propTypes.requiredIf)(props => !!props.expanded || !!props.handleCollapse, _propTypes2.default.func),

  /**
   * All units provided to "highlighted" as path will be visually
   * highlighted.
   * Note:
   * The d2-ui component used two props for this:
   * * searchResults
   * * highlightSearchResults
   */
  highlighted: _propTypes2.default.arrayOf(_propTypes3.orgUnitPathPropType),

  /**
   * An array of OU paths that will be expanded automatically
   * as soon as they are encountered.
   * The path of an OU is the UIDs of the OU
   * and all its parent OUs separated by slashes (/)
   * Note: This replaces "openFirstLevel" as that's redundant
   */
  initiallyExpanded: _propTypes2.default.arrayOf(_propTypes3.orgUnitPathPropType),

  /** When provided, the 'isUserDataViewFallback' option will be sent when requesting the org units */
  isUserDataViewFallback: _propTypes2.default.bool,

  /** Renders the actual node component for each leaf, can be used to
   * customize the node. The default function just returns the node's
   * displayName
   *
   * Shape of the object passed to the callback:
   * ```
   * {
   *    label: string,
   *    node: {
   *      displayName: string,
   *      id: string,
   *      // Only provided once `loading` is false
   *      path?: string,
   *      // Only provided once `loading` is false
   *      children?: Array.<{
   *        id: string,
   *        path: string,
   *        displayName: string
   *      }>
   *    },
   *    loading: boolean,
   *    error: string,
   *    open: boolean,
   *    selected: string[],
   *    singleSelection: boolean,
   *    disableSelection: boolean,
   * }
   * ``` */
  renderNodeLabel: _propTypes2.default.func,

  /** An array of paths of selected OUs. The path of an OU is the UIDs of the OU and all its parent OUs separated by slashes (`/`) */
  selected: _propTypes2.default.arrayOf(_propTypes3.orgUnitPathPropType),

  /** When set, no checkboxes will be displayed and only the first selected path in `selected` will be highlighted */
  singleSelection: _propTypes2.default.bool,

  /** Turns off alphabetical sorting of units */
  suppressAlphabeticalSorting: _propTypes2.default.bool,

  /** Called with the children's data that was loaded */
  onChildrenLoaded: _propTypes2.default.func,

  /** Called with `{ path: string }` with the path of the parent of the level closed */
  onCollapse: _propTypes2.default.func,

  /** Called with `{ path: string }` with the path of the parent of the level opened */
  onExpand: _propTypes2.default.func
  /**
   * All units with ids (not paths!) provided
   * to "idsThatShouldBeReloaded" will be reloaded
   * In order to reload an id twice, the array must be changed
   * while keeping the id to reload in the array
   *
   * NOTE: This is currently not working due to a limitation
   * of the data engine (we can't force specific resource to reload,
   * we'd have to reload the sibling nodes currently as well)
   */
  //idsThatShouldBeReloaded: propTypes.arrayOf(orgUnitIdPropType),

};
OrganisationUnitTree.defaultProps = {
  dataTest: 'dhis2-uiwidgets-orgunittree',
  filter: [],
  highlighted: [],
  initiallyExpanded: [],
  selected: [],
  renderNodeLabel: _index2.defaultRenderNodeLabel
};