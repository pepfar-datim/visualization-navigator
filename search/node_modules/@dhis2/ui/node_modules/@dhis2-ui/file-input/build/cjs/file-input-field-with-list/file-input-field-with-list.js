"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileInputFieldWithList = void 0;

var _uiConstants = require("@dhis2/ui-constants");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _index = require("../index.js");

var _index2 = _interopRequireDefault(require("../locales/index.js"));

var _fileListItemWithRemove = require("./file-list-item-with-remove.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// TODO: i18n
const translate = (prop, interpolationObject) => {
  if (typeof prop === 'function') {
    return prop(interpolationObject);
  }

  return prop;
};

class FileInputFieldWithList extends _react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleChange", (_ref, event) => {
      let {
        files: fileList
      } = _ref;
      const {
        onChange,
        name
      } = this.props;
      onChange({
        files: this.updateFileArray(fileList),
        name: name
      }, event);
    });

    _defineProperty(this, "handleRemove", (_ref2, event) => {
      let {
        file: fileToRemove
      } = _ref2;
      const {
        files,
        onChange,
        name
      } = this.props;
      onChange({
        files: files.filter(file => file !== fileToRemove),
        name
      }, event);
    });
  }

  /**
   * @param {FileList} fileList
   * @returns {File[]}
   */
  updateFileArray(fileList) {
    const {
      multiple,
      files
    } = this.props; // Spread immutable FileList instance onto array

    const newFiles = [...fileList];

    if (!multiple) {
      return newFiles;
    }

    return files.filter(file => !newFiles.some(x => x.name === file.name && x.lastModified === file.lastModified && x.size === file.size && x.type === file.type)).concat(newFiles);
  }

  render() {
    const {
      accept,
      buttonLabel,
      className,
      dataTest,
      disabled,
      error,
      files,
      helpText,
      initialFocus,
      label,
      large,
      multiple,
      name,
      onBlur,
      onFocus,
      placeholder,
      removeText,
      required,
      small,
      tabIndex,
      valid,
      validationText,
      warning
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_index.FileInputField, {
      accept: accept,
      buttonLabel: translate(buttonLabel),
      className: className,
      dataTest: dataTest,
      disabled: disabled || !multiple && files.length >= 1,
      error: error,
      helpText: helpText,
      initialFocus: initialFocus,
      label: label,
      large: large,
      multiple: multiple,
      name: name,
      onBlur: onBlur,
      onChange: this.handleChange,
      onFocus: onFocus,
      placeholder: translate(placeholder),
      required: required,
      small: small,
      tabIndex: tabIndex,
      valid: valid,
      validationText: validationText,
      warning: warning
    }, files.length > 0 && files.map(file => /*#__PURE__*/_react.default.createElement(_fileListItemWithRemove.FileListItemWithRemove, {
      key: file.name,
      label: file.name,
      removeText: translate(removeText),
      onRemove: this.handleRemove,
      file: file
    })));
  }

}

exports.FileInputFieldWithList = FileInputFieldWithList;
FileInputFieldWithList.defaultProps = {
  dataTest: 'dhis2-uiwidgets-fileinputfieldwithlist',
  files: [],
  buttonLabel: () => _index2.default.t('Upload a file'),
  placeholder: () => _index2.default.t('No file uploaded yet'),
  removeText: () => _index2.default.t('Remove')
};
FileInputFieldWithList.propTypes = {
  /** Called with signature `({ name: string, files: [File] }, event)` */
  onChange: _propTypes.default.func.isRequired,

  /** The `accept` attribute of the [native file input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept) */
  accept: _propTypes.default.string,

  /** Text on the button */
  buttonLabel: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,

  /** Disables the button */
  disabled: _propTypes.default.bool,

  /** Applies 'error' styling to the button and validation text. Mutually exclusive with `warning` and `valid` props */
  error: _uiConstants.sharedPropTypes.statusPropType,
  files: _propTypes.default.arrayOf(_propTypes.default.instanceOf(File)),

  /** Useful guiding text for the user */
  helpText: _propTypes.default.string,
  initialFocus: _propTypes.default.bool,

  /** A descriptive label above the button */
  label: _propTypes.default.string,

  /** Size of the button. Mutually exclusive with the `small` prop */
  large: _uiConstants.sharedPropTypes.sizePropType,

  /** The `multiple` attribute of the [native file input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#multiple) */
  multiple: _propTypes.default.bool,

  /** Name associated with input. Passed to event handler callbacks */
  name: _propTypes.default.string,

  /** Placeholder below the button */
  placeholder: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),

  /** Text used for the button that removes a file from the list */
  removeText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),

  /** Adds an asterisk to indicate this field is required */
  required: _propTypes.default.bool,

  /** Size of the button. Mutually exclusive with the `large` prop */
  small: _uiConstants.sharedPropTypes.sizePropType,
  tabIndex: _propTypes.default.string,

  /** Applies 'valid' styling to the button and validation text. Mutually exclusive with `warning` and `error` props */
  valid: _uiConstants.sharedPropTypes.statusPropType,

  /** Text below the button that provides validation feedback */
  validationText: _propTypes.default.string,

  /** Applies 'warning' styling to the button and validation text. Mutually exclusive with `valid` and `error` props */
  warning: _uiConstants.sharedPropTypes.statusPropType,
  onBlur: _propTypes.default.func,
  onFocus: _propTypes.default.func
};