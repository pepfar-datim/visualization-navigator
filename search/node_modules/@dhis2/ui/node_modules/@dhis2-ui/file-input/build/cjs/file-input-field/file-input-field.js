"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileInputField = void 0;

var _field = require("@dhis2-ui/field");

var _label = require("@dhis2-ui/label");

var _uiConstants = require("@dhis2/ui-constants");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _index = require("../index.js");

var _index2 = _interopRequireDefault(require("../locales/index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: i18n
const translate = (prop, interpolationObject) => {
  if (typeof prop === 'function') {
    return prop(interpolationObject);
  }

  return prop;
};

const FileInputField = _ref => {
  let {
    accept,
    buttonLabel,
    children,
    className,
    dataTest,
    disabled,
    error,
    helpText,
    initialFocus,
    label,
    large,
    multiple,
    name,
    onBlur,
    onChange,
    onFocus,
    placeholder,
    required,
    small,
    tabIndex,
    valid,
    validationText,
    warning
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_field.Field, {
    className: className,
    dataTest: dataTest,
    helpText: helpText,
    validationText: validationText,
    error: error,
    warning: warning,
    valid: valid
  }, label && /*#__PURE__*/_react.default.createElement(_label.Label, {
    required: required,
    disabled: disabled,
    htmlFor: name
  }, label), /*#__PURE__*/_react.default.createElement(_index.FileInput, {
    accept: accept,
    buttonLabel: translate(buttonLabel),
    className: className,
    disabled: disabled,
    error: error,
    initialFocus: initialFocus,
    large: large,
    multiple: multiple,
    name: name,
    onBlur: onBlur,
    onChange: onChange,
    onFocus: onFocus,
    small: small,
    tabIndex: tabIndex,
    valid: valid,
    warning: warning
  }), /*#__PURE__*/_react.default.createElement(_index.FileList, null, children ? children : /*#__PURE__*/_react.default.createElement(_index.FileListPlaceholder, null, translate(placeholder))));
};

exports.FileInputField = FileInputField;
FileInputField.defaultProps = {
  accept: '*',
  dataTest: 'dhis2-uiwidgets-fileinputfield',
  buttonLabel: () => _index2.default.t('Upload a file'),
  placeholder: () => _index2.default.t('No file uploaded yet')
};
FileInputField.propTypes = {
  /** The `accept` attribute of the [native file input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept) */
  accept: _propTypes.default.string,

  /** Text on the button */
  buttonLabel: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,

  /** Disables the button */
  disabled: _propTypes.default.bool,

  /** Applies 'error' styling to the validation text. Mutually exclusive with `warning` and `valid` props */
  error: _uiConstants.sharedPropTypes.statusPropType,

  /** Useful guiding text for the user */
  helpText: _propTypes.default.string,
  initialFocus: _propTypes.default.bool,

  /** A descriptive label above the button */
  label: _propTypes.default.string,

  /** Size of the button. Mutually exclusive with the `small` prop */
  large: _uiConstants.sharedPropTypes.sizePropType,

  /** The `multiple` attribute of the [native file input](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#multiple) */
  multiple: _propTypes.default.bool,

  /** Name associated with input. Passed to event handler callbacks */
  name: _propTypes.default.string,

  /** Placeholder below the button */
  placeholder: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),

  /** Adds an asterisk to indicate this field is required */
  required: _propTypes.default.bool,

  /** Size of the button. Mutually exclusive with the `large` prop */
  small: _uiConstants.sharedPropTypes.sizePropType,
  tabIndex: _propTypes.default.string,

  /** Applies 'valid' styling to the validation text. Mutually exclusive with `warning` and `error` props */
  valid: _uiConstants.sharedPropTypes.statusPropType,

  /** Text below the button that provides validation feedback */
  validationText: _propTypes.default.string,

  /** Applies 'warning' styling to the validation text. Mutually exclusive with `valid` and `error` props */
  warning: _uiConstants.sharedPropTypes.statusPropType,
  onBlur: _propTypes.default.func,

  /** Called with signature `({ name: string, files: [] }, event)` */
  onChange: _propTypes.default.func,
  onFocus: _propTypes.default.func
};