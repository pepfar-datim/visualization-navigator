{"ast":null,"code":"import debounce from 'lodash/debounce';\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nconst lastOnlineKey = 'dhis2.lastOnline'; // TODO: Add option to periodically ping server to check online status.\n// TODO: Add logic to return a variable indicating unstable connection.\n\n/**\n * Returns the browser's online status. Updates in response to 'online' and\n * 'offline' events. By default, debounces updates to once every second to\n * avoid UI flicker, but that delay can be configured with the\n * `options.debounceDelay` param.\n *\n * On state change, updates the `dhis2.lastOnline` property in local storage\n * for consuming apps to format and display. Returns `lastOnline` as `null` if\n * online or as a Date if offline.\n *\n * @param {Object} [options]\n * @param {Number} [options.debounceDelay] - Timeout delay to debounce updates, in ms\n * @returns {Object} `{ online: boolean, offline: boolean, lastOnline: Date | null }`\n */\n\nexport function useOnlineStatus() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var _options$debounceDela; // initialize state to `navigator.onLine` value\n\n\n  const [online, setOnline] = useState(navigator.onLine); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const updateState = useCallback(debounce(_ref => {\n    let {\n      type\n    } = _ref;\n\n    if (type === 'online') {\n      setOnline(true);\n    } else if (type === 'offline') {\n      if (online || !localStorage.getItem(lastOnlineKey)) {\n        localStorage.setItem(lastOnlineKey, new Date(Date.now()).toUTCString());\n      }\n\n      setOnline(false);\n    }\n  }, (_options$debounceDela = options.debounceDelay) !== null && _options$debounceDela !== void 0 ? _options$debounceDela : 1000), [options.debounceDelay]); // on 'online' or 'offline' events, set state\n\n  useEffect(() => {\n    window.addEventListener('online', updateState);\n    window.addEventListener('offline', updateState);\n    return () => {\n      updateState.flush();\n      window.removeEventListener('online', updateState);\n      window.removeEventListener('offline', updateState);\n    };\n  }, [updateState]); // Only fetch if `online === false` as local storage is synchronous and disk-based\n\n  const lastOnline = useMemo(() => !online && localStorage.getItem(lastOnlineKey), [online]);\n  return {\n    online,\n    offline: !online,\n    lastOnline: lastOnline ? new Date(lastOnline) : null\n  };\n}","map":{"version":3,"names":["debounce","useState","useEffect","useCallback","useMemo","lastOnlineKey","useOnlineStatus","options","_options$debounceDela","online","setOnline","navigator","onLine","updateState","type","localStorage","getItem","setItem","Date","now","toUTCString","debounceDelay","window","addEventListener","flush","removeEventListener","lastOnline","offline"],"sources":["/home/jake/SRC/visualization-navigator-ts/node_modules/@dhis2/app-runtime/node_modules/@dhis2/app-service-offline/build/es/lib/online-status.js"],"sourcesContent":["import debounce from 'lodash/debounce';\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nconst lastOnlineKey = 'dhis2.lastOnline'; // TODO: Add option to periodically ping server to check online status.\n// TODO: Add logic to return a variable indicating unstable connection.\n\n/**\n * Returns the browser's online status. Updates in response to 'online' and\n * 'offline' events. By default, debounces updates to once every second to\n * avoid UI flicker, but that delay can be configured with the\n * `options.debounceDelay` param.\n *\n * On state change, updates the `dhis2.lastOnline` property in local storage\n * for consuming apps to format and display. Returns `lastOnline` as `null` if\n * online or as a Date if offline.\n *\n * @param {Object} [options]\n * @param {Number} [options.debounceDelay] - Timeout delay to debounce updates, in ms\n * @returns {Object} `{ online: boolean, offline: boolean, lastOnline: Date | null }`\n */\n\nexport function useOnlineStatus(options = {}) {\n  var _options$debounceDela;\n\n  // initialize state to `navigator.onLine` value\n  const [online, setOnline] = useState(navigator.onLine); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const updateState = useCallback(debounce(({\n    type\n  }) => {\n    if (type === 'online') {\n      setOnline(true);\n    } else if (type === 'offline') {\n      if (online || !localStorage.getItem(lastOnlineKey)) {\n        localStorage.setItem(lastOnlineKey, new Date(Date.now()).toUTCString());\n      }\n\n      setOnline(false);\n    }\n  }, (_options$debounceDela = options.debounceDelay) !== null && _options$debounceDela !== void 0 ? _options$debounceDela : 1000), [options.debounceDelay]); // on 'online' or 'offline' events, set state\n\n  useEffect(() => {\n    window.addEventListener('online', updateState);\n    window.addEventListener('offline', updateState);\n    return () => {\n      updateState.flush();\n      window.removeEventListener('online', updateState);\n      window.removeEventListener('offline', updateState);\n    };\n  }, [updateState]); // Only fetch if `online === false` as local storage is synchronous and disk-based\n\n  const lastOnline = useMemo(() => !online && localStorage.getItem(lastOnlineKey), [online]);\n  return {\n    online,\n    offline: !online,\n    lastOnline: lastOnline ? new Date(lastOnline) : null\n  };\n}"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,iBAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,EAA2CC,OAA3C,QAA0D,OAA1D;AACA,MAAMC,aAAa,GAAG,kBAAtB,C,CAA0C;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,eAAT,GAAuC;EAAA,IAAdC,OAAc,uEAAJ,EAAI;;EAC5C,IAAIC,qBAAJ,CAD4C,CAG5C;;;EACA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAACU,SAAS,CAACC,MAAX,CAApC,CAJ4C,CAIY;;EAExD,MAAMC,WAAW,GAAGV,WAAW,CAACH,QAAQ,CAAC,QAEnC;IAAA,IAFoC;MACxCc;IADwC,CAEpC;;IACJ,IAAIA,IAAI,KAAK,QAAb,EAAuB;MACrBJ,SAAS,CAAC,IAAD,CAAT;IACD,CAFD,MAEO,IAAII,IAAI,KAAK,SAAb,EAAwB;MAC7B,IAAIL,MAAM,IAAI,CAACM,YAAY,CAACC,OAAb,CAAqBX,aAArB,CAAf,EAAoD;QAClDU,YAAY,CAACE,OAAb,CAAqBZ,aAArB,EAAoC,IAAIa,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,EAAqBC,WAArB,EAApC;MACD;;MAEDV,SAAS,CAAC,KAAD,CAAT;IACD;EACF,CAZuC,EAYrC,CAACF,qBAAqB,GAAGD,OAAO,CAACc,aAAjC,MAAoD,IAApD,IAA4Db,qBAAqB,KAAK,KAAK,CAA3F,GAA+FA,qBAA/F,GAAuH,IAZlF,CAAT,EAYkG,CAACD,OAAO,CAACc,aAAT,CAZlG,CAA/B,CAN4C,CAkB+G;;EAE3JnB,SAAS,CAAC,MAAM;IACdoB,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCV,WAAlC;IACAS,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCV,WAAnC;IACA,OAAO,MAAM;MACXA,WAAW,CAACW,KAAZ;MACAF,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCZ,WAArC;MACAS,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAsCZ,WAAtC;IACD,CAJD;EAKD,CARQ,EAQN,CAACA,WAAD,CARM,CAAT,CApB4C,CA4BzB;;EAEnB,MAAMa,UAAU,GAAGtB,OAAO,CAAC,MAAM,CAACK,MAAD,IAAWM,YAAY,CAACC,OAAb,CAAqBX,aAArB,CAAlB,EAAuD,CAACI,MAAD,CAAvD,CAA1B;EACA,OAAO;IACLA,MADK;IAELkB,OAAO,EAAE,CAAClB,MAFL;IAGLiB,UAAU,EAAEA,UAAU,GAAG,IAAIR,IAAJ,CAASQ,UAAT,CAAH,GAA0B;EAH3C,CAAP;AAKD"},"metadata":{},"sourceType":"module"}