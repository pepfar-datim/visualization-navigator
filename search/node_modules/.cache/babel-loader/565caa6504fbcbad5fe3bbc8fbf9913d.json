{"ast":null,"code":"import { Environment } from \"../types/config.type\";\nexport let config = {\n  environment: null,\n  baseUrl: null,\n  testUsername: null,\n  authorization: null\n};\nexport function register(environment, baseUrl) {\n  if (!['production', 'development', 'test'].includes(environment)) throw new Error(`Incorrect environment provided: ${environment}`);\n  config.environment = environment;\n  if (config.environment === Environment.production) config.baseUrl = `../../../`;else config.baseUrl = baseUrl;\n}\nexport function setTestUsername(testUsername, authorization) {\n  config.testUsername = testUsername;\n  config.authorization = authorization;\n}\nexport function getAuthorization() {\n  return config.authorization;\n}\nexport function isTestEnv() {\n  if (!config.environment) throw new Error(`Environment not provided`);\n  return config.environment === Environment.test;\n}\nexport function getBaseUrl() {\n  if (!config.baseUrl) throw new Error(`baseUrl not set`);\n  return config.baseUrl;\n}\nexport function getFullUrl(endpoint) {\n  return `${getBaseUrl()}api${endpoint}`;\n}","map":{"version":3,"names":["Environment","config","environment","baseUrl","testUsername","authorization","register","includes","Error","production","setTestUsername","getAuthorization","isTestEnv","test","getBaseUrl","getFullUrl","endpoint"],"sources":["/home/jake/SRC/landing-page/node_modules/@pepfar-react-lib/datim-api/services/config.service.ts"],"sourcesContent":["import {Config, Environment} from \"../types/config.type\";\n\nexport let config:Config={\n    environment: null,\n    baseUrl:null,\n    testUsername: null,\n    authorization: null,\n};\n\nexport function register(environment:string,baseUrl?:string){\n    if (!['production','development','test'].includes(environment)) throw new Error(`Incorrect environment provided: ${environment}`)\n    config.environment = environment as Environment;\n    if (config.environment===Environment.production) config.baseUrl = `../../../`;\n    else config.baseUrl = baseUrl;\n}\n\nexport function setTestUsername(testUsername:string,authorization:string){\n    config.testUsername = testUsername;\n    config.authorization = authorization;\n}\n\nexport function getAuthorization():string{\n    return config.authorization;\n}\n\nexport function isTestEnv():boolean{\n    if (!config.environment) throw new Error(`Environment not provided`);\n    return config.environment===Environment.test;\n}\n\nexport function getBaseUrl():string{\n    if (!config.baseUrl) throw new Error(`baseUrl not set`);\n    return config.baseUrl;\n}\n\nexport function getFullUrl(endpoint:string):string{\n    return `${getBaseUrl()}api${endpoint}`;\n}"],"mappings":"AAAA,SAAgBA,WAAhB,QAAkC,sBAAlC;AAEA,OAAO,IAAIC,MAAa,GAAC;EACrBC,WAAW,EAAE,IADQ;EAErBC,OAAO,EAAC,IAFa;EAGrBC,YAAY,EAAE,IAHO;EAIrBC,aAAa,EAAE;AAJM,CAAlB;AAOP,OAAO,SAASC,QAAT,CAAkBJ,WAAlB,EAAqCC,OAArC,EAAqD;EACxD,IAAI,CAAC,CAAC,YAAD,EAAc,aAAd,EAA4B,MAA5B,EAAoCI,QAApC,CAA6CL,WAA7C,CAAL,EAAgE,MAAM,IAAIM,KAAJ,CAAW,mCAAkCN,WAAY,EAAzD,CAAN;EAChED,MAAM,CAACC,WAAP,GAAqBA,WAArB;EACA,IAAID,MAAM,CAACC,WAAP,KAAqBF,WAAW,CAACS,UAArC,EAAiDR,MAAM,CAACE,OAAP,GAAkB,WAAlB,CAAjD,KACKF,MAAM,CAACE,OAAP,GAAiBA,OAAjB;AACR;AAED,OAAO,SAASO,eAAT,CAAyBN,YAAzB,EAA6CC,aAA7C,EAAkE;EACrEJ,MAAM,CAACG,YAAP,GAAsBA,YAAtB;EACAH,MAAM,CAACI,aAAP,GAAuBA,aAAvB;AACH;AAED,OAAO,SAASM,gBAAT,GAAkC;EACrC,OAAOV,MAAM,CAACI,aAAd;AACH;AAED,OAAO,SAASO,SAAT,GAA4B;EAC/B,IAAI,CAACX,MAAM,CAACC,WAAZ,EAAyB,MAAM,IAAIM,KAAJ,CAAW,0BAAX,CAAN;EACzB,OAAOP,MAAM,CAACC,WAAP,KAAqBF,WAAW,CAACa,IAAxC;AACH;AAED,OAAO,SAASC,UAAT,GAA4B;EAC/B,IAAI,CAACb,MAAM,CAACE,OAAZ,EAAqB,MAAM,IAAIK,KAAJ,CAAW,iBAAX,CAAN;EACrB,OAAOP,MAAM,CAACE,OAAd;AACH;AAED,OAAO,SAASY,UAAT,CAAoBC,QAApB,EAA2C;EAC9C,OAAQ,GAAEF,UAAU,EAAG,MAAKE,QAAS,EAArC;AACH"},"metadata":{},"sourceType":"module"}