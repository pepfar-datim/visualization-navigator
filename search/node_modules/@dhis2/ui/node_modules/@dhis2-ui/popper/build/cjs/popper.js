"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Popper = void 0;

var _uiConstants = require("@dhis2/ui-constants");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactPopper = require("react-popper");

var _getReferenceElement = require("./get-reference-element.js");

var _modifiers = require("./modifiers.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Popper = _ref => {
  let {
    children,
    className,
    dataTest,
    modifiers,
    observePopperResize,
    observeReferenceResize,
    onFirstUpdate,
    placement,
    reference,
    strategy
  } = _ref;
  const referenceElement = (0, _getReferenceElement.getReferenceElement)(reference);
  const [popperElement, setPopperElement] = (0, _react.useState)(null);
  const deduplicatedModifiers = (0, _react.useMemo)(() => (0, _modifiers.deduplicateModifiers)(modifiers, {
    observePopperResize,
    observeReferenceResize
  }), [modifiers, observePopperResize, observeReferenceResize]);
  const {
    styles,
    attributes
  } = (0, _reactPopper.usePopper)(referenceElement, popperElement, {
    strategy,
    onFirstUpdate,
    placement,
    modifiers: deduplicatedModifiers
  });
  return /*#__PURE__*/_react.default.createElement("div", _extends({
    className: className,
    "data-test": dataTest,
    ref: setPopperElement,
    style: styles.popper
  }, attributes.popper), children);
};

exports.Popper = Popper;
Popper.defaultProps = {
  dataTest: 'dhis2-uicore-popper',
  modifiers: [],
  placement: 'auto'
}; // Prop names follow the names here: https://popper.js.org/docs/v2/constructors/

Popper.propTypes = {
  /** Content inside the Popper */
  children: _propTypes.default.node.isRequired,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,

  /** A property of the `createPopper` options. See [popper docs](https://popper.js.org/docs/v2/constructors/) */
  modifiers: _propTypes.default.arrayOf(_propTypes.default.shape({
    name: _propTypes.default.string,
    options: _propTypes.default.object
  })),

  /** Makes the Popper update position when the **Popper content** changes size */
  observePopperResize: _propTypes.default.bool,

  /** Makes the Popper update position when the **reference element** changes size */
  observeReferenceResize: _propTypes.default.bool,

  /** A property of the `createPopper` options. See [popper docs](https://popper.js.org/docs/v2/constructors/) */
  placement: _uiConstants.sharedPropTypes.popperPlacementPropType,

  /** A React ref, DOM node, or [virtual element](https://popper.js.org/docs/v2/virtual-elements/) for the popper to position itself against */
  reference: _uiConstants.sharedPropTypes.popperReferencePropType,

  /** A property of the `createPopper` options. See [popper docs](https://popper.js.org/docs/v2/constructors/) */
  strategy: _propTypes.default.oneOf(['absolute', 'fixed']),
  // defaults to 'absolute'

  /** A property of the `createPopper` options. See [popper docs](https://popper.js.org/docs/v2/constructors/) */
  onFirstUpdate: _propTypes.default.func
};