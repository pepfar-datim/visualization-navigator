"use strict";

var _steps = require("cypress-cucumber-preprocessor/steps");

var _common = require("../../__e2e__/common.js");

const expectOrgUnitsToBeDisplayed = ids => {
  const expandedLabels = ids.map(id => (0, _common.getOrganisationUnitData)(id, {
    fields: ['displayName']
  }).displayName);
  expandedLabels.forEach(label => {
    cy.get(":contains(\"".concat(label, "\")")).should('exist');
  });
};

const expectOrgUnitsToNotBeDisplayed = ids => {
  const expandedLabels = ids.map(id => {
    const data = (0, _common.getOrganisationUnitData)(id, {
      fields: ['displayName']
    });
    return data.displayName;
  });
  expandedLabels.forEach(label => {
    cy.get(":contains(\"".concat(label, "\")")).should('not.exist');
  });
};

(0, _steps.Given)('the initial state of the controlled expanded prop has some paths', () => {
  cy.visitStory(_common.namespace, 'Controlled');
  cy.window().then(win => {
    cy.wrap(win.initiallyExpandedPaths).as('providedPaths');
  });
});
(0, _steps.When)('the org unit tree should is done loading the provided paths', () => {
  cy.window().then(win => {
    const expandedIds = win.initiallyExpandedPaths.map(path => path.match(/[^/]+$/)[0]);
    expectOrgUnitsToBeDisplayed(expandedIds);
  });
});
(0, _steps.When)('the user clicks on a button to collapse one of the opened paths', () => {
  cy.window().then(win => {
    cy.wrap([win.orgUnitPathToExpand]).as('providedPaths');
  });
  cy.get('[data-test="org-unit-toggle"]').click();
});
(0, _steps.Then)('the org unit tree should open the provided paths when done loading', () => {
  cy.get('@providedPaths').then(providedPaths => {
    const providedIds = providedPaths.map(path => path.match(/[^/]+$/)[0]);
    expectOrgUnitsToBeDisplayed(providedIds);
  });
});
(0, _steps.Then)('the path should close', () => {
  cy.get('@providedPaths').then(providedPaths => {
    const providedIds = providedPaths.map(path => path.match(/[^/]+$/)[0]);
    const hiddenChildrenIds = providedIds.reduce((acc, cur) => {
      const curData = (0, _common.getOrganisationUnitData)(cur, {
        fields: ['children[id,path,displayName]']
      });
      const childrenIds = curData.children.map(_ref => {
        let {
          id
        } = _ref;
        return id;
      });
      return [...acc, ...childrenIds];
    }, []);
    expectOrgUnitsToNotBeDisplayed(hiddenChildrenIds);
  });
});