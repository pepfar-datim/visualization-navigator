function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { sharedPropTypes } from '@dhis2/ui-constants';
import PropTypes from 'prop-types';
import React, { useState, useMemo } from 'react';
import { usePopper } from 'react-popper';
import { getReferenceElement } from './get-reference-element.js';
import { deduplicateModifiers } from './modifiers.js';

const Popper = _ref => {
  let {
    children,
    className,
    dataTest,
    modifiers,
    observePopperResize,
    observeReferenceResize,
    onFirstUpdate,
    placement,
    reference,
    strategy
  } = _ref;
  const referenceElement = getReferenceElement(reference);
  const [popperElement, setPopperElement] = useState(null);
  const deduplicatedModifiers = useMemo(() => deduplicateModifiers(modifiers, {
    observePopperResize,
    observeReferenceResize
  }), [modifiers, observePopperResize, observeReferenceResize]);
  const {
    styles,
    attributes
  } = usePopper(referenceElement, popperElement, {
    strategy,
    onFirstUpdate,
    placement,
    modifiers: deduplicatedModifiers
  });
  return /*#__PURE__*/React.createElement("div", _extends({
    className: className,
    "data-test": dataTest,
    ref: setPopperElement,
    style: styles.popper
  }, attributes.popper), children);
};

Popper.defaultProps = {
  dataTest: 'dhis2-uicore-popper',
  modifiers: [],
  placement: 'auto'
}; // Prop names follow the names here: https://popper.js.org/docs/v2/constructors/

Popper.propTypes = {
  /** Content inside the Popper */
  children: PropTypes.node.isRequired,
  className: PropTypes.string,
  dataTest: PropTypes.string,

  /** A property of the `createPopper` options. See [popper docs](https://popper.js.org/docs/v2/constructors/) */
  modifiers: PropTypes.arrayOf(PropTypes.shape({
    name: PropTypes.string,
    options: PropTypes.object
  })),

  /** Makes the Popper update position when the **Popper content** changes size */
  observePopperResize: PropTypes.bool,

  /** Makes the Popper update position when the **reference element** changes size */
  observeReferenceResize: PropTypes.bool,

  /** A property of the `createPopper` options. See [popper docs](https://popper.js.org/docs/v2/constructors/) */
  placement: sharedPropTypes.popperPlacementPropType,

  /** A React ref, DOM node, or [virtual element](https://popper.js.org/docs/v2/virtual-elements/) for the popper to position itself against */
  reference: sharedPropTypes.popperReferencePropType,

  /** A property of the `createPopper` options. See [popper docs](https://popper.js.org/docs/v2/constructors/) */
  strategy: PropTypes.oneOf(['absolute', 'fixed']),
  // defaults to 'absolute'

  /** A property of the `createPopper` options. See [popper docs](https://popper.js.org/docs/v2/constructors/) */
  onFirstUpdate: PropTypes.func
};
export { Popper };