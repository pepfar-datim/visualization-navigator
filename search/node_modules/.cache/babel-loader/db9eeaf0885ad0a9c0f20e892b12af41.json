{"ast":null,"code":"import _slicedToArray from \"/home/jake/SRC/visualization-navigator-ts/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useState, useRef, useCallback, useDebugValue } from 'react';\nimport { useQuery, setLogger } from 'react-query';\nimport { mergeAndCompareVariables } from './mergeAndCompareVariables';\nimport { useDataEngine } from './useDataEngine';\nimport { useStaticInput } from './useStaticInput';\n\nvar noop = function noop() {\n  /**\n   * Used to silence the default react-query logger. Eventually we\n   * could expose the setLogger functionality and remove the call\n   * to setLogger here.\n   */\n};\n\nsetLogger({\n  log: noop,\n  warn: noop,\n  error: noop\n});\nexport var useDataQuery = function useDataQuery(query) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      userOnSuccess = _ref.onComplete,\n      userOnError = _ref.onError,\n      _ref$variables = _ref.variables,\n      initialVariables = _ref$variables === void 0 ? {} : _ref$variables,\n      _ref$lazy = _ref.lazy,\n      initialLazy = _ref$lazy === void 0 ? false : _ref$lazy;\n\n  var _useStaticInput = useStaticInput(query, {\n    warn: true,\n    name: 'query'\n  }),\n      _useStaticInput2 = _slicedToArray(_useStaticInput, 1),\n      staticQuery = _useStaticInput2[0];\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      variablesUpdateCount = _useState2[0],\n      setVariablesUpdateCount = _useState2[1];\n\n  var queryState = useRef({\n    variables: initialVariables,\n    variablesHash: undefined,\n    enabled: !initialLazy,\n    refetchCallback: undefined\n  });\n  /**\n   * Display current query state and refetch count in React DevTools\n   */\n\n  useDebugValue({\n    variablesUpdateCount: variablesUpdateCount,\n    enabled: queryState.current.enabled,\n    variables: queryState.current.variables\n  }, function (debugValue) {\n    return JSON.stringify(debugValue);\n  });\n  /**\n   * User callbacks and refetch handling\n   */\n\n  var onSuccess = function onSuccess(data) {\n    var _queryState$current$r, _queryState$current;\n\n    (_queryState$current$r = (_queryState$current = queryState.current).refetchCallback) === null || _queryState$current$r === void 0 ? void 0 : _queryState$current$r.call(_queryState$current, data);\n    queryState.current.refetchCallback = undefined;\n\n    if (userOnSuccess) {\n      userOnSuccess(data);\n    }\n  };\n\n  var onError = function onError(error) {\n    // If we'd want to reject on errors we'd call the cb with the error here\n    queryState.current.refetchCallback = undefined;\n\n    if (userOnError) {\n      userOnError(error);\n    }\n  };\n  /**\n   * Setting up react-query\n   */\n\n\n  var engine = useDataEngine();\n  var queryKey = [staticQuery, queryState.current.variables];\n\n  var queryFn = function queryFn() {\n    return engine.query(staticQuery, {\n      variables: queryState.current.variables\n    });\n  };\n\n  var _useQuery = useQuery(queryKey, queryFn, {\n    enabled: queryState.current.enabled,\n    onSuccess: onSuccess,\n    onError: onError\n  }),\n      isIdle = _useQuery.isIdle,\n      isFetching = _useQuery.isFetching,\n      isLoading = _useQuery.isLoading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      queryRefetch = _useQuery.refetch;\n  /**\n   * Refetch allows a user to update the variables or just\n   * trigger a refetch of the query with the current variables.\n   *\n   * We're using useCallback to make the identity of the function\n   * as stable as possible, so that it won't trigger excessive\n   * rerenders when used for side-effects.\n   */\n\n\n  var refetch = useCallback(function (newVariables) {\n    var _mergeAndCompareVaria = mergeAndCompareVariables(queryState.current.variables, newVariables, queryState.current.variablesHash),\n        identical = _mergeAndCompareVaria.identical,\n        mergedVariables = _mergeAndCompareVaria.mergedVariables,\n        mergedVariablesHash = _mergeAndCompareVaria.mergedVariablesHash;\n    /**\n     * If there are no updates that will trigger an automatic refetch\n     * we'll need to call react-query's refetch directly\n     */\n\n\n    if (queryState.current.enabled && identical) {\n      return queryRefetch({\n        cancelRefetch: true,\n        throwOnError: false\n      }).then(function (_ref2) {\n        var data = _ref2.data;\n        return data;\n      });\n    }\n\n    queryState.current.variables = mergedVariables;\n    queryState.current.variablesHash = mergedVariablesHash;\n    queryState.current.enabled = true; // This promise does not currently reject on errors\n\n    var refetchPromise = new Promise(function (resolve) {\n      queryState.current.refetchCallback = function (data) {\n        resolve(data);\n      };\n    }); // Trigger a react-query refetch by incrementing variablesUpdateCount state\n\n    setVariablesUpdateCount(function (prevCount) {\n      return prevCount + 1;\n    });\n    return refetchPromise;\n  }, [queryRefetch]);\n  /**\n   * react-query returns null or an error, but we return undefined\n   * or an error, so this ensures consistency with the other types.\n   */\n\n  var ourError = error || undefined;\n  return {\n    engine: engine,\n    // A query is idle if it is lazy and no initial data is available.\n    called: !isIdle,\n    loading: isLoading,\n    fetching: isFetching,\n    error: ourError,\n    data: data,\n    refetch: refetch\n  };\n};","map":{"version":3,"names":["useState","useRef","useCallback","useDebugValue","useQuery","setLogger","mergeAndCompareVariables","useDataEngine","useStaticInput","noop","log","warn","error","useDataQuery","query","userOnSuccess","onComplete","userOnError","onError","variables","initialVariables","lazy","initialLazy","name","staticQuery","variablesUpdateCount","setVariablesUpdateCount","queryState","variablesHash","undefined","enabled","refetchCallback","current","debugValue","JSON","stringify","onSuccess","data","_queryState$current$r","_queryState$current","call","engine","queryKey","queryFn","isIdle","isFetching","isLoading","queryRefetch","refetch","newVariables","identical","mergedVariables","mergedVariablesHash","cancelRefetch","throwOnError","then","refetchPromise","Promise","resolve","prevCount","ourError","called","loading","fetching"],"sources":["/home/jake/SRC/visualization-navigator-ts/node_modules/@dhis2/app-runtime/node_modules/@dhis2/app-service-data/build/es/react/hooks/useDataQuery.js"],"sourcesContent":["import { useState, useRef, useCallback, useDebugValue } from 'react';\nimport { useQuery, setLogger } from 'react-query';\nimport { mergeAndCompareVariables } from './mergeAndCompareVariables';\nimport { useDataEngine } from './useDataEngine';\nimport { useStaticInput } from './useStaticInput';\n\nconst noop = () => {\n  /**\n   * Used to silence the default react-query logger. Eventually we\n   * could expose the setLogger functionality and remove the call\n   * to setLogger here.\n   */\n};\n\nsetLogger({\n  log: noop,\n  warn: noop,\n  error: noop\n});\nexport const useDataQuery = (query, {\n  onComplete: userOnSuccess,\n  onError: userOnError,\n  variables: initialVariables = {},\n  lazy: initialLazy = false\n} = {}) => {\n  const [staticQuery] = useStaticInput(query, {\n    warn: true,\n    name: 'query'\n  });\n  const [variablesUpdateCount, setVariablesUpdateCount] = useState(0);\n  const queryState = useRef({\n    variables: initialVariables,\n    variablesHash: undefined,\n    enabled: !initialLazy,\n    refetchCallback: undefined\n  });\n  /**\n   * Display current query state and refetch count in React DevTools\n   */\n\n  useDebugValue({\n    variablesUpdateCount,\n    enabled: queryState.current.enabled,\n    variables: queryState.current.variables\n  }, debugValue => JSON.stringify(debugValue));\n  /**\n   * User callbacks and refetch handling\n   */\n\n  const onSuccess = data => {\n    var _queryState$current$r, _queryState$current;\n\n    (_queryState$current$r = (_queryState$current = queryState.current).refetchCallback) === null || _queryState$current$r === void 0 ? void 0 : _queryState$current$r.call(_queryState$current, data);\n    queryState.current.refetchCallback = undefined;\n\n    if (userOnSuccess) {\n      userOnSuccess(data);\n    }\n  };\n\n  const onError = error => {\n    // If we'd want to reject on errors we'd call the cb with the error here\n    queryState.current.refetchCallback = undefined;\n\n    if (userOnError) {\n      userOnError(error);\n    }\n  };\n  /**\n   * Setting up react-query\n   */\n\n\n  const engine = useDataEngine();\n  const queryKey = [staticQuery, queryState.current.variables];\n\n  const queryFn = () => engine.query(staticQuery, {\n    variables: queryState.current.variables\n  });\n\n  const {\n    isIdle,\n    isFetching,\n    isLoading,\n    error,\n    data,\n    refetch: queryRefetch\n  } = useQuery(queryKey, queryFn, {\n    enabled: queryState.current.enabled,\n    onSuccess,\n    onError\n  });\n  /**\n   * Refetch allows a user to update the variables or just\n   * trigger a refetch of the query with the current variables.\n   *\n   * We're using useCallback to make the identity of the function\n   * as stable as possible, so that it won't trigger excessive\n   * rerenders when used for side-effects.\n   */\n\n  const refetch = useCallback(newVariables => {\n    const {\n      identical,\n      mergedVariables,\n      mergedVariablesHash\n    } = mergeAndCompareVariables(queryState.current.variables, newVariables, queryState.current.variablesHash);\n    /**\n     * If there are no updates that will trigger an automatic refetch\n     * we'll need to call react-query's refetch directly\n     */\n\n    if (queryState.current.enabled && identical) {\n      return queryRefetch({\n        cancelRefetch: true,\n        throwOnError: false\n      }).then(({\n        data\n      }) => data);\n    }\n\n    queryState.current.variables = mergedVariables;\n    queryState.current.variablesHash = mergedVariablesHash;\n    queryState.current.enabled = true; // This promise does not currently reject on errors\n\n    const refetchPromise = new Promise(resolve => {\n      queryState.current.refetchCallback = data => {\n        resolve(data);\n      };\n    }); // Trigger a react-query refetch by incrementing variablesUpdateCount state\n\n    setVariablesUpdateCount(prevCount => prevCount + 1);\n    return refetchPromise;\n  }, [queryRefetch]);\n  /**\n   * react-query returns null or an error, but we return undefined\n   * or an error, so this ensures consistency with the other types.\n   */\n\n  const ourError = error || undefined;\n  return {\n    engine,\n    // A query is idle if it is lazy and no initial data is available.\n    called: !isIdle,\n    loading: isLoading,\n    fetching: isFetching,\n    error: ourError,\n    data,\n    refetch\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}