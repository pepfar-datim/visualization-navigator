{"ast":null,"code":"import _defineProperty from \"/home/jake/SRC/visualization-navigator-ts/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport propTypes from 'prop-types';\nexport var conditionalFactory = function conditionalFactory(propsToPropType, isRequired) {\n  return function (props, propName, componentName) {\n    var isDefined = typeof props[propName] !== 'undefined';\n\n    if (typeof propsToPropType !== 'function') {\n      return new Error(\"The `propsToPropType` argument passed to the `propsToPropTypeal` prop-validator was not a function.\");\n    }\n\n    var propType = propsToPropType(props);\n\n    if (typeof propType !== 'function') {\n      return new Error(\"The response of `propsToPropType` call with the props was not a function.\");\n    } // Validation errors\n\n\n    if (isRequired && !isDefined) {\n      return new Error(\"Invalid prop `\".concat(propName, \"` supplied to `\").concat(componentName, \"`, this prop is required but no value was found.\"));\n    }\n\n    propTypes.checkPropTypes(_defineProperty({}, propName, propType), props, 'prop', componentName);\n    return null;\n  };\n};\n/**\n * Uses either one or another propType, based on the result of the\n * propsToPropType callback, called with the props\n *\n * @param {Function} propsToPropType - A callback for determining which propType to use\n * @param {Function} eitherPropType\n * @param {Function} orPropType\n * @return {Error|null} Returns null if all propsToPropTypes are met, or an error\n *\n * @example\n * import React from 'react'\n * import { propsToPropTypeal } from '@dhis2/prop-types'\n *\n * const List = ({ multiple, selected, items }) => (\n *     const selectedItems = multiple ? selected : [selected]\n *\n *     <div>\n *         {items.map(item => (\n *             <li className={selectedItems.includes(item) ? 'active' : ''}>\n *                 {item}\n *             </li>\n *         ))}\n *     </div>\n * )\n *\n * List.propTypes = {\n *     multiple: propTypes.bool,\n *     items: props.arrayOf(prpoTypes.string),\n *     selected: conditional(\n *         props => propTypes.multiple\n *           ? propTypes.arrayOf(prpoTypes.string)\n *           : propTypes.string,\n *     ),\n * }\n */\n\nexport var conditional = function conditional(propsToPropType) {\n  var fn = conditionalFactory(propsToPropType, false);\n  fn.isRequired = conditionalFactory(propsToPropType, true);\n  return fn;\n};","map":{"version":3,"names":["propTypes","conditionalFactory","propsToPropType","isRequired","props","propName","componentName","isDefined","Error","propType","checkPropTypes","conditional","fn"],"sources":["/home/jake/SRC/visualization-navigator-ts/node_modules/@dhis2/prop-types/build/es/conditional.js"],"sourcesContent":["import propTypes from 'prop-types';\nexport const conditionalFactory = (propsToPropType, isRequired) => (props, propName, componentName) => {\n  const isDefined = typeof props[propName] !== 'undefined';\n\n  if (typeof propsToPropType !== 'function') {\n    return new Error(`The \\`propsToPropType\\` argument passed to the \\`propsToPropTypeal\\` prop-validator was not a function.`);\n  }\n\n  const propType = propsToPropType(props);\n\n  if (typeof propType !== 'function') {\n    return new Error(`The response of \\`propsToPropType\\` call with the props was not a function.`);\n  } // Validation errors\n\n\n  if (isRequired && !isDefined) {\n    return new Error(`Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`, this prop is required but no value was found.`);\n  }\n\n  propTypes.checkPropTypes({\n    [propName]: propType\n  }, props, 'prop', componentName);\n  return null;\n};\n/**\n * Uses either one or another propType, based on the result of the\n * propsToPropType callback, called with the props\n *\n * @param {Function} propsToPropType - A callback for determining which propType to use\n * @param {Function} eitherPropType\n * @param {Function} orPropType\n * @return {Error|null} Returns null if all propsToPropTypes are met, or an error\n *\n * @example\n * import React from 'react'\n * import { propsToPropTypeal } from '@dhis2/prop-types'\n *\n * const List = ({ multiple, selected, items }) => (\n *     const selectedItems = multiple ? selected : [selected]\n *\n *     <div>\n *         {items.map(item => (\n *             <li className={selectedItems.includes(item) ? 'active' : ''}>\n *                 {item}\n *             </li>\n *         ))}\n *     </div>\n * )\n *\n * List.propTypes = {\n *     multiple: propTypes.bool,\n *     items: props.arrayOf(prpoTypes.string),\n *     selected: conditional(\n *         props => propTypes.multiple\n *           ? propTypes.arrayOf(prpoTypes.string)\n *           : propTypes.string,\n *     ),\n * }\n */\n\nexport const conditional = propsToPropType => {\n  const fn = conditionalFactory(propsToPropType, false);\n  fn.isRequired = conditionalFactory(propsToPropType, true);\n  return fn;\n};"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,eAAD,EAAkBC,UAAlB;EAAA,OAAiC,UAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAAoC;IACrG,IAAMC,SAAS,GAAG,OAAOH,KAAK,CAACC,QAAD,CAAZ,KAA2B,WAA7C;;IAEA,IAAI,OAAOH,eAAP,KAA2B,UAA/B,EAA2C;MACzC,OAAO,IAAIM,KAAJ,uGAAP;IACD;;IAED,IAAMC,QAAQ,GAAGP,eAAe,CAACE,KAAD,CAAhC;;IAEA,IAAI,OAAOK,QAAP,KAAoB,UAAxB,EAAoC;MAClC,OAAO,IAAID,KAAJ,6EAAP;IACD,CAXoG,CAWnG;;;IAGF,IAAIL,UAAU,IAAI,CAACI,SAAnB,EAA8B;MAC5B,OAAO,IAAIC,KAAJ,yBAA4BH,QAA5B,4BAAwDC,aAAxD,sDAAP;IACD;;IAEDN,SAAS,CAACU,cAAV,qBACGL,QADH,EACcI,QADd,GAEGL,KAFH,EAEU,MAFV,EAEkBE,aAFlB;IAGA,OAAO,IAAP;EACD,CAtBiC;AAAA,CAA3B;AAuBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMK,WAAW,GAAG,SAAdA,WAAc,CAAAT,eAAe,EAAI;EAC5C,IAAMU,EAAE,GAAGX,kBAAkB,CAACC,eAAD,EAAkB,KAAlB,CAA7B;EACAU,EAAE,CAACT,UAAH,GAAgBF,kBAAkB,CAACC,eAAD,EAAkB,IAAlB,CAAlC;EACA,OAAOU,EAAP;AACD,CAJM"},"metadata":{},"sourceType":"module"}