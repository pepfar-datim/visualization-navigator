import _JSXStyle from "styled-jsx/style";
import { colors } from '@dhis2/ui-constants';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';

const ArrowDown = () => /*#__PURE__*/React.createElement("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 48 48",
  className: "jsx-2769585603"
}, /*#__PURE__*/React.createElement("path", {
  d: "M14 20l10 10 10-10z",
  className: "jsx-2769585603"
}), /*#__PURE__*/React.createElement(_JSXStyle, {
  id: "2769585603"
}, ["svg.jsx-2769585603{fill:inherit;height:24px;width:24px;vertical-align:middle;pointer-events:none;}"]));

export const Toggle = _ref => {
  let {
    open,
    onOpen,
    onClose,
    dataTest
  } = _ref;
  const onClick = open ? onClose : onOpen;
  return /*#__PURE__*/React.createElement("div", {
    "data-test": dataTest,
    onClick: event => onClick && onClick({
      open: !open
    }, event),
    className: _JSXStyle.dynamic([["486382662", [colors.grey400, colors.grey700]]]) + " " + (cx({
      open
    }) || "")
  }, /*#__PURE__*/React.createElement("span", {
    className: _JSXStyle.dynamic([["486382662", [colors.grey400, colors.grey700]]])
  }, /*#__PURE__*/React.createElement(ArrowDown, null)), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "486382662",
    dynamic: [colors.grey400, colors.grey700]
  }, ["div.__jsx-style-dynamic-selector{width:24px;position:relative;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}", "div.__jsx-style-dynamic-selector:after{background:".concat(colors.grey400, ";height:calc(100% - 24px);left:12px;position:absolute;top:15px;width:1px;z-index:1;}"), ".open.__jsx-style-dynamic-selector:after{content:'';}", "span.__jsx-style-dynamic-selector{display:block;position:relative;z-index:2;fill:".concat(colors.grey700, ";}"), "div.__jsx-style-dynamic-selector svg{vertical-align:top;-webkit-transform:rotate(-90deg);-ms-transform:rotate(-90deg);transform:rotate(-90deg);}", ".open.__jsx-style-dynamic-selector svg{-webkit-transform:rotate(0);-ms-transform:rotate(0);transform:rotate(0);}"]));
};
Toggle.propTypes = {
  dataTest: PropTypes.string.isRequired,
  open: PropTypes.bool,
  onClose: PropTypes.func,
  onOpen: PropTypes.func
};