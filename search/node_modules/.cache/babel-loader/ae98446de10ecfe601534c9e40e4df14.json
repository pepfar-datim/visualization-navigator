{"ast":null,"code":"import{Environment}from\"../types/config.type\";export var config={environment:null,baseUrl:null,testUsername:null,authorization:null};export function register(environment,baseUrl){if(!['production','development','test'].includes(environment))throw new Error(\"Incorrect environment provided: \".concat(environment));config.environment=environment;if(config.environment===Environment.production)config.baseUrl=\"../../../\";else config.baseUrl=baseUrl;}export function setTestUsername(testUsername,authorization){config.testUsername=testUsername;config.authorization=authorization;}export function getAuthorization(){return config.authorization;}export function isTestEnv(){if(!config.environment)throw new Error(\"Environment not provided\");return config.environment===Environment.test;}export function getBaseUrl(){if(!config.baseUrl)throw new Error(\"baseUrl not set\");return config.baseUrl;}export function getFullUrl(endpoint){return\"\".concat(getBaseUrl(),\"api\").concat(endpoint);}","map":{"version":3,"names":["Environment","config","environment","baseUrl","testUsername","authorization","register","includes","Error","production","setTestUsername","getAuthorization","isTestEnv","test","getBaseUrl","getFullUrl","endpoint"],"sources":["/home/jake/SRC/landing-page/node_modules/@pepfar-react-lib/datim-api/services/config.service.ts"],"sourcesContent":["import {Config, Environment} from \"../types/config.type\";\n\nexport let config:Config={\n    environment: null,\n    baseUrl:null,\n    testUsername: null,\n    authorization: null,\n};\n\nexport function register(environment:string,baseUrl?:string){\n    if (!['production','development','test'].includes(environment)) throw new Error(`Incorrect environment provided: ${environment}`)\n    config.environment = environment as Environment;\n    if (config.environment===Environment.production) config.baseUrl = `../../../`;\n    else config.baseUrl = baseUrl;\n}\n\nexport function setTestUsername(testUsername:string,authorization:string){\n    config.testUsername = testUsername;\n    config.authorization = authorization;\n}\n\nexport function getAuthorization():string{\n    return config.authorization;\n}\n\nexport function isTestEnv():boolean{\n    if (!config.environment) throw new Error(`Environment not provided`);\n    return config.environment===Environment.test;\n}\n\nexport function getBaseUrl():string{\n    if (!config.baseUrl) throw new Error(`baseUrl not set`);\n    return config.baseUrl;\n}\n\nexport function getFullUrl(endpoint:string):string{\n    return `${getBaseUrl()}api${endpoint}`;\n}"],"mappings":"AAAA,OAAgBA,WAAhB,KAAkC,sBAAlC,CAEA,MAAO,IAAIC,CAAAA,MAAa,CAAC,CACrBC,WAAW,CAAE,IADQ,CAErBC,OAAO,CAAC,IAFa,CAGrBC,YAAY,CAAE,IAHO,CAIrBC,aAAa,CAAE,IAJM,CAAlB,CAOP,MAAO,SAASC,CAAAA,QAAT,CAAkBJ,WAAlB,CAAqCC,OAArC,CAAqD,CACxD,GAAI,CAAC,CAAC,YAAD,CAAc,aAAd,CAA4B,MAA5B,EAAoCI,QAApC,CAA6CL,WAA7C,CAAL,CAAgE,KAAM,IAAIM,CAAAA,KAAJ,2CAA6CN,WAA7C,EAAN,CAChED,MAAM,CAACC,WAAP,CAAqBA,WAArB,CACA,GAAID,MAAM,CAACC,WAAP,GAAqBF,WAAW,CAACS,UAArC,CAAiDR,MAAM,CAACE,OAAP,aAAjD,IACKF,CAAAA,MAAM,CAACE,OAAP,CAAiBA,OAAjB,CACR,CAED,MAAO,SAASO,CAAAA,eAAT,CAAyBN,YAAzB,CAA6CC,aAA7C,CAAkE,CACrEJ,MAAM,CAACG,YAAP,CAAsBA,YAAtB,CACAH,MAAM,CAACI,aAAP,CAAuBA,aAAvB,CACH,CAED,MAAO,SAASM,CAAAA,gBAAT,EAAkC,CACrC,MAAOV,CAAAA,MAAM,CAACI,aAAd,CACH,CAED,MAAO,SAASO,CAAAA,SAAT,EAA4B,CAC/B,GAAI,CAACX,MAAM,CAACC,WAAZ,CAAyB,KAAM,IAAIM,CAAAA,KAAJ,4BAAN,CACzB,MAAOP,CAAAA,MAAM,CAACC,WAAP,GAAqBF,WAAW,CAACa,IAAxC,CACH,CAED,MAAO,SAASC,CAAAA,UAAT,EAA4B,CAC/B,GAAI,CAACb,MAAM,CAACE,OAAZ,CAAqB,KAAM,IAAIK,CAAAA,KAAJ,mBAAN,CACrB,MAAOP,CAAAA,MAAM,CAACE,OAAd,CACH,CAED,MAAO,SAASY,CAAAA,UAAT,CAAoBC,QAApB,CAA2C,CAC9C,gBAAUF,UAAU,EAApB,eAA4BE,QAA5B,EACH"},"metadata":{},"sourceType":"module"}