"use strict";

var _appRuntime = require("@dhis2/app-runtime");

var _react = require("@storybook/react");

var _react2 = _interopRequireWildcard(require("react"));

var _index = require("../index.js");

var _common = require("./common.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const afterReloadData = {
  organisationUnits: function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    const [, {
      id
    }] = args;

    if (id === 'A0000000000') {
      return (0, _common.delayResponse)(1000, _common.dataProviderData.organisationUnits(...args))();
    }

    if (id === 'A0000000001') {
      return (0, _common.delayResponse)(2200, _common.dataProviderData.organisationUnits(...args))();
    }

    return _common.dataProviderData.organisationUnits(...args);
  }
};

const ForceReloading = () => {
  const [forceReload, setForceReload] = (0, _react2.useState)(false);
  return /*#__PURE__*/_react2.default.createElement(_appRuntime.CustomDataProvider, {
    data: afterReloadData
  }, /*#__PURE__*/_react2.default.createElement("button", {
    disabled: forceReload,
    "data-test": "reload-all",
    onClick: () => setForceReload(true)
  }, "Force reload tree"), /*#__PURE__*/_react2.default.createElement(_common.StatefulMultiSelectionWrapper, null, _ref => {
    let {
      selected,
      onChange
    } = _ref;
    return /*#__PURE__*/_react2.default.createElement(_index.OrganisationUnitTree, {
      roots: "A0000000000",
      onChange: onChange,
      selected: selected,
      forceReload: forceReload,
      onChildrenLoaded: data => {
        if (data.A0000000000) {
          setForceReload(false);
        }
      }
    });
  }));
};

(0, _react.storiesOf)(_common.namespace, module).add('Force reloading', () => /*#__PURE__*/_react2.default.createElement(ForceReloading, null));