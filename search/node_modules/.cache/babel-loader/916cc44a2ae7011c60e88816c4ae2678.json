{"ast":null,"code":"import * as multipartFormDataMatchers from './multipartFormDataMatchers';\nimport * as textPlainMatchers from './textPlainMatchers';\n\nconst resourceExpectsTextPlain = (type, query) => Object.values(textPlainMatchers).some(textPlainMatcher => textPlainMatcher(type, query));\n\nconst resourceExpectsMultipartFormData = (type, query) => Object.values(multipartFormDataMatchers).some(multipartFormDataMatcher => multipartFormDataMatcher(type, query));\n\nexport const FORM_DATA_ERROR_MSG = 'Could not convert data to FormData: object does not have own enumerable string-keyed properties';\n\nconst convertToFormData = data => {\n  const dataEntries = Object.entries(data);\n\n  if (dataEntries.length === 0) {\n    throw new Error(FORM_DATA_ERROR_MSG);\n  }\n\n  return dataEntries.reduce((formData, _ref) => {\n    let [key, value] = _ref;\n    formData.append(key, value);\n    return formData;\n  }, new FormData());\n};\n\nexport const requestContentType = (type, query) => {\n  if (!query.data) {\n    return null;\n  }\n\n  if (type === 'json-patch') {\n    return 'application/json-patch+json';\n  }\n\n  if (resourceExpectsTextPlain(type, query)) {\n    return 'text/plain';\n  }\n\n  if (resourceExpectsMultipartFormData(type, query)) {\n    return 'multipart/form-data';\n  }\n\n  return 'application/json';\n};\nexport const requestHeadersForContentType = contentType => {\n  /*\n   * Explicitely setting Content-Type to 'multipart/form-data' produces\n   * a \"multipart boundary not found\" error. By not setting a Content-Type\n   * the browser will correctly set it for us and also apply multipart\n   * boundaries if the request body is an instance of FormData\n   * See https://stackoverflow.com/a/39281156/1143502\n   */\n  if (!contentType || contentType === 'multipart/form-data') {\n    return undefined;\n  }\n\n  return {\n    'Content-Type': contentType\n  };\n};\nexport const requestBodyForContentType = (contentType, _ref2) => {\n  let {\n    data\n  } = _ref2;\n\n  if (typeof data === 'undefined') {\n    return undefined;\n  }\n\n  if (contentType === 'application/json' || contentType === 'application/json-patch+json') {\n    return JSON.stringify(data);\n  }\n\n  if (contentType === 'multipart/form-data') {\n    return convertToFormData(data);\n  } // 'text/plain'\n\n\n  return data;\n};","map":{"version":3,"names":["multipartFormDataMatchers","textPlainMatchers","resourceExpectsTextPlain","type","query","Object","values","some","textPlainMatcher","resourceExpectsMultipartFormData","multipartFormDataMatcher","FORM_DATA_ERROR_MSG","convertToFormData","data","dataEntries","entries","length","Error","reduce","formData","key","value","append","FormData","requestContentType","requestHeadersForContentType","contentType","undefined","requestBodyForContentType","JSON","stringify"],"sources":["/home/jake/SRC/visualization-navigator-ts/node_modules/@dhis2/app-runtime/node_modules/@dhis2/app-service-data/build/es/links/RestAPILink/queryToRequestOptions/requestContentType.js"],"sourcesContent":["import * as multipartFormDataMatchers from './multipartFormDataMatchers';\nimport * as textPlainMatchers from './textPlainMatchers';\n\nconst resourceExpectsTextPlain = (type, query) => Object.values(textPlainMatchers).some(textPlainMatcher => textPlainMatcher(type, query));\n\nconst resourceExpectsMultipartFormData = (type, query) => Object.values(multipartFormDataMatchers).some(multipartFormDataMatcher => multipartFormDataMatcher(type, query));\n\nexport const FORM_DATA_ERROR_MSG = 'Could not convert data to FormData: object does not have own enumerable string-keyed properties';\n\nconst convertToFormData = data => {\n  const dataEntries = Object.entries(data);\n\n  if (dataEntries.length === 0) {\n    throw new Error(FORM_DATA_ERROR_MSG);\n  }\n\n  return dataEntries.reduce((formData, [key, value]) => {\n    formData.append(key, value);\n    return formData;\n  }, new FormData());\n};\n\nexport const requestContentType = (type, query) => {\n  if (!query.data) {\n    return null;\n  }\n\n  if (type === 'json-patch') {\n    return 'application/json-patch+json';\n  }\n\n  if (resourceExpectsTextPlain(type, query)) {\n    return 'text/plain';\n  }\n\n  if (resourceExpectsMultipartFormData(type, query)) {\n    return 'multipart/form-data';\n  }\n\n  return 'application/json';\n};\nexport const requestHeadersForContentType = contentType => {\n  /*\n   * Explicitely setting Content-Type to 'multipart/form-data' produces\n   * a \"multipart boundary not found\" error. By not setting a Content-Type\n   * the browser will correctly set it for us and also apply multipart\n   * boundaries if the request body is an instance of FormData\n   * See https://stackoverflow.com/a/39281156/1143502\n   */\n  if (!contentType || contentType === 'multipart/form-data') {\n    return undefined;\n  }\n\n  return {\n    'Content-Type': contentType\n  };\n};\nexport const requestBodyForContentType = (contentType, {\n  data\n}) => {\n  if (typeof data === 'undefined') {\n    return undefined;\n  }\n\n  if (contentType === 'application/json' || contentType === 'application/json-patch+json') {\n    return JSON.stringify(data);\n  }\n\n  if (contentType === 'multipart/form-data') {\n    return convertToFormData(data);\n  } // 'text/plain'\n\n\n  return data;\n};"],"mappings":"AAAA,OAAO,KAAKA,yBAAZ,MAA2C,6BAA3C;AACA,OAAO,KAAKC,iBAAZ,MAAmC,qBAAnC;;AAEA,MAAMC,wBAAwB,GAAG,CAACC,IAAD,EAAOC,KAAP,KAAiBC,MAAM,CAACC,MAAP,CAAcL,iBAAd,EAAiCM,IAAjC,CAAsCC,gBAAgB,IAAIA,gBAAgB,CAACL,IAAD,EAAOC,KAAP,CAA1E,CAAlD;;AAEA,MAAMK,gCAAgC,GAAG,CAACN,IAAD,EAAOC,KAAP,KAAiBC,MAAM,CAACC,MAAP,CAAcN,yBAAd,EAAyCO,IAAzC,CAA8CG,wBAAwB,IAAIA,wBAAwB,CAACP,IAAD,EAAOC,KAAP,CAAlG,CAA1D;;AAEA,OAAO,MAAMO,mBAAmB,GAAG,iGAA5B;;AAEP,MAAMC,iBAAiB,GAAGC,IAAI,IAAI;EAChC,MAAMC,WAAW,GAAGT,MAAM,CAACU,OAAP,CAAeF,IAAf,CAApB;;EAEA,IAAIC,WAAW,CAACE,MAAZ,KAAuB,CAA3B,EAA8B;IAC5B,MAAM,IAAIC,KAAJ,CAAUN,mBAAV,CAAN;EACD;;EAED,OAAOG,WAAW,CAACI,MAAZ,CAAmB,CAACC,QAAD,WAA4B;IAAA,IAAjB,CAACC,GAAD,EAAMC,KAAN,CAAiB;IACpDF,QAAQ,CAACG,MAAT,CAAgBF,GAAhB,EAAqBC,KAArB;IACA,OAAOF,QAAP;EACD,CAHM,EAGJ,IAAII,QAAJ,EAHI,CAAP;AAID,CAXD;;AAaA,OAAO,MAAMC,kBAAkB,GAAG,CAACrB,IAAD,EAAOC,KAAP,KAAiB;EACjD,IAAI,CAACA,KAAK,CAACS,IAAX,EAAiB;IACf,OAAO,IAAP;EACD;;EAED,IAAIV,IAAI,KAAK,YAAb,EAA2B;IACzB,OAAO,6BAAP;EACD;;EAED,IAAID,wBAAwB,CAACC,IAAD,EAAOC,KAAP,CAA5B,EAA2C;IACzC,OAAO,YAAP;EACD;;EAED,IAAIK,gCAAgC,CAACN,IAAD,EAAOC,KAAP,CAApC,EAAmD;IACjD,OAAO,qBAAP;EACD;;EAED,OAAO,kBAAP;AACD,CAlBM;AAmBP,OAAO,MAAMqB,4BAA4B,GAAGC,WAAW,IAAI;EACzD;AACF;AACA;AACA;AACA;AACA;AACA;EACE,IAAI,CAACA,WAAD,IAAgBA,WAAW,KAAK,qBAApC,EAA2D;IACzD,OAAOC,SAAP;EACD;;EAED,OAAO;IACL,gBAAgBD;EADX,CAAP;AAGD,CAfM;AAgBP,OAAO,MAAME,yBAAyB,GAAG,CAACF,WAAD,YAEnC;EAAA,IAFiD;IACrDb;EADqD,CAEjD;;EACJ,IAAI,OAAOA,IAAP,KAAgB,WAApB,EAAiC;IAC/B,OAAOc,SAAP;EACD;;EAED,IAAID,WAAW,KAAK,kBAAhB,IAAsCA,WAAW,KAAK,6BAA1D,EAAyF;IACvF,OAAOG,IAAI,CAACC,SAAL,CAAejB,IAAf,CAAP;EACD;;EAED,IAAIa,WAAW,KAAK,qBAApB,EAA2C;IACzC,OAAOd,iBAAiB,CAACC,IAAD,CAAxB;EACD,CAXG,CAWF;;;EAGF,OAAOA,IAAP;AACD,CAjBM"},"metadata":{},"sourceType":"module"}