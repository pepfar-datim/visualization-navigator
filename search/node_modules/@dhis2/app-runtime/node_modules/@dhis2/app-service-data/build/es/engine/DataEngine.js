function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { getMutationFetchType } from './helpers/getMutationFetchType';
import { resolveDynamicQuery } from './helpers/resolveDynamicQuery';
import { validateResourceQuery, validateResourceQueries } from './helpers/validate';

const reduceResponses = (responses, names) => responses.reduce((out, response, idx) => {
  out[names[idx]] = response;
  return out;
}, {});

export class DataEngine {
  constructor(link) {
    _defineProperty(this, "link", void 0);

    this.link = link;
  }

  query(query, {
    variables = {},
    signal,
    onComplete,
    onError
  } = {}) {
    const names = Object.keys(query);
    const queries = names.map(name => query[name]).map(q => resolveDynamicQuery(q, variables));
    validateResourceQueries(queries, names);
    return Promise.all(queries.map(q => {
      return this.link.executeResourceQuery('read', q, {
        signal
      });
    })).then(results => {
      const data = reduceResponses(results, names);
      onComplete && onComplete(data);
      return data;
    }).catch(error => {
      onError && onError(error);
      throw error;
    });
  }

  mutate(mutation, {
    variables = {},
    signal,
    onComplete,
    onError
  } = {}) {
    const query = resolveDynamicQuery(mutation, variables);
    const type = getMutationFetchType(mutation);
    validateResourceQuery(type, query);
    const result = this.link.executeResourceQuery(type, query, {
      signal
    });
    return result.then(data => {
      onComplete && onComplete(data);
      return data;
    }).catch(error => {
      onError && onError(error);
      throw error;
    });
  }

}
export default DataEngine;