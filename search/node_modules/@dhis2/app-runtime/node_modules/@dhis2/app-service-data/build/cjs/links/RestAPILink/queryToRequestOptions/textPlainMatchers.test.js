"use strict";

var _textPlainMatchers = require("./textPlainMatchers");

describe('isReplyToMessageConversation', () => {
  it('retuns true for POST to `messageConversations/${id}`', () => {
    expect((0, _textPlainMatchers.isReplyToMessageConversation)('create', {
      resource: 'messageConversations/oXD88WWSQpR'
    })).toEqual(true);
  });
  it('retuns false for a POST to a different resource', () => {
    expect((0, _textPlainMatchers.isReplyToMessageConversation)('create', {
      resource: 'test/oXD88WWSQpR'
    })).toEqual(false);
  });
});
describe('isCreateFeedbackMessage', () => {
  it('returns true for a POST to "messageConversations/feedback"', () => {
    expect((0, _textPlainMatchers.isCreateFeedbackMessage)('create', {
      resource: 'messageConversations/feedback'
    })).toEqual(true);
  });
  it('retuns false for a POST to a different resource', () => {
    expect((0, _textPlainMatchers.isCreateFeedbackMessage)('create', {
      resource: 'messageConversations/somethingelse'
    })).toEqual(false);
  });
});
describe('isCreateInterpretation', () => {
  it('returns true for a POST to "interpretations/chart/${id}"', () => {
    expect((0, _textPlainMatchers.isCreateInterpretation)('create', {
      resource: 'interpretations/chart/oXD88WWSQpR'
    })).toEqual(true);
  });
  it('returns false for a PUT to "interpretations/chart/${id}"', () => {
    expect((0, _textPlainMatchers.isCreateInterpretation)('replace', {
      resource: 'interpretations/chart/oXD88WWSQpR'
    })).toEqual(false);
  });
  it('retuns false for PATCH requests with a valid query', () => {
    expect((0, _textPlainMatchers.isCreateInterpretation)('update', {
      resource: 'interpretations/chart/oXD88WWSQpR'
    })).toEqual(false);
  });
  it('returns false for a request to a different resource', () => {
    expect((0, _textPlainMatchers.isCreateInterpretation)('create', {
      resource: 'interpretations/dummy/oXD88WWSQpR'
    })).toEqual(false);
  });
});
describe('isUpdateInterpretation', () => {
  it('returns true for a PUT to "interpretations/${id}"', () => {
    expect((0, _textPlainMatchers.isUpdateInterpretation)('replace', {
      resource: 'interpretations/oXD88WWSQpR'
    })).toEqual(true);
  });
  it('returns true for PUT with populated query.id', () => {
    expect((0, _textPlainMatchers.isUpdateInterpretation)('replace', {
      resource: 'interpretations',
      id: 'oXD88WWSQpR'
    })).toEqual(true);
  });
  it('returns false for a POST to "interpretations/${id}"', () => {
    expect((0, _textPlainMatchers.isUpdateInterpretation)('create', {
      resource: 'interpretations/oXD88WWSQpR'
    })).toEqual(false);
  });
  it('returns false for a PATCH to "interpretations/${id}"', () => {
    expect((0, _textPlainMatchers.isUpdateInterpretation)('update', {
      resource: 'interpretations/oXD88WWSQpR'
    })).toEqual(false);
  });
  it('returns false for PATCH with populated query.id', () => {
    expect((0, _textPlainMatchers.isUpdateInterpretation)('update', {
      resource: 'interpretations',
      id: 'oXD88WWSQpR'
    })).toEqual(false);
  });
  it('returns false for a request to a different resource', () => {
    expect((0, _textPlainMatchers.isUpdateInterpretation)('create', {
      resource: 'interpretations/dummy/oXD88WWSQpR'
    })).toEqual(false);
  });
});
describe('isCommentOnInterpretation', () => {
  it('retuns true for POST to `interpretations/${id}/comments`', () => {
    expect((0, _textPlainMatchers.isCommentOnInterpretation)('create', {
      resource: 'interpretations/oXD88WWSQpR/comments'
    })).toEqual(true);
  });
  it('retuns false for a POST to a different resource', () => {
    expect((0, _textPlainMatchers.isCommentOnInterpretation)('create', {
      resource: 'test/oXD88WWSQpR/comments'
    })).toEqual(false);
  });
});
describe('isInterpretationCommentUpdate', () => {
  it('returns true for a PUT to `interpretations/${interpretationId}/comments/${commentId}`', () => {
    expect((0, _textPlainMatchers.isInterpretationCommentUpdate)('replace', {
      resource: 'interpretations/oXD88WWSQpR/comments/oXD88WWSQpR'
    })).toEqual(true);
  });
  it('returns true for PUT with populated query.id', () => {
    expect((0, _textPlainMatchers.isInterpretationCommentUpdate)('replace', {
      resource: 'interpretations',
      id: 'oXD88WWSQpR/comments/oXD88WWSQpR'
    })).toEqual(true);
    expect((0, _textPlainMatchers.isInterpretationCommentUpdate)('replace', {
      resource: 'interpretations/oXD88WWSQpR/comments',
      id: 'oXD88WWSQpR'
    })).toEqual(true);
  });
  it('retuns false for PATCH requests with a valid query', () => {
    expect((0, _textPlainMatchers.isInterpretationCommentUpdate)('update', {
      resource: 'interpretations/oXD88WWSQpR/comments/oXD88WWSQpR'
    })).toEqual(false);
  });
  it('returns false for a request to a different resource', () => {
    expect((0, _textPlainMatchers.isInterpretationCommentUpdate)('create', {
      resource: 'interpretations/oXD88WWSQpR/dummy/oXD88WWSQpR'
    })).toEqual(false);
  });
});
describe('isAddOrUpdateSystemOrUserSetting', () => {
  it('retuns true for POST to `systemSettings/${settingKey}`', () => {
    expect((0, _textPlainMatchers.isAddOrUpdateSystemOrUserSetting)('create', {
      resource: 'systemSettings/keyWhatever'
    })).toEqual(true);
  });
  it('retuns true for POST to `userSettings/${settingKey}`', () => {
    expect((0, _textPlainMatchers.isAddOrUpdateSystemOrUserSetting)('create', {
      resource: 'userSettings/keyWhatever'
    })).toEqual(true);
  });
  it('retuns false for a POST to a different resource', () => {
    expect((0, _textPlainMatchers.isAddOrUpdateSystemOrUserSetting)('create', {
      resource: 'test/keyWhatever'
    })).toEqual(false);
  });
});
describe('addOrUpdateConfigurationProperty', () => {
  it('retuns true for POST to `configuration/${property}`', () => {
    expect((0, _textPlainMatchers.addOrUpdateConfigurationProperty)('create', {
      resource: 'configuration/whatever'
    })).toEqual(true);
  });
  it('retuns false for POST to `configuration/corsWhitelist`, which needs "application/json"', () => {
    expect((0, _textPlainMatchers.addOrUpdateConfigurationProperty)('create', {
      resource: 'configuration/corsWhitelist'
    })).toEqual(false);
  });
  it('retuns false for a POST to a different resource', () => {
    expect((0, _textPlainMatchers.addOrUpdateConfigurationProperty)('create', {
      resource: 'test/whatever'
    })).toEqual(false);
  });
});
describe('isMetadataPackageInstallation', () => {
  it('returns true for a POST to "synchronization/metadataPull"', () => {
    expect((0, _textPlainMatchers.isMetadataPackageInstallation)('create', {
      resource: 'synchronization/metadataPull'
    })).toEqual(true);
  });
  it('retuns false for a POST to a different resource', () => {
    expect((0, _textPlainMatchers.isMetadataPackageInstallation)('create', {
      resource: 'synchronization/somethingelse'
    })).toEqual(false);
  });
});