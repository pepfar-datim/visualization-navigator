{"ast":null,"code":"import _classCallCheck from\"/home/jake/SRC/landing-page/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/home/jake/SRC/landing-page/node_modules/@babel/runtime/helpers/esm/createClass.js\";export var MockService=/*#__PURE__*/function(){function MockService(){_classCallCheck(this,MockService);this.registeredMocks=[];}_createClass(MockService,[{key:\"registerMockedResponse\",value:function registerMockedResponse(url,response){this.registeredMocks=this.registeredMocks.filter(function(mock){return mock.url!==url;});this.registeredMocks.push({url:url,response:response});}},{key:\"getMockedResponse\",value:function getMockedResponse(url){var foundMocks=this.registeredMocks.filter(function(m){return m.url===url;});if(foundMocks.length===0)return null;if(foundMocks.length>1)throw new Error(\"Found multiple get mocks matching \".concat(url));if(typeof foundMocks[0].response!=='string')return foundMocks[0].response;}},{key:\"isMocked\",value:function isMocked(url){return this.registeredMocks.some(function(m){return m.url===url;});}}]);return MockService;}();","map":{"version":3,"names":["MockService","registeredMocks","url","response","filter","mock","push","foundMocks","m","length","Error","some"],"sources":["/home/jake/SRC/landing-page/node_modules/@pepfar-react-lib/datim-api/services/mock/mock.service.ts"],"sourcesContent":["type MockRecord = {\n    url: string,\n    response: any,\n}\n\nexport class MockService{\n    registeredMocks:MockRecord[] = [];\n    registerMockedResponse(url:string, response:any):void{\n        this.registeredMocks = this.registeredMocks.filter(mock=>mock.url!==url);\n        this.registeredMocks.push({url,response});\n    }\n    getMockedResponse(url:string){\n        let foundMocks = this.registeredMocks.filter(m=>m.url===url);\n        if (foundMocks.length===0) return null;\n        if (foundMocks.length>1) throw new Error(`Found multiple get mocks matching ${url}`);\n        if (typeof foundMocks[0].response!=='string') return foundMocks[0].response;\n    }\n    isMocked(url:string):boolean{\n        return this.registeredMocks.some(m=>m.url===url);\n    }\n}"],"mappings":"gOAKA,UAAaA,CAAAA,WAAb,uFACIC,eADJ,CACmC,EADnC,gEAEI,gCAAuBC,GAAvB,CAAmCC,QAAnC,CAAqD,CACjD,KAAKF,eAAL,CAAuB,KAAKA,eAAL,CAAqBG,MAArB,CAA4B,SAAAC,IAAI,QAAEA,CAAAA,IAAI,CAACH,GAAL,GAAWA,GAAb,EAAhC,CAAvB,CACA,KAAKD,eAAL,CAAqBK,IAArB,CAA0B,CAACJ,GAAG,CAAHA,GAAD,CAAKC,QAAQ,CAARA,QAAL,CAA1B,EACH,CALL,iCAMI,2BAAkBD,GAAlB,CAA6B,CACzB,GAAIK,CAAAA,UAAU,CAAG,KAAKN,eAAL,CAAqBG,MAArB,CAA4B,SAAAI,CAAC,QAAEA,CAAAA,CAAC,CAACN,GAAF,GAAQA,GAAV,EAA7B,CAAjB,CACA,GAAIK,UAAU,CAACE,MAAX,GAAoB,CAAxB,CAA2B,MAAO,KAAP,CAC3B,GAAIF,UAAU,CAACE,MAAX,CAAkB,CAAtB,CAAyB,KAAM,IAAIC,CAAAA,KAAJ,6CAA+CR,GAA/C,EAAN,CACzB,GAAI,MAAOK,CAAAA,UAAU,CAAC,CAAD,CAAV,CAAcJ,QAArB,GAAgC,QAApC,CAA8C,MAAOI,CAAAA,UAAU,CAAC,CAAD,CAAV,CAAcJ,QAArB,CACjD,CAXL,wBAYI,kBAASD,GAAT,CAA4B,CACxB,MAAO,MAAKD,eAAL,CAAqBU,IAArB,CAA0B,SAAAH,CAAC,QAAEA,CAAAA,CAAC,CAACN,GAAF,GAAQA,GAAV,EAA3B,CAAP,CACH,CAdL"},"metadata":{},"sourceType":"module"}