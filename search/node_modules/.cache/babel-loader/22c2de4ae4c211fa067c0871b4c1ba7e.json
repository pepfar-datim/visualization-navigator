{"ast":null,"code":"import _toConsumableArray from \"/home/jake/SRC/landing-page/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _asyncToGenerator from \"/home/jake/SRC/landing-page/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/home/jake/SRC/landing-page/node_modules/@babel/runtime/regenerator/index.js\";\n// IndexedDB names; should be the same as in @dhis2/pwa\nexport var SECTIONS_DB = 'sections-db';\nexport var SECTIONS_STORE = 'sections-store'; // Non-sensitive caches that can be kept:\n\nvar KEEPABLE_CACHES = [/^workbox-precache/, // precached static assets\n/^other-assets/ // static assets cached at runtime - shouldn't be sensitive\n];\n/*\n * Clears the 'sections-db' IndexedDB if it exists. Designed to avoid opening\n * a new DB if it doesn't exist yet. Firefox can't check if 'sections-db'\n * exists, in which circumstance the IndexedDB is unaffected. It's inelegant\n * but acceptable because the IndexedDB has no sensitive data (only metadata\n * of recorded sections), and the OfflineInterface handles discrepancies\n * between CacheStorage and IndexedDB.\n */\n\nvar clearDB = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dbName) {\n    var dbs;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if ('databases' in indexedDB) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            _context.next = 4;\n            return window.indexedDB.databases();\n\n          case 4:\n            dbs = _context.sent;\n\n            if (dbs.some(function (_ref2) {\n              var name = _ref2.name;\n              return name === dbName;\n            })) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 7:\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              // IndexedDB fun:\n              var openDBRequest = indexedDB.open(dbName);\n\n              openDBRequest.onsuccess = function (e) {\n                var db = e.target.result;\n                var tx = db.transaction(SECTIONS_STORE, 'readwrite'); // When the transaction completes is when the operation is done:\n\n                // When the transaction completes is when the operation is done:\n                tx.oncomplete = function () {\n                  return resolve();\n                };\n\n                tx.onerror = function (e) {\n                  return reject(e.target.error);\n                };\n\n                var os = tx.objectStore(SECTIONS_STORE);\n                var clearReq = os.clear();\n\n                clearReq.onerror = function (e) {\n                  return reject(e.target.error);\n                };\n              };\n\n              openDBRequest.onerror = function (e) {\n                reject(e.target.error);\n              };\n            }));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function clearDB(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Used to clear caches and 'sections-db' IndexedDB when a user logs out or a\n * different user logs in to prevent someone from accessing a different user's\n * caches. Should be able to be used in a non-PWA app.\n */\n\n\nexport function clearSensitiveCaches() {\n  return _clearSensitiveCaches.apply(this, arguments);\n}\n\nfunction _clearSensitiveCaches() {\n  _clearSensitiveCaches = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var dbName,\n        cacheKeys,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            dbName = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : SECTIONS_DB;\n            console.debug('Clearing sensitive caches');\n            _context2.prev = 2;\n            _context2.next = 5;\n            return caches.keys();\n\n          case 5:\n            cacheKeys = _context2.sent;\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](2);\n            return _context2.abrupt(\"return\", false);\n\n          case 11:\n            return _context2.abrupt(\"return\", Promise.all([// (Resolves to 'false' because this can't detect if anything was deleted):\n            clearDB(dbName).then(function () {\n              return false;\n            })].concat(_toConsumableArray(cacheKeys.map(function (key) {\n              if (!KEEPABLE_CACHES.some(function (pattern) {\n                return pattern.test(key);\n              })) {\n                return caches.delete(key);\n              }\n\n              return false;\n            })))).then(function (responses) {\n              // Return true if any caches have been cleared\n              // (caches.delete() returns true if a cache is deleted successfully)\n              // PWA apps can reload to restore their app shell cache\n              return responses.some(function (response) {\n                return response;\n              });\n            }));\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 8]]);\n  }));\n  return _clearSensitiveCaches.apply(this, arguments);\n}","map":{"version":3,"names":["SECTIONS_DB","SECTIONS_STORE","KEEPABLE_CACHES","clearDB","dbName","indexedDB","window","databases","dbs","some","name","Promise","resolve","reject","openDBRequest","open","onsuccess","e","db","target","result","tx","transaction","oncomplete","onerror","error","os","objectStore","clearReq","clear","clearSensitiveCaches","console","debug","caches","keys","cacheKeys","all","then","map","key","pattern","test","delete","responses","response"],"sources":["/home/jake/SRC/landing-page/node_modules/@dhis2/app-runtime/node_modules/@dhis2/app-service-offline/build/es/lib/clear-sensitive-caches.js"],"sourcesContent":["// IndexedDB names; should be the same as in @dhis2/pwa\nexport const SECTIONS_DB = 'sections-db';\nexport const SECTIONS_STORE = 'sections-store'; // Non-sensitive caches that can be kept:\n\nconst KEEPABLE_CACHES = [/^workbox-precache/, // precached static assets\n/^other-assets/ // static assets cached at runtime - shouldn't be sensitive\n];\n\n/*\n * Clears the 'sections-db' IndexedDB if it exists. Designed to avoid opening\n * a new DB if it doesn't exist yet. Firefox can't check if 'sections-db'\n * exists, in which circumstance the IndexedDB is unaffected. It's inelegant\n * but acceptable because the IndexedDB has no sensitive data (only metadata\n * of recorded sections), and the OfflineInterface handles discrepancies\n * between CacheStorage and IndexedDB.\n */\nconst clearDB = async dbName => {\n  if (!('databases' in indexedDB)) {\n    // FF does not have indexedDB.databases. For that, just clear caches,\n    // and offline interface will handle discrepancies in PWA apps.\n    return;\n  }\n\n  const dbs = await window.indexedDB.databases();\n\n  if (!dbs.some(({\n    name\n  }) => name === dbName)) {\n    // Sections-db is not created; nothing to do here\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    // IndexedDB fun:\n    const openDBRequest = indexedDB.open(dbName);\n\n    openDBRequest.onsuccess = e => {\n      const db = e.target.result;\n      const tx = db.transaction(SECTIONS_STORE, 'readwrite'); // When the transaction completes is when the operation is done:\n\n      tx.oncomplete = () => resolve();\n\n      tx.onerror = e => reject(e.target.error);\n\n      const os = tx.objectStore(SECTIONS_STORE);\n      const clearReq = os.clear();\n\n      clearReq.onerror = e => reject(e.target.error);\n    };\n\n    openDBRequest.onerror = e => {\n      reject(e.target.error);\n    };\n  });\n};\n/**\n * Used to clear caches and 'sections-db' IndexedDB when a user logs out or a\n * different user logs in to prevent someone from accessing a different user's\n * caches. Should be able to be used in a non-PWA app.\n */\n\n\nexport async function clearSensitiveCaches(dbName = SECTIONS_DB) {\n  console.debug('Clearing sensitive caches');\n  let cacheKeys; // caches.keys can fail in insecure contexts, see:\n  // https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage\n\n  try {\n    cacheKeys = await caches.keys();\n  } catch (e) {\n    // Return false since no caches have been cleared\n    return false;\n  }\n\n  return Promise.all([// (Resolves to 'false' because this can't detect if anything was deleted):\n  clearDB(dbName).then(() => false), // Remove caches if not in keepable list\n  ...cacheKeys.map(key => {\n    if (!KEEPABLE_CACHES.some(pattern => pattern.test(key))) {\n      return caches.delete(key);\n    }\n\n    return false;\n  })]).then(responses => {\n    // Return true if any caches have been cleared\n    // (caches.delete() returns true if a cache is deleted successfully)\n    // PWA apps can reload to restore their app shell cache\n    return responses.some(response => response);\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}