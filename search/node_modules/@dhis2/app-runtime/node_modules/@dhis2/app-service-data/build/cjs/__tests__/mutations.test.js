"use strict";

var _react = require("@testing-library/react");

var React = _interopRequireWildcard(require("react"));

var _react3 = require("../react");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

describe('<DataMutation />', () => {
  it('should render without failing', async () => {
    const endpointSpy = jest.fn(() => Promise.resolve(42));
    const mutation = {
      resource: 'answer',
      type: 'create',
      data: {
        question: '?'
      }
    };
    const data = {
      answer: endpointSpy
    };

    const wrapper = ({
      children
    }) => /*#__PURE__*/React.createElement(_react3.CustomDataProvider, {
      data: data
    }, children);

    const renderSpy = jest.fn(() => null);
    (0, _react.render)( /*#__PURE__*/React.createElement(_react3.DataMutation, {
      mutation: mutation
    }, renderSpy), {
      wrapper
    });
    expect(endpointSpy).toHaveBeenCalledTimes(0);
    expect(renderSpy).toHaveBeenCalledTimes(1);
    expect(renderSpy).toHaveBeenLastCalledWith([expect.any(Function), expect.objectContaining({
      called: false,
      loading: false,
      engine: expect.any(Object)
    })]);
    await (0, _react.act)(async () => {
      const firstRenderSpyCall = renderSpy.mock.calls[0];
      const firstRenderSpyArgument = firstRenderSpyCall[0];
      const [mutate] = firstRenderSpyArgument;
      await mutate();
    });
    (0, _react.waitFor)(() => {
      expect(endpointSpy).toHaveBeenCalledTimes(1);
      expect(renderSpy).toHaveBeenCalledTimes(2);
      expect(renderSpy).toHaveBeenLastCalledWith([expect.any(Function), expect.objectContaining({
        called: true,
        loading: true,
        engine: expect.any(Object)
      })]);
    });
    (0, _react.waitFor)(() => {
      expect(endpointSpy).toHaveBeenCalledTimes(1);
      expect(renderSpy).toHaveBeenCalledTimes(3);
      expect(renderSpy).toHaveBeenLastCalledWith([expect.any(Function), expect.objectContaining({
        called: true,
        loading: false,
        data: {
          answer: 42
        },
        engine: expect.any(Object)
      })]);
    });
  });
});