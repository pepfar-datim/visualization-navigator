"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Select = void 0;

var _uiConstants = require("@dhis2/ui-constants");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _debounce = require("./debounce/debounce.js");

var _inputWrapper = require("./input-wrapper.js");

var _menuWrapper = require("./menu-wrapper.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Keycodes for the keypress event handlers
const ESCAPE_KEY = 27;
const SPACE_KEY = 32;
const UP_KEY = 38;
const DOWN_KEY = 40;

class Select extends _react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      open: false,
      menuWidth: 'auto'
    });

    _defineProperty(this, "selectRef", /*#__PURE__*/_react.default.createRef());

    _defineProperty(this, "inputRef", /*#__PURE__*/_react.default.createRef());

    _defineProperty(this, "onResize", (0, _debounce.debounce)(() => {
      const menuWidth = this.getMenuWidth();

      if (this.state.menuWidth !== menuWidth) {
        this.setState({
          menuWidth
        });
      }
    }, 50));

    _defineProperty(this, "handleFocusInput", () => {
      this.inputRef.current.focus();
    });

    _defineProperty(this, "onFocus", e => {
      const {
        onFocus,
        disabled,
        selected
      } = this.props;

      if (disabled || !onFocus) {
        return;
      }

      onFocus({
        selected
      }, e);
    });

    _defineProperty(this, "handleOpen", () => {
      this.setState({
        open: true,
        menuWidth: this.getMenuWidth()
      });
    });

    _defineProperty(this, "handleClose", () => {
      this.setState({
        open: false
      });
    });

    _defineProperty(this, "onToggle", e => {
      if (this.props.disabled) {
        return;
      }

      e.stopPropagation();
      this.state.open ? this.handleClose() : this.handleOpen();
    });

    _defineProperty(this, "onOutsideClick", e => {
      const {
        onBlur,
        disabled,
        selected
      } = this.props;

      if (disabled) {
        return;
      }

      this.handleClose();

      if (onBlur) {
        onBlur({
          selected
        }, e);
      }
    });

    _defineProperty(this, "onKeyDown", e => {
      if (this.props.disabled) {
        return;
      }

      e.stopPropagation();
      const {
        open
      } = this.state;
      const {
        keyCode
      } = e;
      const shouldOpen = !open && (keyCode === SPACE_KEY || keyCode === UP_KEY || keyCode === DOWN_KEY);
      const shouldClose = open && keyCode === ESCAPE_KEY;

      if (shouldClose) {
        return this.handleClose();
      }

      if (shouldOpen) {
        return this.handleOpen();
      }
    });
  }

  componentDidMount() {
    if (this.props.initialFocus) {
      this.inputRef.current.focus();
    }

    this.setState({
      menuWidth: this.getMenuWidth()
    });
    window.addEventListener('resize', this.onResize);
  }

  componentWillUnmount() {
    window.removeEventListener('resize', this.onResize);
  }
  /**
   * We're debouncing this so it doesn't fire continually during a resize.
   *
   * Additionally we should use requestPostAnimationFrame to not trigger a forced
   * layout, but that's just a proposal, and the added complexity of solving this
   * in another manner does not seem worth it, considering the minor perf penalty.
   *
   * See: https://nolanlawson.com/2018/09/25/accurately-measuring-layout-on-the-web
   */


  getMenuWidth() {
    const {
      offsetWidth
    } = this.inputRef.current;
    const {
      menuWidth
    } = this.state;

    if (offsetWidth && "".concat(offsetWidth, "px") !== menuWidth) {
      return "".concat(offsetWidth, "px");
    }

    return menuWidth;
  }

  render() {
    const {
      open,
      menuWidth
    } = this.state;
    const {
      children,
      className,
      selected,
      onChange,
      tabIndex,
      maxHeight,
      error,
      warning,
      valid,
      disabled,
      dense,
      dataTest
    } = this.props; // Create the input

    const inputProps = {
      selected,
      onChange,
      options: children,
      disabled
    };

    const input = /*#__PURE__*/_react.default.cloneElement(this.props.input, inputProps); // Create the menu


    const menuProps = {
      selected,
      onChange,
      options: children,
      handleClose: this.handleClose,
      handleFocusInput: this.handleFocusInput
    };

    const menu = /*#__PURE__*/_react.default.cloneElement(this.props.menu, menuProps);

    return /*#__PURE__*/_react.default.createElement("div", {
      className: className,
      ref: this.selectRef,
      onFocus: this.onFocus,
      onKeyDown: this.onKeyDown,
      "data-test": dataTest
    }, /*#__PURE__*/_react.default.createElement(_inputWrapper.InputWrapper, {
      onToggle: this.onToggle,
      inputRef: this.inputRef,
      tabIndex: disabled ? '-1' : tabIndex,
      error: error,
      warning: warning,
      valid: valid,
      disabled: disabled,
      dense: dense,
      dataTest: "".concat(dataTest, "-input")
    }, input), open && /*#__PURE__*/_react.default.createElement(_menuWrapper.MenuWrapper, {
      onClick: this.onOutsideClick,
      maxHeight: maxHeight,
      selectRef: this.selectRef,
      menuWidth: menuWidth,
      dataTest: "".concat(dataTest, "-menu")
    }, menu));
  }

}

exports.Select = Select;
Select.defaultProps = {
  dataTest: 'dhis2-uicore-select'
};
Select.propTypes = {
  input: _propTypes.default.element.isRequired,
  menu: _propTypes.default.element.isRequired,
  selected: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]).isRequired,
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,
  dense: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  error: _uiConstants.sharedPropTypes.statusPropType,
  initialFocus: _propTypes.default.bool,
  maxHeight: _propTypes.default.string,
  tabIndex: _propTypes.default.string,
  valid: _uiConstants.sharedPropTypes.statusPropType,
  warning: _uiConstants.sharedPropTypes.statusPropType,
  onBlur: _propTypes.default.func,
  onChange: _propTypes.default.func,
  onFocus: _propTypes.default.func
};