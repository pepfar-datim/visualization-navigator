{"ast":null,"code":"// IndexedDB names; should be the same as in @dhis2/pwa\nexport const SECTIONS_DB = 'sections-db';\nexport const SECTIONS_STORE = 'sections-store'; // Non-sensitive caches that can be kept:\n\nconst KEEPABLE_CACHES = [/^workbox-precache/, // precached static assets\n/^other-assets/ // static assets cached at runtime - shouldn't be sensitive\n];\n/*\n * Clears the 'sections-db' IndexedDB if it exists. Designed to avoid opening\n * a new DB if it doesn't exist yet. Firefox can't check if 'sections-db'\n * exists, in which circumstance the IndexedDB is unaffected. It's inelegant\n * but acceptable because the IndexedDB has no sensitive data (only metadata\n * of recorded sections), and the OfflineInterface handles discrepancies\n * between CacheStorage and IndexedDB.\n */\n\nconst clearDB = async dbName => {\n  if (!('databases' in indexedDB)) {\n    // FF does not have indexedDB.databases. For that, just clear caches,\n    // and offline interface will handle discrepancies in PWA apps.\n    return;\n  }\n\n  const dbs = await window.indexedDB.databases();\n\n  if (!dbs.some(_ref => {\n    let {\n      name\n    } = _ref;\n    return name === dbName;\n  })) {\n    // Sections-db is not created; nothing to do here\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    // IndexedDB fun:\n    const openDBRequest = indexedDB.open(dbName);\n\n    openDBRequest.onsuccess = e => {\n      const db = e.target.result;\n      const tx = db.transaction(SECTIONS_STORE, 'readwrite'); // When the transaction completes is when the operation is done:\n\n      tx.oncomplete = () => resolve();\n\n      tx.onerror = e => reject(e.target.error);\n\n      const os = tx.objectStore(SECTIONS_STORE);\n      const clearReq = os.clear();\n\n      clearReq.onerror = e => reject(e.target.error);\n    };\n\n    openDBRequest.onerror = e => {\n      reject(e.target.error);\n    };\n  });\n};\n/**\n * Used to clear caches and 'sections-db' IndexedDB when a user logs out or a\n * different user logs in to prevent someone from accessing a different user's\n * caches. Should be able to be used in a non-PWA app.\n */\n\n\nexport async function clearSensitiveCaches() {\n  let dbName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SECTIONS_DB;\n  console.debug('Clearing sensitive caches');\n  let cacheKeys; // caches.keys can fail in insecure contexts, see:\n  // https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage\n\n  try {\n    cacheKeys = await caches.keys();\n  } catch (e) {\n    // Return false since no caches have been cleared\n    return false;\n  }\n\n  return Promise.all([// (Resolves to 'false' because this can't detect if anything was deleted):\n  clearDB(dbName).then(() => false), // Remove caches if not in keepable list\n  ...cacheKeys.map(key => {\n    if (!KEEPABLE_CACHES.some(pattern => pattern.test(key))) {\n      return caches.delete(key);\n    }\n\n    return false;\n  })]).then(responses => {\n    // Return true if any caches have been cleared\n    // (caches.delete() returns true if a cache is deleted successfully)\n    // PWA apps can reload to restore their app shell cache\n    return responses.some(response => response);\n  });\n}","map":{"version":3,"names":["SECTIONS_DB","SECTIONS_STORE","KEEPABLE_CACHES","clearDB","dbName","indexedDB","dbs","window","databases","some","name","Promise","resolve","reject","openDBRequest","open","onsuccess","e","db","target","result","tx","transaction","oncomplete","onerror","error","os","objectStore","clearReq","clear","clearSensitiveCaches","console","debug","cacheKeys","caches","keys","all","then","map","key","pattern","test","delete","responses","response"],"sources":["/home/jake/SRC/visualization-navigator-ts/node_modules/@dhis2/app-runtime/node_modules/@dhis2/app-service-offline/build/es/lib/clear-sensitive-caches.js"],"sourcesContent":["// IndexedDB names; should be the same as in @dhis2/pwa\nexport const SECTIONS_DB = 'sections-db';\nexport const SECTIONS_STORE = 'sections-store'; // Non-sensitive caches that can be kept:\n\nconst KEEPABLE_CACHES = [/^workbox-precache/, // precached static assets\n/^other-assets/ // static assets cached at runtime - shouldn't be sensitive\n];\n\n/*\n * Clears the 'sections-db' IndexedDB if it exists. Designed to avoid opening\n * a new DB if it doesn't exist yet. Firefox can't check if 'sections-db'\n * exists, in which circumstance the IndexedDB is unaffected. It's inelegant\n * but acceptable because the IndexedDB has no sensitive data (only metadata\n * of recorded sections), and the OfflineInterface handles discrepancies\n * between CacheStorage and IndexedDB.\n */\nconst clearDB = async dbName => {\n  if (!('databases' in indexedDB)) {\n    // FF does not have indexedDB.databases. For that, just clear caches,\n    // and offline interface will handle discrepancies in PWA apps.\n    return;\n  }\n\n  const dbs = await window.indexedDB.databases();\n\n  if (!dbs.some(({\n    name\n  }) => name === dbName)) {\n    // Sections-db is not created; nothing to do here\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    // IndexedDB fun:\n    const openDBRequest = indexedDB.open(dbName);\n\n    openDBRequest.onsuccess = e => {\n      const db = e.target.result;\n      const tx = db.transaction(SECTIONS_STORE, 'readwrite'); // When the transaction completes is when the operation is done:\n\n      tx.oncomplete = () => resolve();\n\n      tx.onerror = e => reject(e.target.error);\n\n      const os = tx.objectStore(SECTIONS_STORE);\n      const clearReq = os.clear();\n\n      clearReq.onerror = e => reject(e.target.error);\n    };\n\n    openDBRequest.onerror = e => {\n      reject(e.target.error);\n    };\n  });\n};\n/**\n * Used to clear caches and 'sections-db' IndexedDB when a user logs out or a\n * different user logs in to prevent someone from accessing a different user's\n * caches. Should be able to be used in a non-PWA app.\n */\n\n\nexport async function clearSensitiveCaches(dbName = SECTIONS_DB) {\n  console.debug('Clearing sensitive caches');\n  let cacheKeys; // caches.keys can fail in insecure contexts, see:\n  // https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage\n\n  try {\n    cacheKeys = await caches.keys();\n  } catch (e) {\n    // Return false since no caches have been cleared\n    return false;\n  }\n\n  return Promise.all([// (Resolves to 'false' because this can't detect if anything was deleted):\n  clearDB(dbName).then(() => false), // Remove caches if not in keepable list\n  ...cacheKeys.map(key => {\n    if (!KEEPABLE_CACHES.some(pattern => pattern.test(key))) {\n      return caches.delete(key);\n    }\n\n    return false;\n  })]).then(responses => {\n    // Return true if any caches have been cleared\n    // (caches.delete() returns true if a cache is deleted successfully)\n    // PWA apps can reload to restore their app shell cache\n    return responses.some(response => response);\n  });\n}"],"mappings":"AAAA;AACA,OAAO,MAAMA,WAAW,GAAG,aAApB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB,C,CAAyC;;AAEhD,MAAMC,eAAe,GAAG,CAAC,mBAAD,EAAsB;AAC9C,eADwB,CACR;AADQ,CAAxB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG,MAAMC,MAAN,IAAgB;EAC9B,IAAI,EAAE,eAAeC,SAAjB,CAAJ,EAAiC;IAC/B;IACA;IACA;EACD;;EAED,MAAMC,GAAG,GAAG,MAAMC,MAAM,CAACF,SAAP,CAAiBG,SAAjB,EAAlB;;EAEA,IAAI,CAACF,GAAG,CAACG,IAAJ,CAAS;IAAA,IAAC;MACbC;IADa,CAAD;IAAA,OAERA,IAAI,KAAKN,MAFD;EAAA,CAAT,CAAL,EAEwB;IACtB;IACA;EACD;;EAED,OAAO,IAAIO,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;IACtC;IACA,MAAMC,aAAa,GAAGT,SAAS,CAACU,IAAV,CAAeX,MAAf,CAAtB;;IAEAU,aAAa,CAACE,SAAd,GAA0BC,CAAC,IAAI;MAC7B,MAAMC,EAAE,GAAGD,CAAC,CAACE,MAAF,CAASC,MAApB;MACA,MAAMC,EAAE,GAAGH,EAAE,CAACI,WAAH,CAAerB,cAAf,EAA+B,WAA/B,CAAX,CAF6B,CAE2B;;MAExDoB,EAAE,CAACE,UAAH,GAAgB,MAAMX,OAAO,EAA7B;;MAEAS,EAAE,CAACG,OAAH,GAAaP,CAAC,IAAIJ,MAAM,CAACI,CAAC,CAACE,MAAF,CAASM,KAAV,CAAxB;;MAEA,MAAMC,EAAE,GAAGL,EAAE,CAACM,WAAH,CAAe1B,cAAf,CAAX;MACA,MAAM2B,QAAQ,GAAGF,EAAE,CAACG,KAAH,EAAjB;;MAEAD,QAAQ,CAACJ,OAAT,GAAmBP,CAAC,IAAIJ,MAAM,CAACI,CAAC,CAACE,MAAF,CAASM,KAAV,CAA9B;IACD,CAZD;;IAcAX,aAAa,CAACU,OAAd,GAAwBP,CAAC,IAAI;MAC3BJ,MAAM,CAACI,CAAC,CAACE,MAAF,CAASM,KAAV,CAAN;IACD,CAFD;EAGD,CArBM,CAAP;AAsBD,CAtCD;AAuCA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,eAAeK,oBAAf,GAA0D;EAAA,IAAtB1B,MAAsB,uEAAbJ,WAAa;EAC/D+B,OAAO,CAACC,KAAR,CAAc,2BAAd;EACA,IAAIC,SAAJ,CAF+D,CAEhD;EACf;;EAEA,IAAI;IACFA,SAAS,GAAG,MAAMC,MAAM,CAACC,IAAP,EAAlB;EACD,CAFD,CAEE,OAAOlB,CAAP,EAAU;IACV;IACA,OAAO,KAAP;EACD;;EAED,OAAON,OAAO,CAACyB,GAAR,CAAY,CAAC;EACpBjC,OAAO,CAACC,MAAD,CAAP,CAAgBiC,IAAhB,CAAqB,MAAM,KAA3B,CADmB,EACgB;EACnC,GAAGJ,SAAS,CAACK,GAAV,CAAcC,GAAG,IAAI;IACtB,IAAI,CAACrC,eAAe,CAACO,IAAhB,CAAqB+B,OAAO,IAAIA,OAAO,CAACC,IAAR,CAAaF,GAAb,CAAhC,CAAL,EAAyD;MACvD,OAAOL,MAAM,CAACQ,MAAP,CAAcH,GAAd,CAAP;IACD;;IAED,OAAO,KAAP;EACD,CANE,CAFgB,CAAZ,EAQFF,IARE,CAQGM,SAAS,IAAI;IACrB;IACA;IACA;IACA,OAAOA,SAAS,CAAClC,IAAV,CAAemC,QAAQ,IAAIA,QAA3B,CAAP;EACD,CAbM,CAAP;AAcD"},"metadata":{},"sourceType":"module"}