import _JSXStyle from "styled-jsx/style";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { mutuallyExclusive, requiredIf } from '@dhis2/prop-types';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { forwardRef } from 'react';
import styles from './table-data-cell.styles.js';
export const TableDataCell = /*#__PURE__*/forwardRef((_ref, ref) => {
  let {
    active,
    align,
    bordered,
    children,
    className,
    colSpan,
    dataTest,
    error,
    large,
    left,
    muted,
    role,
    rowSpan,
    scope,
    staticStyle,
    valid,
    width,
    onClick,
    ...props
  } = _ref;
  return /*#__PURE__*/React.createElement("td", _extends({}, props, {
    ref: ref,
    colSpan: colSpan,
    rowSpan: rowSpan,
    onClick: onClick,
    "data-test": dataTest,
    role: role,
    scope: scope,
    className: "jsx-".concat(styles.__hash) + " " + _JSXStyle.dynamic([["1956632613", [left, align, width]]]) + " " + (cx(className, {
      active,
      bordered,
      error,
      large,
      muted,
      staticStyle,
      valid
    }) || "")
  }), children, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: styles.__hash
  }, styles), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "1956632613",
    dynamic: [left, align, width]
  }, ["td.__jsx-style-dynamic-selector{left:".concat(left, ";text-align:").concat(align, ";width:").concat(width, ";}")]));
});
TableDataCell.displayName = 'TableDataCell';
TableDataCell.defaultProps = {
  align: 'left',
  dataTest: 'dhis2-uicore-tabledatacel',
  left: 'auto',
  width: 'auto'
};
const stylePropType = mutuallyExclusive(['valid', 'error', 'muted'], PropTypes.bool);
TableDataCell.propTypes = {
  /** To toggle background color, for example for editing */
  active: PropTypes.bool,
  align: PropTypes.oneOf(['left', 'center', 'right']),
  bordered: PropTypes.bool,
  children: PropTypes.node,
  className: PropTypes.string,
  colSpan: PropTypes.string,
  dataTest: PropTypes.string,

  /** Mutually exclusive with muted and valid */
  error: stylePropType,
  large: PropTypes.bool,

  /** Required when fixed */
  left: requiredIf(props => props.fixed, PropTypes.string),

  /** Mutually exclusive with error and valid */
  muted: stylePropType,
  role: PropTypes.string,
  rowSpan: PropTypes.string,
  scope: PropTypes.string,

  /** Surpress hover and active event styles */
  staticStyle: PropTypes.bool,

  /** Mutually exclusive with error and muted */
  valid: stylePropType,
  width: PropTypes.string,
  onClick: PropTypes.func
};