import _JSXStyle from "styled-jsx/style";

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { mutuallyExclusive } from '@dhis2/prop-types';
import { colors, theme, sharedPropTypes } from '@dhis2/ui-constants';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React, { Component, createRef } from 'react';
import { CheckboxRegular, CheckboxDense } from './checkbox-icon.js';

class Checkbox extends Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "ref", /*#__PURE__*/createRef());

    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(), e);
      }
    });

    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(), e);
      }
    });

    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(), e);
      }
    });
  }

  componentDidMount() {
    if (this.props.initialFocus) {
      this.ref.current.focus();
    }

    this.setIndeterminate(this.props.indeterminate);
  }

  componentDidUpdate(prevProps) {
    if (prevProps.indeterminate !== this.props.indeterminate) {
      this.setIndeterminate(this.props.indeterminate);
    }
  }

  setIndeterminate(indeterminate) {
    this.ref.current.indeterminate = indeterminate;
  }

  createHandlerPayload() {
    return {
      value: this.props.value,
      name: this.props.name,
      checked: !this.props.checked
    };
  }

  render() {
    const {
      checked,
      indeterminate,
      className,
      disabled,
      error,
      label,
      name,
      tabIndex,
      valid,
      value,
      warning,
      dense,
      dataTest
    } = this.props;
    const classes = cx({
      checked,
      indeterminate,
      disabled,
      valid,
      error,
      warning
    });
    return /*#__PURE__*/React.createElement("label", {
      "data-test": dataTest,
      className: _JSXStyle.dynamic([["2774859264", [colors.grey900, theme.disabled, theme.focus]]]) + " " + (cx(className, {
        disabled,
        dense
      }) || "")
    }, /*#__PURE__*/React.createElement("input", {
      type: "checkbox",
      ref: this.ref,
      name: name,
      value: value,
      checked: checked,
      disabled: disabled,
      tabIndex: tabIndex,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      className: _JSXStyle.dynamic([["2774859264", [colors.grey900, theme.disabled, theme.focus]]])
    }), /*#__PURE__*/React.createElement("div", {
      className: _JSXStyle.dynamic([["2774859264", [colors.grey900, theme.disabled, theme.focus]]]) + " " + (cx('icon', {
        dense
      }) || "")
    }, dense ? /*#__PURE__*/React.createElement(CheckboxDense, {
      className: classes
    }) : /*#__PURE__*/React.createElement(CheckboxRegular, {
      className: classes
    })), label, /*#__PURE__*/React.createElement(_JSXStyle, {
      id: "2774859264",
      dynamic: [colors.grey900, theme.disabled, theme.focus]
    }, ["label.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;position:relative;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:start;-webkit-justify-content:flex-start;-ms-flex-pack:start;justify-content:flex-start;cursor:pointer;color:".concat(colors.grey900, ";font-size:16px;line-height:20px;}"), "label.dense.__jsx-style-dynamic-selector{font-size:14px;line-height:16px;}", "label.disabled.__jsx-style-dynamic-selector{cursor:not-allowed;color:".concat(theme.disabled, ";}"), "input.__jsx-style-dynamic-selector{opacity:0;position:absolute;height:18px;width:18px;left:3px;}", "label.dense.__jsx-style-dynamic-selector input.__jsx-style-dynamic-selector{height:14px;width:14px;}", ".icon.__jsx-style-dynamic-selector{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;margin-right:5px;border:2px solid transparent;padding:1px;border-radius:5px;}", "label.dense.__jsx-style-dynamic-selector .icon.__jsx-style-dynamic-selector{margin-right:3px;border-radius:4px;}", "input.__jsx-style-dynamic-selector:focus+.icon.__jsx-style-dynamic-selector{outline:3px solid ".concat(theme.focus, ";outline-offset:-3px;}")]));
  }

}

Checkbox.defaultProps = {
  checked: false,
  indeterminate: false,
  dataTest: 'dhis2-uicore-checkbox'
};
const uniqueOnStatePropType = mutuallyExclusive(['checked', 'indeterminate'], PropTypes.bool);
Checkbox.propTypes = {
  checked: uniqueOnStatePropType,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  dense: PropTypes.bool,
  disabled: PropTypes.bool,
  error: sharedPropTypes.statusPropType,
  indeterminate: uniqueOnStatePropType,
  initialFocus: PropTypes.bool,
  label: PropTypes.node,
  name: PropTypes.string,
  tabIndex: PropTypes.string,
  valid: sharedPropTypes.statusPropType,
  value: PropTypes.string,
  warning: sharedPropTypes.statusPropType,
  onBlur: PropTypes.func,

  /** Called with signature `(object, event)` */
  onChange: PropTypes.func,
  onFocus: PropTypes.func
};
export { Checkbox };