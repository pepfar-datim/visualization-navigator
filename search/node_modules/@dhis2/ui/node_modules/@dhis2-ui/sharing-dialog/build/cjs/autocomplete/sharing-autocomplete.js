"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SharingAutocomplete = void 0;

var _appRuntime = require("@dhis2/app-runtime");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _index = require("../helpers/index.js");

var _index2 = _interopRequireDefault(require("../locales/index.js"));

var _autocomplete = require("./autocomplete.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const query = {
  search: {
    resource: 'sharing/search',
    params: _ref => {
      let {
        search
      } = _ref;
      return {
        key: search
      };
    }
  }
};

const SharingAutocomplete = _ref2 => {
  var _data$search, _data$search2;

  let {
    selected,
    onSelection
  } = _ref2;
  const [search, setSearch] = (0, _react.useState)('');
  const [showResults, setShowResults] = (0, _react.useState)(false);
  const {
    data,
    refetch,
    fetching
  } = (0, _appRuntime.useDataQuery)(query, {
    lazy: true,
    onComplete: () => setShowResults(true)
  });
  /**
   * Ensure that local state doesn't get out of sync with the parent. On selection
   * this syncs the displayName of the parent selection to the local input state.
   */

  (0, _react.useEffect)(() => setSearch(selected), [selected]);
  /**
   * If the search string changes and is truthy, send out a request, otherwise
   * clear the selection.
   */

  const debouncedRefetch = (0, _react.useCallback)((0, _index.debounce)(refetch, 250), [refetch]);
  (0, _react.useEffect)(() => {
    if (search && search === selected) {
      return;
    }

    if (search) {
      debouncedRefetch({
        search
      });
    } else {
      onSelection(null);
      setShowResults(false);
    }
  }, [search]); // Concatenate all the results

  let results = [];

  if (data !== null && data !== void 0 && (_data$search = data.search) !== null && _data$search !== void 0 && _data$search.users) {
    const mapped = data.search.users.map(user => ({ ...user,
      type: 'user'
    }));
    results = results.concat(mapped);
  }

  if (data !== null && data !== void 0 && (_data$search2 = data.search) !== null && _data$search2 !== void 0 && _data$search2.userGroups) {
    const mapped = data.search.userGroups.map(group => ({ ...group,
      type: 'group'
    }));
    results = results.concat(mapped);
  }

  return /*#__PURE__*/_react.default.createElement(_autocomplete.Autocomplete, {
    inputWidth: "400px",
    label: _index2.default.t('User or group'),
    loading: fetching,
    placeholder: _index2.default.t('Search'),
    search: search,
    searchResults: showResults ? results : [],
    onClose: () => setShowResults(false),
    onSearch: setSearch,
    onSelect: id => {
      onSelection(results.find(result => result.id === id));
      setShowResults(false);
    }
  });
};

exports.SharingAutocomplete = SharingAutocomplete;
SharingAutocomplete.propTypes = {
  onSelection: _propTypes.default.func.isRequired,
  selected: _propTypes.default.string
};