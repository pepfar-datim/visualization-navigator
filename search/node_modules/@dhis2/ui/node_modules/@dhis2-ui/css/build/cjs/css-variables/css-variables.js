"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CssVariables = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var theme = _interopRequireWildcard(require("@dhis2/ui-constants"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const toPrefixedThemeSection = themeSectionKey => Object.entries(theme[themeSectionKey]).reduce((prefixed, _ref) => {
  let [key, value] = _ref;
  prefixed["".concat(themeSectionKey, "-").concat(key)] = value;
  return prefixed;
}, {});

const toCustomPropertyString = themeSection => Object.entries(themeSection).map(_ref2 => {
  let [key, value] = _ref2;
  return "--".concat(key, ": ").concat(value, ";");
}).join('\n');

const CssVariables = _ref3 => {
  let {
    colors,
    theme,
    layers,
    spacers,
    elevations
  } = _ref3;
  const allowedProps = {
    colors,
    theme,
    layers,
    spacers,
    elevations
  };
  const variables = Object.keys(allowedProps) // Filter all props that are false
  .filter(prop => allowedProps[prop]) // Map props to corresponding theme section and prefixes keys with section name
  .map(toPrefixedThemeSection) // Map each section to a single string of css custom property declarations
  .map(toCustomPropertyString) // Join all the sections to a single string
  .join('\n');
  return /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "3443925957",
    dynamic: [variables]
  }, ["html{".concat(variables, ";}")]);
};

exports.CssVariables = CssVariables;
CssVariables.defaultProps = {
  colors: false,
  theme: false,
  layers: false,
  spacers: false,
  elevations: false
};
CssVariables.propTypes = {
  colors: _propTypes.default.bool,
  elevations: _propTypes.default.bool,
  layers: _propTypes.default.bool,
  spacers: _propTypes.default.bool,
  theme: _propTypes.default.bool
};