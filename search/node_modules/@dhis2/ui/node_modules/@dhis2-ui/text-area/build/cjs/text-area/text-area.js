"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TextArea = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _statusIcon = require("@dhis2-ui/status-icon");

var _uiConstants = require("@dhis2/ui-constants");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _textAreaStyles = require("./text-area.styles.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class TextArea extends _react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "textareaRef", /*#__PURE__*/_react.default.createRef());

    _defineProperty(this, "state", {
      height: 'auto'
    });

    _defineProperty(this, "textareaDimensions", {
      width: 0,
      height: 0
    });

    _defineProperty(this, "userHasResized", false);

    _defineProperty(this, "setTextareaDimensions", () => {
      const textarea = this.textareaRef.current;
      this.textareaDimensions = {
        width: textarea.clientWidth,
        height: textarea.clientHeight
      };
    });

    _defineProperty(this, "hasUserResized", () => {
      const {
        width: oldWidth,
        height: oldHeight
      } = this.textareaDimensions;
      this.setTextareaDimensions();
      const {
        width: newWidth,
        height: newHeight
      } = this.textareaDimensions;
      const userHasResized = newWidth !== oldWidth || newHeight !== oldHeight;

      if (userHasResized) {
        this.userHasResized = true;
        this.removeResizeListener();
      }
    });

    _defineProperty(this, "handleChange", e => {
      if (this.props.onChange) {
        this.props.onChange(this.createHandlerPayload(e), e);
      }
    });

    _defineProperty(this, "handleBlur", e => {
      if (this.props.onBlur) {
        this.props.onBlur(this.createHandlerPayload(e), e);
      }
    });

    _defineProperty(this, "handleFocus", e => {
      if (this.props.onFocus) {
        this.props.onFocus(this.createHandlerPayload(e), e);
      }
    });
  }

  componentDidMount() {
    this.attachResizeListener();

    if (this.props.initialFocus) {
      this.textareaRef.current.focus();
    }

    if (this.shouldDoAutoGrow()) {
      this.setHeight();
    }
  }

  componentDidUpdate(prevProps) {
    if (this.shouldDoAutoGrow() && this.props.value !== prevProps.value) {
      this.setHeight();
    }
  }

  attachResizeListener() {
    const textarea = this.textareaRef.current;
    textarea.addEventListener('mousedown', this.setTextareaDimensions);
    textarea.addEventListener('mouseup', this.hasUserResized);
  }

  removeResizeListener() {
    const textarea = this.textareaRef.current;
    textarea.removeEventListener('mousedown', this.setTextareaDimensions);
    textarea.removeEventListener('mouseup', this.hasUserResized);
  }

  setHeight() {
    const textarea = this.textareaRef.current;
    const offset = textarea.offsetHeight - textarea.clientHeight;
    const height = textarea.scrollHeight + offset + 'px';
    this.setState({
      height
    });
  }

  shouldDoAutoGrow() {
    return this.props.autoGrow && !this.userHasResized;
  }

  createHandlerPayload(e) {
    return {
      value: e.target.value,
      name: this.props.name
    };
  }

  render() {
    const {
      className,
      dense,
      disabled,
      readOnly,
      placeholder,
      name,
      valid,
      error,
      warning,
      loading,
      value,
      tabIndex,
      rows,
      width,
      resize,
      dataTest
    } = this.props;
    const {
      height
    } = this.state;
    return /*#__PURE__*/_react.default.createElement("div", {
      "data-test": dataTest,
      className: "jsx-".concat(_textAreaStyles.styles.__hash) + " " + _style.default.dynamic([["3036048772", [width, height, resize]]]) + " " + ((0, _classnames.default)('textarea', className) || "")
    }, /*#__PURE__*/_react.default.createElement("textarea", {
      id: name,
      name: name,
      placeholder: placeholder,
      ref: this.textareaRef,
      value: value,
      disabled: disabled,
      readOnly: readOnly,
      tabIndex: tabIndex,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      onChange: this.handleChange,
      rows: rows,
      className: "jsx-".concat(_textAreaStyles.styles.__hash) + " " + _style.default.dynamic([["3036048772", [width, height, resize]]]) + " " + ((0, _classnames.default)({
        dense,
        disabled,
        error,
        valid,
        warning,
        'read-only': readOnly
      }) || "")
    }), /*#__PURE__*/_react.default.createElement(_statusIcon.StatusIcon, {
      error: error,
      valid: valid,
      loading: loading,
      warning: warning
    }), /*#__PURE__*/_react.default.createElement(_style.default, {
      id: _textAreaStyles.styles.__hash
    }, _textAreaStyles.styles), /*#__PURE__*/_react.default.createElement(_style.default, {
      id: "3036048772",
      dynamic: [width, height, resize]
    }, ["textarea.__jsx-style-dynamic-selector{width:".concat(width, ";height:").concat(height, ";resize:").concat(resize, ";}")]));
  }

}

exports.TextArea = TextArea;
TextArea.defaultProps = {
  rows: 4,
  width: '100%',
  resize: 'vertical',
  dataTest: 'dhis2-uicore-textarea'
};
TextArea.propTypes = {
  /** Grow the text area in response to overflow instead of adding a scroll bar */
  autoGrow: _propTypes.default.bool,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,

  /** Compact mode */
  dense: _propTypes.default.bool,

  /** Disables the textarea and makes in non-interactive */
  disabled: _propTypes.default.bool,

  /** Applies 'error' styles for validation feedback. Mutually exclusive with `valid` and `warning` props */
  error: _uiConstants.sharedPropTypes.statusPropType,

  /** Grabs initial focus on the page */
  initialFocus: _propTypes.default.bool,

  /** Adds a loading spinner */
  loading: _propTypes.default.bool,

  /** Name associated with the text area. Passed in object argument to event handlers. */
  name: _propTypes.default.string,

  /** Placeholder text for an empty textarea */
  placeholder: _propTypes.default.string,

  /** Makes the textarea read-only */
  readOnly: _propTypes.default.bool,

  /** [Resize property](https://developer.mozilla.org/en-US/docs/Web/CSS/resize) for the textarea element */
  resize: _propTypes.default.oneOf(['none', 'both', 'horizontal', 'vertical']),

  /** Initial height of the textarea, in lines of text */
  rows: _propTypes.default.number,
  tabIndex: _propTypes.default.string,

  /** Applies 'valid' styles for validation feedback. Mutually exclusive with `warning` and `error` props */
  valid: _uiConstants.sharedPropTypes.statusPropType,

  /** Value in the textarea. Can be used to control component (recommended). Passed in object argument to event handlers. */
  value: _propTypes.default.string,

  /** Applies 'warning' styles for validation feedback. Mutually exclusive with `valid` and `error` props */
  warning: _uiConstants.sharedPropTypes.statusPropType,

  /** Width of the text area. Can be any valid CSS measurement */
  width: _propTypes.default.string,

  /** Called with signature ({ name: string, value: string }, event) */
  onBlur: _propTypes.default.func,

  /** Called with signature ({ name: string, value: string }, event) */
  onChange: _propTypes.default.func,

  /** Called with signature ({ name: string, value: string }, event) */
  onFocus: _propTypes.default.func
};