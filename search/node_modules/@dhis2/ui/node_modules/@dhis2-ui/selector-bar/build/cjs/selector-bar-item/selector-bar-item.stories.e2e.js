"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.OpenWithValue = exports.OpenNoValue = exports.ClosedWithValue = exports.ClosedNoValue = void 0;

var _select = require("@dhis2-ui/select");

var _react = _interopRequireWildcard(require("react"));

var _selectorBarItem = require("./selector-bar-item.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const options = [{
  value: 'value 1',
  label: 'label 1'
}, {
  value: 'value 2',
  label: 'label 2'
}, {
  value: 'value 3',
  label: 'label 3'
}];

const createStateDecorator = args => {
  return fn => {
    const [selected, setSelected] = (0, _react.useState)((args === null || args === void 0 ? void 0 : args.selected) || '');
    const [open, setOpen] = (0, _react.useState)((args === null || args === void 0 ? void 0 : args.open) || false);
    return fn({
      selected,
      open,
      setSelected,
      setOpen
    });
  };
};

const createStory = () => (_, _ref) => {
  var _options$find;

  let {
    open,
    setOpen,
    selected,
    setSelected
  } = _ref;
  return /*#__PURE__*/_react.default.createElement(_selectorBarItem.SelectorBarItem, {
    label: "Selection bar item",
    noValueMessage: "No value message",
    open: open,
    setOpen: setOpen,
    value: ((_options$find = options.find(_ref2 => {
      let {
        value
      } = _ref2;
      return value === selected;
    })) === null || _options$find === void 0 ? void 0 : _options$find.label) || ''
  }, /*#__PURE__*/_react.default.createElement(_select.SingleSelectField, {
    selected: selected,
    onChange: _ref3 => {
      let {
        selected: nextSelected
      } = _ref3;
      setSelected(nextSelected);
      setOpen(false);
    }
  }, options.map(_ref4 => {
    let {
      value,
      label
    } = _ref4;
    return /*#__PURE__*/_react.default.createElement(_select.SingleSelectOption, {
      key: value,
      value: value,
      label: label
    });
  })));
};

var _default = {
  title: 'SelectorBarItem'
};
exports.default = _default;
const ClosedNoValue = createStory();
exports.ClosedNoValue = ClosedNoValue;
ClosedNoValue.decorators = [createStateDecorator()];
const OpenNoValue = createStory();
exports.OpenNoValue = OpenNoValue;
OpenNoValue.decorators = [createStateDecorator({
  open: true
})];
const ClosedWithValue = createStory();
exports.ClosedWithValue = ClosedWithValue;
ClosedWithValue.decorators = [createStateDecorator({
  selected: 'value 1'
})];
const OpenWithValue = createStory();
exports.OpenWithValue = OpenWithValue;
OpenWithValue.decorators = [createStateDecorator({
  open: true,
  selected: 'value 1'
})];