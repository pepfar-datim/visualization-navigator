"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.OutOfView = exports.InView = void 0;

var _react = _interopRequireWildcard(require("react"));

var _intersectionDetector = require("./intersection-detector.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

window.onChange = window.Cypress ? window.Cypress.cy.stub() : () => null;
var _default = {
  title: 'IntersectionDetector'
};
exports.default = _default;

const OutOfView = () => {
  const rootRef = (0, _react.useRef)();
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: rootRef,
    "data-test": "scroll-container",
    style: {
      width: 200,
      height: 300,
      overflow: 'auto'
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    // spacer to push indicator out of the intersecting area
    style: {
      width: 200,
      height: 310,
      overflow: 'auto',
      background: 'blue'
    }
  }), /*#__PURE__*/_react.default.createElement(_intersectionDetector.IntersectionDetector, {
    rootRef: rootRef,
    onChange: window.onChange
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      background: 'red',
      height: 200
    }
  })));
};

exports.OutOfView = OutOfView;

const InView = () => {
  const rootRef = (0, _react.useRef)();
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: rootRef,
    "data-test": "scroll-container",
    style: {
      width: 200,
      height: 300,
      overflow: 'auto'
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    style: {
      background: 'red',
      height: 200
    }
  }, /*#__PURE__*/_react.default.createElement(_intersectionDetector.IntersectionDetector, {
    rootRef: rootRef,
    onChange: window.onChange
  })), /*#__PURE__*/_react.default.createElement("div", {
    // spacer to push indicator out of the intersecting area
    style: {
      width: 200,
      height: 310,
      overflow: 'auto',
      background: 'blue'
    }
  }));
};

exports.InView = InView;