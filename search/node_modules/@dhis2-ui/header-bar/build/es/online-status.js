import _JSXStyle from "styled-jsx/style";
import { useConfig, useOnlineStatus } from '@dhis2/app-runtime';
import cx from 'classnames';
import moment from 'moment';
import PropTypes from 'prop-types';
import React from 'react';
import i18n from './locales/index.js';
import styles from './online-status.styles.js';

const useOnlineStatusInfo = _ref => {
  let {
    online,
    lastOnline
  } = _ref;
  const {
    headerbar
  } = useConfig();

  if ((headerbar === null || headerbar === void 0 ? void 0 : headerbar.onlineStatusInfo) === 'LAST_ONLINE' && !online && lastOnline) {
    return i18n.t('Last online {{relativeTime}}', {
      relativeTime: moment(lastOnline).fromNow()
    });
  } // todo: in the future, support 'CUSTOM' option


  return null;
};
/** A badge to display online/offline status in the header bar */


export function OnlineStatus(_ref2) {
  let {
    dense
  } = _ref2;
  const {
    online,
    lastOnline
  } = useOnlineStatus();
  const info = useOnlineStatusInfo({
    online,
    lastOnline
  });
  const displayStatus = online ? i18n.t('Online') : i18n.t('Offline');
  return /*#__PURE__*/React.createElement("div", {
    "data-test": "headerbar-online-status",
    className: "jsx-".concat(styles.__hash) + " " + (cx('container', dense ? 'bar' : 'badge') || "")
  }, info && !dense && /*#__PURE__*/React.createElement("span", {
    className: "jsx-".concat(styles.__hash) + " " + "info unselectable"
  }, info), /*#__PURE__*/React.createElement("div", {
    className: "jsx-".concat(styles.__hash) + " " + (cx('icon', online ? 'online' : 'offline') || "")
  }), /*#__PURE__*/React.createElement("span", {
    className: "jsx-".concat(styles.__hash) + " " + "label unselectable"
  }, displayStatus), info && dense && /*#__PURE__*/React.createElement("span", {
    className: "jsx-".concat(styles.__hash) + " " + "info-dense unselectable"
  }, info), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: styles.__hash
  }, styles));
}
OnlineStatus.propTypes = {
  /** If true, displays as a sub-bar instead of a badge */
  dense: PropTypes.bool
};