import _JSXStyle from "styled-jsx/style";
import { Card } from '@dhis2-ui/card';
import { Center } from '@dhis2-ui/center';
import { Layer } from '@dhis2-ui/layer';
import { spacers, spacersNum, sharedPropTypes } from '@dhis2/ui-constants';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import { CloseButton } from './close-button.js';

const resolveLayerStyles = hide => ({
  styles: /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "1884450060",
    dynamic: [spacers.dp64, hide ? 'none' : 'block']
  }, ["div.__jsx-style-dynamic-selector{padding:".concat(spacers.dp64, ";display:").concat(hide ? 'none' : 'block', ";}")]),
  className: _JSXStyle.dynamic([["1884450060", [spacers.dp64, hide ? 'none' : 'block']]])
});

export const Modal = _ref => {
  let {
    children,
    className,
    dataTest,
    hide,
    fluid,
    large,
    onClose,
    position,
    small
  } = _ref;
  const layerStyles = resolveLayerStyles(hide);
  return /*#__PURE__*/React.createElement(Layer, {
    onClick: onClose,
    className: layerStyles.className,
    translucent: !hide
  }, /*#__PURE__*/React.createElement(Center, {
    position: position
  }, /*#__PURE__*/React.createElement("aside", {
    role: "dialog",
    "aria-modal": "true",
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["3655640549", [2 * spacersNum.dp64, 2 * spacersNum.dp64, 2 * spacersNum.dp64, 2 * spacersNum.dp64]]]) + " " + (cx(className, {
      small,
      large,
      fluid
    }) || "")
  }, /*#__PURE__*/React.createElement(Card, null, onClose && /*#__PURE__*/React.createElement(CloseButton, {
    onClick: onClose
  }), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["3655640549", [2 * spacersNum.dp64, 2 * spacersNum.dp64, 2 * spacersNum.dp64, 2 * spacersNum.dp64]]])
  }, children))), layerStyles.styles), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3655640549",
    dynamic: [2 * spacersNum.dp64, 2 * spacersNum.dp64, 2 * spacersNum.dp64, 2 * spacersNum.dp64]
  }, ["aside.__jsx-style-dynamic-selector{height:auto;width:600px;max-width:calc(100vw - ".concat(2 * spacersNum.dp64, "px);max-height:calc(100vh - ").concat(2 * spacersNum.dp64, "px);}"), "aside.small.__jsx-style-dynamic-selector{width:400px;}", "aside.large.__jsx-style-dynamic-selector{width:800px;}", "aside.fluid.__jsx-style-dynamic-selector{width:auto;}", "div.__jsx-style-dynamic-selector{padding:24px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column;-ms-flex-flow:column;flex-flow:column;max-width:calc(100vw - ".concat(2 * spacersNum.dp64, "px);max-height:calc(100vh - ").concat(2 * spacersNum.dp64, "px);}")]));
};
Modal.defaultProps = {
  dataTest: 'dhis2-uicore-modal',
  position: 'top'
};
Modal.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  fluid: PropTypes.bool,
  hide: PropTypes.bool,
  large: sharedPropTypes.sizePropType,
  position: sharedPropTypes.insideAlignmentPropType,
  small: sharedPropTypes.sizePropType,

  /** Callback used when the Modal closes */
  onClose: PropTypes.func
};