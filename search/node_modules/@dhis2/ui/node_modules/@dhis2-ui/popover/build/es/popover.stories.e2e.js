function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import PropTypes from 'prop-types';
import React, { Component, createRef } from 'react';
import { Popover } from './popover.js';
const boxStyle = {
  display: 'flex',
  justifyContent: 'center',
  width: 400,
  backgroundColor: 'aliceblue'
};
const referenceElementStyle = {
  width: 100,
  height: 50,
  backgroundColor: 'cadetblue',
  textAlign: 'center',
  padding: 6
};

class PopperInBoxWithCenteredReferenceElement extends Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "ref", /*#__PURE__*/createRef());
  }

  render() {
    const {
      paddingTop,
      popoverHeight,
      popoverWidth,
      ...popoverProps
    } = this.props;
    return /*#__PURE__*/React.createElement("div", {
      style: { ...boxStyle,
        paddingTop,
        height: paddingTop + 100
      }
    }, /*#__PURE__*/React.createElement("div", {
      style: referenceElementStyle,
      ref: this.ref,
      "data-test": "reference-element"
    }, "Reference element"), /*#__PURE__*/React.createElement(Popover, _extends({
      reference: this.ref
    }, popoverProps), /*#__PURE__*/React.createElement("div", {
      "data-test": "popover-content",
      style: {
        width: popoverWidth,
        height: popoverHeight
      }
    }, "I am in a box with width: ", popoverWidth, "px and height:", ' ', popoverHeight, "px")));
  }

}

PopperInBoxWithCenteredReferenceElement.defaultProps = {
  paddingTop: 220,
  popoverHeight: 200,
  popoverWidth: 336
};
PopperInBoxWithCenteredReferenceElement.propTypes = {
  paddingTop: PropTypes.number,
  popoverHeight: PropTypes.number,
  popoverWidth: PropTypes.number
};
window.onClickOutside = window.Cypress && window.Cypress.cy.stub();
export default {
  title: 'Popover',
  component: Popover
};
export const Default = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, null);
export const Flipped = () =>
/*#__PURE__*/
// default viewport-height for flipped popover
// viePort height 400px for diplaced with arrow
React.createElement(PopperInBoxWithCenteredReferenceElement, {
  paddingTop: 160
});
export const HiddenArrow = () =>
/*#__PURE__*/
// viewPort height 325px
React.createElement(PopperInBoxWithCenteredReferenceElement, {
  paddingTop: 110
});
export const NoArrow = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  arrow: false
});
export const WithOnClickOutside = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  onClickOutside: window.onClickOutside
});
export const PlacementTop = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  popoverHeight: 40,
  popoverWidth: 180,
  paddingTop: 50,
  placement: "top"
});
export const PlacementRight = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  popoverHeight: 60,
  popoverWidth: 130,
  paddingTop: 50,
  placement: "right"
});
export const PlacementBottom = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  popoverHeight: 40,
  popoverWidth: 180,
  paddingTop: 50,
  placement: "bottom"
});
export const PlacementLeft = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  popoverHeight: 60,
  popoverWidth: 130,
  paddingTop: 50,
  placement: "left"
});
export const ShiftedArrow = () => /*#__PURE__*/React.createElement(PopperInBoxWithCenteredReferenceElement, {
  popoverHeight: 160,
  popoverWidth: 130,
  paddingTop: 1,
  placement: "left"
});