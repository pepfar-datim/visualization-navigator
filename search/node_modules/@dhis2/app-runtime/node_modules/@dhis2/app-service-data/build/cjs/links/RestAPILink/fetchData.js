"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchData = fetchData;
exports.parseStatus = exports.parseContentType = void 0;

var _engine = require("../../engine");

const parseContentType = contentType => contentType ? contentType.split(';')[0].trim().toLowerCase() : '';

exports.parseContentType = parseContentType;

const parseStatus = async response => {
  const accessError = response.status === 401 || response.status === 403 || response.status === 409;

  if (accessError) {
    let message;
    let details = {};

    try {
      details = await response.json();
      message = details.message;
    } catch (e) {// Do nothing
    } // Set a message in case of invalid json, or json without 'message' property


    if (!message) {
      message = response.status === 401 ? 'Unauthorized' : 'Forbidden';
    }

    throw new _engine.FetchError({
      type: 'access',
      message,
      details
    });
  }

  if (response.status < 200 || response.status >= 400) {
    const message = "An unknown error occurred - ".concat(response.statusText, " (").concat(response.status, ")");
    let details = {};

    try {
      details = await response.json();
    } catch (e) {// We can leave details as is if parsing fails
    }

    throw new _engine.FetchError({
      type: 'unknown',
      message,
      details
    });
  }

  return response;
};

exports.parseStatus = parseStatus;

function fetchData(url, options = {}) {
  return fetch(url, { ...options,
    credentials: 'include',
    headers: {
      'X-Requested-With': 'XMLHttpRequest',
      Accept: 'application/json',
      ...options.headers
    }
  }).catch(err => {
    throw new _engine.FetchError({
      type: 'network',
      message: 'An unknown network error occurred',
      details: err
    });
  }).then(parseStatus).then(async response => {
    const contentType = parseContentType(response.headers.get('Content-Type')); // 'application/json'

    if (contentType === 'application/json') {
      return await response.json(); // Will throw if invalid JSON!
    } // 'text/*'


    if (/^text\/[a-z0-9.-]+$/.test(contentType)) {
      return await response.text();
    }

    return await response.blob();
  });
}