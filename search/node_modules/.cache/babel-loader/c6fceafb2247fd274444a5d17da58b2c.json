{"ast":null,"code":"import _defineProperty from \"/home/jake/SRC/landing-page/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport propTypes from 'prop-types';\n\nvar mutuallyExclusiveFactory = function mutuallyExclusiveFactory(exlusivePropNames, propType, isRequired) {\n  return function (props, propName, componentName) {\n    var baseMsg = \"Invalid prop `\".concat(propName, \"` supplied to `\").concat(componentName, \"`,\");\n    var isDefined = typeof props[propName] !== 'undefined'; // Usage errors\n\n    if (exlusivePropNames.length === 0) {\n      return new Error(\"mutuallyExclusive was called without any arguments for property `\".concat(propName, \"` on component `\").concat(componentName, \"`. Please add the required arguments.\"));\n    } // Validation errors\n\n\n    if (isRequired && !isDefined) {\n      return new Error(\"\".concat(baseMsg, \" this prop is required but no value was found.\"));\n    } // This is how to programatically invoke a propTypes check\n    // https://github.com/facebook/prop-types#proptypescheckproptypes\n\n\n    propTypes.checkPropTypes(_defineProperty({}, propName, propType), props, 'prop', componentName);\n\n    if (props[propName]) {\n      var thruthySiblingPropName = exlusivePropNames.find(function (name) {\n        return props[name] && name !== propName;\n      });\n\n      if (thruthySiblingPropName) {\n        return new Error(\"\".concat(baseMsg, \" Property '\").concat(propName, \"' is mutually exclusive with '\").concat(thruthySiblingPropName, \"', but both have a thruthy value.\"));\n      }\n    }\n\n    return null;\n  };\n};\n/**\n * Ensure that only one property within a specified list is thruthy\n * This function will also check if the current property value is of the specified type\n * @param {array<string>} exlusivePropNames - The prop names to be checked\n * @param {function} propType - The prop-type that the current prop-value needs to conform to\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import cx from 'classnames'\n * import propTypes from 'prop-types'\n * import { mutuallyExclusive } from '@dhis2/prop-types'\n *\n * const Alert = ({ danger, warning, success, children }) => (\n *     <div className={cx({danger, warning, success})}>\n *         {children}\n *     </div>\n * )\n *\n * const statusPropType = mutuallyExclusive(['danger', 'warning', 'success'], propTypes.bool)\n *\n * Alert.propTypes = {\n *     children: propTypes.node,\n *     danger: statusPropType,\n *     warning: statusPropType,\n *     success: statusPropType,\n * }\n */\n\n\nexport function mutuallyExclusive(exlusivePropNames, propType) {\n  var fn = mutuallyExclusiveFactory(exlusivePropNames, propType, false);\n  fn.isRequired = mutuallyExclusiveFactory(exlusivePropNames, propType, true);\n  return fn;\n}","map":{"version":3,"names":["propTypes","mutuallyExclusiveFactory","exlusivePropNames","propType","isRequired","props","propName","componentName","baseMsg","isDefined","length","Error","checkPropTypes","thruthySiblingPropName","find","name","mutuallyExclusive","fn"],"sources":["/home/jake/SRC/landing-page/node_modules/@dhis2/prop-types/build/es/mutuallyExclusive.js"],"sourcesContent":["import propTypes from 'prop-types';\n\nconst mutuallyExclusiveFactory = (exlusivePropNames, propType, isRequired) => (props, propName, componentName) => {\n  const baseMsg = `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`,`;\n  const isDefined = typeof props[propName] !== 'undefined'; // Usage errors\n\n  if (exlusivePropNames.length === 0) {\n    return new Error(`mutuallyExclusive was called without any arguments for property \\`${propName}\\` on component \\`${componentName}\\`. Please add the required arguments.`);\n  } // Validation errors\n\n\n  if (isRequired && !isDefined) {\n    return new Error(`${baseMsg} this prop is required but no value was found.`);\n  } // This is how to programatically invoke a propTypes check\n  // https://github.com/facebook/prop-types#proptypescheckproptypes\n\n\n  propTypes.checkPropTypes({\n    [propName]: propType\n  }, props, 'prop', componentName);\n\n  if (props[propName]) {\n    const thruthySiblingPropName = exlusivePropNames.find(name => props[name] && name !== propName);\n\n    if (thruthySiblingPropName) {\n      return new Error(`${baseMsg} Property '${propName}' is mutually exclusive with '${thruthySiblingPropName}', but both have a thruthy value.`);\n    }\n  }\n\n  return null;\n};\n/**\n * Ensure that only one property within a specified list is thruthy\n * This function will also check if the current property value is of the specified type\n * @param {array<string>} exlusivePropNames - The prop names to be checked\n * @param {function} propType - The prop-type that the current prop-value needs to conform to\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import cx from 'classnames'\n * import propTypes from 'prop-types'\n * import { mutuallyExclusive } from '@dhis2/prop-types'\n *\n * const Alert = ({ danger, warning, success, children }) => (\n *     <div className={cx({danger, warning, success})}>\n *         {children}\n *     </div>\n * )\n *\n * const statusPropType = mutuallyExclusive(['danger', 'warning', 'success'], propTypes.bool)\n *\n * Alert.propTypes = {\n *     children: propTypes.node,\n *     danger: statusPropType,\n *     warning: statusPropType,\n *     success: statusPropType,\n * }\n */\n\n\nexport function mutuallyExclusive(exlusivePropNames, propType) {\n  const fn = mutuallyExclusiveFactory(exlusivePropNames, propType, false);\n  fn.isRequired = mutuallyExclusiveFactory(exlusivePropNames, propType, true);\n  return fn;\n}"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;;AAEA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,iBAAD,EAAoBC,QAApB,EAA8BC,UAA9B;EAAA,OAA6C,UAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAAoC;IAChH,IAAMC,OAAO,2BAAqBF,QAArB,4BAAiDC,aAAjD,OAAb;IACA,IAAME,SAAS,GAAG,OAAOJ,KAAK,CAACC,QAAD,CAAZ,KAA2B,WAA7C,CAFgH,CAEtD;;IAE1D,IAAIJ,iBAAiB,CAACQ,MAAlB,KAA6B,CAAjC,EAAoC;MAClC,OAAO,IAAIC,KAAJ,4EAA+EL,QAA/E,6BAA4GC,aAA5G,2CAAP;IACD,CAN+G,CAM9G;;;IAGF,IAAIH,UAAU,IAAI,CAACK,SAAnB,EAA8B;MAC5B,OAAO,IAAIE,KAAJ,WAAaH,OAAb,oDAAP;IACD,CAX+G,CAW9G;IACF;;;IAGAR,SAAS,CAACY,cAAV,qBACGN,QADH,EACcH,QADd,GAEGE,KAFH,EAEU,MAFV,EAEkBE,aAFlB;;IAIA,IAAIF,KAAK,CAACC,QAAD,CAAT,EAAqB;MACnB,IAAMO,sBAAsB,GAAGX,iBAAiB,CAACY,IAAlB,CAAuB,UAAAC,IAAI;QAAA,OAAIV,KAAK,CAACU,IAAD,CAAL,IAAeA,IAAI,KAAKT,QAA5B;MAAA,CAA3B,CAA/B;;MAEA,IAAIO,sBAAJ,EAA4B;QAC1B,OAAO,IAAIF,KAAJ,WAAaH,OAAb,wBAAkCF,QAAlC,2CAA2EO,sBAA3E,uCAAP;MACD;IACF;;IAED,OAAO,IAAP;EACD,CA5BgC;AAAA,CAAjC;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASG,iBAAT,CAA2Bd,iBAA3B,EAA8CC,QAA9C,EAAwD;EAC7D,IAAMc,EAAE,GAAGhB,wBAAwB,CAACC,iBAAD,EAAoBC,QAApB,EAA8B,KAA9B,CAAnC;EACAc,EAAE,CAACb,UAAH,GAAgBH,wBAAwB,CAACC,iBAAD,EAAoBC,QAApB,EAA8B,IAA9B,CAAxC;EACA,OAAOc,EAAP;AACD"},"metadata":{},"sourceType":"module"}