"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WithValue = exports.TextareaTextOverflow = exports.StatusWarning = exports.StatusValid = exports.StatusLoading = exports.StatusError = exports.Rows = exports.Resize = exports.ReadOnly = exports.PlaceholderNoValue = exports.Focus = exports.Disabled = exports.Dense = exports.Default = exports.Autogrow = void 0;

var _uiConstants = require("@dhis2/ui-constants");

var _react = _interopRequireDefault(require("react"));

var _index = require("./index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const description = "\nA textarea allows multiple lines of text input. Use a textarea wherever a user needs to input a lot of information. Do not use a textarea if a short, single line of content is expected.\n\nOptions for textarea inputs are:\n\n- Rows: the height of the input, defined by the number of rows of text\n- Resizable: whether the textarea can be resized by the user or not. Can be set for both width and height.\n- Autoheight: if enabled, the texarea will grow in height to adapt to the content.\n\n```js\nimport { TextArea } from '@dhis2/ui'\n```\n";

window.onChange = (payload, event) => {
  console.log('onChange payload', payload);
  console.log('onChange event', event);
};

window.onFocus = (payload, event) => {
  console.log('onFocus payload', payload);
  console.log('onFocus event', event);
};

window.onBlur = (payload, event) => {
  console.log('onBlur payload', payload);
  console.log('onBlur event', event);
};

const onChange = function () {
  return window.onChange(...arguments);
};

const onFocus = function () {
  return window.onFocus(...arguments);
};

const onBlur = function () {
  return window.onBlur(...arguments);
};

var _default = {
  title: 'Text Area',
  component: _index.TextArea,
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  argTypes: {
    valid: { ..._uiConstants.sharedPropTypes.statusArgType
    },
    error: { ..._uiConstants.sharedPropTypes.statusArgType
    },
    warning: { ..._uiConstants.sharedPropTypes.statusArgType
    }
  },
  args: {
    name: 'textAreaName',
    onChange,
    onFocus,
    onBlur
  }
};
exports.default = _default;

const Template = args => /*#__PURE__*/_react.default.createElement(_index.TextArea, args);

const Default = Template.bind({});
exports.Default = Default;
const PlaceholderNoValue = Template.bind({});
exports.PlaceholderNoValue = PlaceholderNoValue;
PlaceholderNoValue.args = {
  placeholder: 'Hold the place'
};
PlaceholderNoValue.storyName = 'Placeholder, no value';
const WithValue = Template.bind({});
exports.WithValue = WithValue;
WithValue.args = {
  value: 'This is set through the value prop, which means the component is controlled.'
};
WithValue.storyName = 'With value';

const Focus = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.TextArea, _extends({}, args, {
  initialFocus: true,
  className: "initially-focused"
})), /*#__PURE__*/_react.default.createElement(_index.TextArea, _extends({}, args, {
  className: "initially-unfocused"
})));

exports.Focus = Focus;
Focus.parameters = {
  docs: {
    disable: true
  }
};
const StatusValid = Template.bind({});
exports.StatusValid = StatusValid;
StatusValid.args = {
  valid: true,
  value: 'This value is valid'
};
StatusValid.storyName = 'Status: Valid';
const StatusWarning = Template.bind({});
exports.StatusWarning = StatusWarning;
StatusWarning.args = {
  warning: true,
  value: 'This value produces a warning'
};
StatusWarning.storyName = 'Status: Warning';
const StatusError = Template.bind({});
exports.StatusError = StatusError;
StatusError.args = {
  error: true,
  value: 'This value produces an error',
  helpText: 'This is some help text to advise what this input actually is.',
  validationText: 'This describes the error, if a message is supplied.'
};
StatusError.storyName = 'Status: Error';
const StatusLoading = Template.bind({});
exports.StatusLoading = StatusLoading;
StatusLoading.args = {
  loading: true,
  value: 'This value produces a loadingn state'
};
StatusLoading.storyName = 'Status: Loading';
const Disabled = Template.bind({});
exports.Disabled = Disabled;
Disabled.args = {
  disabled: true,
  value: 'This field is disabled'
};
const ReadOnly = Template.bind({});
exports.ReadOnly = ReadOnly;
ReadOnly.args = {
  readOnly: true,
  value: 'This field is readOnly'
};
const Dense = Template.bind({});
exports.Dense = Dense;
Dense.args = {
  dense: true,
  value: 'This field is dense'
};
const TextareaTextOverflow = Template.bind({});
exports.TextareaTextOverflow = TextareaTextOverflow;
TextareaTextOverflow.args = {
  label: 'I have a scrollbar',
  value: ['A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text', 'A line of text'].join('\n')
};
const Rows = Template.bind({});
exports.Rows = Rows;
Rows.args = {
  rows: 8,
  label: 'You can set the height with the rows prop. I have 8'
};

const Resize = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.TextArea, _extends({}, args, {
  name: "textarea1",
  label: "Resize: vertical (default)"
})), /*#__PURE__*/_react.default.createElement(_index.TextArea, _extends({}, args, {
  name: "textarea2",
  label: "Resize: none",
  resize: "none"
})), /*#__PURE__*/_react.default.createElement(_index.TextArea, _extends({}, args, {
  name: "textarea3",
  label: "Resize: both",
  resize: "both"
})), /*#__PURE__*/_react.default.createElement(_index.TextArea, _extends({}, args, {
  name: "textarea4",
  label: "Resize: horizontal",
  resize: "horizontal"
})));

exports.Resize = Resize;

const Autogrow = args => /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.TextArea, _extends({}, args, {
  name: "textarea1",
  label: "Autogrow step 1",
  autoGrow: true,
  rows: 2,
  value: "This TextArea has a height of 2 rows"
})), /*#__PURE__*/_react.default.createElement(_index.TextArea, _extends({}, args, {
  name: "textarea2",
  label: "Autogrow step 2",
  autoGrow: true,
  rows: 2,
  value: ['This TextArea has a height of two rows', 'it also has autoGrow set to true so it will grow with the content'].join('\n')
})), /*#__PURE__*/_react.default.createElement(_index.TextArea, _extends({}, args, {
  name: "textarea3",
  label: "Autogrow step 3",
  autoGrow: true,
  rows: 2,
  value: ['This TextArea has a height of two rows', 'it also has autoGrow set to true so it will grow with the content.', 'See: rows is still 2, but I now have 3 lines.'].join('\n')
})), /*#__PURE__*/_react.default.createElement(_index.TextArea, _extends({}, args, {
  name: "textarea4",
  label: "Autogrow step 4",
  value: ['This TextArea has a height of two rows', 'it also has autoGrow set to true so it will grow with the content.', 'See: rows is still 2...', 'And now I have 4 lines and still no scroll bar in sight.'].join('\n')
})));

exports.Autogrow = Autogrow;