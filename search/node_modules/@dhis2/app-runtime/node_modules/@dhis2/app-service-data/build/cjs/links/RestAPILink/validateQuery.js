"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateResourceQuery = void 0;

var _metadataResources = require("./metadataResources");

const validatePagination = (query, warn) => {
  var _query$params, _query$params2;

  if (!_metadataResources.normativeMetadataResources.includes(query.resource)) {
    return true;
  }

  if (((_query$params = query.params) === null || _query$params === void 0 ? void 0 : _query$params.paging) === false || ((_query$params2 = query.params) === null || _query$params2 === void 0 ? void 0 : _query$params2.paging) === 'false') {
    warn('Data queries with paging=false are deprecated and should not be used!', query);
    return false;
  } // TODO: validate sub-resource pagination (i.e. fields=users~paging(1,50)[name] )


  return true;
};

const validateDeclarativeFields = (query, warn) => {
  var _query$params3;

  if (!_metadataResources.normativeMetadataResources.includes(query.resource)) {
    return true;
  }

  if (!((_query$params3 = query.params) !== null && _query$params3 !== void 0 && _query$params3.fields)) {
    warn('Data queries should always specify fields to return', query);
    return false;
  } else {
    var _fields;

    let fields = undefined;

    if (typeof query.params.fields === 'string') {
      fields = query.params.fields.split(',').map(field => field.trim());
    } else if (Array.isArray(query.params.fields)) {
      fields = query.params.fields.map(field => String(field).trim());
    }

    if ((_fields = fields) !== null && _fields !== void 0 && _fields.find(field => field.match(/(^\*$|^:.+)/))) {
      warn('Data queries should not use wildcard or dynamic field groups', query.params.fields, query);
      return false;
    }
  } // TODO: validate sub-resource wildcard fields (i.e. fields=users[*])


  return true;
};

const validateResourceQuery = (query, type) => {
  let valid = true;

  if (process.env.NODE_ENV === 'development') {
    // Support build-time dead code elimination in production
    const warn = console.warn;

    if (type === 'read') {
      valid = validatePagination(query, warn) && valid;
      valid = validateDeclarativeFields(query, warn) && valid;
    }
  }

  return valid;
};

exports.validateResourceQuery = validateResourceQuery;