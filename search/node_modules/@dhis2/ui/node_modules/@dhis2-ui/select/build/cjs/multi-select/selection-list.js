"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SelectionList = void 0;

var _chip = require("@dhis2-ui/chip");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _index = require("../select/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const createRemoveHandler = _ref => {
  let {
    selected,
    onChange,
    value
  } = _ref;
  return (_, e) => {
    const filtered = (0, _index.removeOption)(value, selected);
    const data = {
      selected: filtered
    };
    onChange(data, e);
  };
};

const SelectionList = _ref2 => {
  let {
    selected,
    onChange,
    disabled,
    options
  } = _ref2;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, selected.map(value => {
    const selectedOption = (0, _index.findOptionChild)(value, options);

    if (!selectedOption) {
      const message = "There is no option with the value: \"".concat(value, "\". ") + 'Make sure that all the values passed to the selected ' + 'prop match the value of an existing option.';
      throw new Error(message);
    } // The chip should be disabled if the option or the select are disabled


    const isDisabled = selectedOption.props.disabled || disabled; // Create an onRemove handler, but only if it's not disabled

    const onRemove = isDisabled ? undefined : createRemoveHandler({
      selected,
      onChange,
      value
    });
    return /*#__PURE__*/_react.default.createElement(_chip.Chip, {
      key: value,
      onRemove: onRemove,
      disabled: isDisabled,
      marginBottom: "0",
      marginLeft: "0",
      marginTop: "0",
      overflow: true,
      dense: true
    }, selectedOption.props.label);
  }));
};

exports.SelectionList = SelectionList;
SelectionList.propTypes = {
  disabled: _propTypes.default.bool,
  options: _propTypes.default.node,
  selected: _propTypes.default.arrayOf(_propTypes.default.string),
  onChange: _propTypes.default.func
};