export declare type RecordingState = 'default' | 'pending' | 'error' | 'recording';
export interface GlobalStateStoreMutation {
    (state: any): any;
}
export interface GlobalStateStoreMutationCreator<Type> {
    (...args: Type[]): GlobalStateStoreMutation;
}
export interface GlobalStateMutation<Type> {
    (...args: Type[]): void;
}
export interface GlobalStateStoreMutateMethod {
    (mutation: GlobalStateStoreMutation): void;
}
export interface GlobalStateStore {
    getState: () => any;
    subscribe: (callback: (state: any) => void) => void;
    unsubscribe: (callback: (state: any) => void) => void;
    mutate: GlobalStateStoreMutateMethod;
}
interface StartRecording {
    (params: {
        sectionId: string;
        recordingTimeoutDelay: number;
        onStarted: () => void;
        onCompleted: () => void;
        onError: (err: Error) => void;
    }): Promise<undefined>;
}
export interface IndexedDBCachedSection {
    sectionId: string;
    lastUpdated: Date;
    requests: number;
}
export interface OfflineInterface {
    readonly pwaEnabled: boolean;
    startRecording: StartRecording;
    getCachedSections: () => Promise<IndexedDBCachedSection[]>;
    removeSection: (id: string) => Promise<boolean>;
}
export {};
