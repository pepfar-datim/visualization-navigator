"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WithMenu = exports.WithClick = exports.Small = exports.Secondary = exports.Primary = exports.Open = exports.ManualControl = exports.Large = exports.InitialFocus = exports.Disabled = exports.Destructive = exports.Default = void 0;

var _menu = require("@dhis2-ui/menu");

var _uiConstants = require("@dhis2/ui-constants");

var _react = _interopRequireWildcard(require("react"));

var _index = require("./index.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const description = "\nPresents several actions to a user in a small space. Can replace single, individual buttons. Should only be used for actions that are related to one another. Ensure the button has a useful level that communicates that actions are contained within. Dropdown buttons do not have an explicit action, only expanding the list of contained actions.\n\n```js\nimport { DropdownButton } from '@dhis2/ui'\n```\n";

const Simple = /*#__PURE__*/_react.default.createElement("span", null, "Simplest thing");

const {
  sizeArgType,
  buttonVariantArgType
} = _uiConstants.sharedPropTypes;
var _default = {
  title: 'Dropdown Button',
  component: _index.DropdownButton,
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  argTypes: {
    primary: { ...buttonVariantArgType
    },
    secondary: { ...buttonVariantArgType
    },
    destructive: { ...buttonVariantArgType
    },
    small: { ...sizeArgType
    },
    large: { ...sizeArgType
    }
  },
  // Default args for all stories (can be overridden)
  args: {
    name: 'buttonName',
    value: 'buttonValue',
    component: Simple,
    children: 'Label me!'
  }
};
exports.default = _default;

const Template = args => /*#__PURE__*/_react.default.createElement(_index.DropdownButton, args);

const Default = Template.bind({});
exports.Default = Default;
const WithClick = Template.bind({});
exports.WithClick = WithClick;
WithClick.args = {
  onClick: _ref => {
    let {
      open
    } = _ref;
    return console.log('onClick: the dropdown is open: ', open);
  }
};
const Primary = Template.bind({});
exports.Primary = Primary;
Primary.args = {
  primary: true
};
const Secondary = Template.bind({});
exports.Secondary = Secondary;
Secondary.args = {
  secondary: true
};
const Destructive = Template.bind({});
exports.Destructive = Destructive;
Destructive.args = {
  destructive: true
};
const Disabled = Template.bind({});
exports.Disabled = Disabled;
Disabled.args = {
  disabled: true
};
const Small = Template.bind({});
exports.Small = Small;
Small.args = {
  small: true
};
const Large = Template.bind({});
exports.Large = Large;
Large.args = {
  large: true
};
const WithMenu = Template.bind({});
exports.WithMenu = WithMenu;
WithMenu.args = {
  component: /*#__PURE__*/_react.default.createElement(_menu.FlyoutMenu, null, /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    label: "Item 1"
  }), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    label: "Item 2"
  }), /*#__PURE__*/_react.default.createElement(_menu.MenuItem, {
    label: "Item 3"
  }))
}; // FlyoutMenu needs iframe
// But docs page down too much with iframe, so disabled

WithMenu.parameters = {
  docs: {
    disable: true
  }
};
const InitialFocus = Template.bind({});
exports.InitialFocus = InitialFocus;
InitialFocus.args = {
  initialFocus: true
};
/**
 * 'Initial focus' stories cause the docs page to scroll away each time
 * a control is changed, therefore it is omitted from the docs page (but
 * not the normal 'canvas' story viewer)
 */

InitialFocus.parameters = {
  docs: {
    disable: true
  }
};

const OpenTemplate = args => {
  return /*#__PURE__*/_react.default.createElement(_index.DropdownButton, args);
};

const Open = OpenTemplate.bind({});
exports.Open = Open;
Open.args = {
  open: true,
  component: Simple,
  onClick: () => {}
};

const ManualControlTemplate = args => {
  const [isOpen, setIsOpen] = (0, _react.useState)(true);

  const handleOpen = () => setIsOpen(false);

  const Menu = /*#__PURE__*/_react.default.createElement("ul", null, /*#__PURE__*/_react.default.createElement("li", null, "First option does nothing"), /*#__PURE__*/_react.default.createElement("li", {
    onClick: handleOpen
  }, "Close the dropdown"));

  return /*#__PURE__*/_react.default.createElement(_index.DropdownButton, _extends({}, args, {
    onClick: () => setIsOpen(!isOpen),
    open: isOpen,
    component: Menu
  }));
};

const ManualControl = ManualControlTemplate.bind({});
exports.ManualControl = ManualControl;
ManualControl.args = {};