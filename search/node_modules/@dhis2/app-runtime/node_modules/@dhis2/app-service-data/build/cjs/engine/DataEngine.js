"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DataEngine = void 0;

var _getMutationFetchType = require("./helpers/getMutationFetchType");

var _resolveDynamicQuery = require("./helpers/resolveDynamicQuery");

var _validate = require("./helpers/validate");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const reduceResponses = (responses, names) => responses.reduce((out, response, idx) => {
  out[names[idx]] = response;
  return out;
}, {});

class DataEngine {
  constructor(link) {
    _defineProperty(this, "link", void 0);

    this.link = link;
  }

  query(query, {
    variables = {},
    signal,
    onComplete,
    onError
  } = {}) {
    const names = Object.keys(query);
    const queries = names.map(name => query[name]).map(q => (0, _resolveDynamicQuery.resolveDynamicQuery)(q, variables));
    (0, _validate.validateResourceQueries)(queries, names);
    return Promise.all(queries.map(q => {
      return this.link.executeResourceQuery('read', q, {
        signal
      });
    })).then(results => {
      const data = reduceResponses(results, names);
      onComplete && onComplete(data);
      return data;
    }).catch(error => {
      onError && onError(error);
      throw error;
    });
  }

  mutate(mutation, {
    variables = {},
    signal,
    onComplete,
    onError
  } = {}) {
    const query = (0, _resolveDynamicQuery.resolveDynamicQuery)(mutation, variables);
    const type = (0, _getMutationFetchType.getMutationFetchType)(mutation);
    (0, _validate.validateResourceQuery)(type, query);
    const result = this.link.executeResourceQuery(type, query, {
      signal
    });
    return result.then(data => {
      onComplete && onComplete(data);
      return data;
    }).catch(error => {
      onError && onError(error);
      throw error;
    });
  }

}

exports.DataEngine = DataEngine;
var _default = DataEngine;
exports.default = _default;