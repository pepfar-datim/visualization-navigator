import PropTypes from 'prop-types';
import React from 'react';
import { Actions } from './actions.js';
import { AddAll } from './add-all.js';
import { AddIndividual } from './add-individual.js';
import { Container } from './container.js';
import { Filter } from './filter.js';
import { LeftFooter } from './left-footer.js';
import { LeftHeader } from './left-header.js';
import { LeftSide } from './left-side.js';
import { OptionsContainer } from './options-container.js';
import { RemoveAll } from './remove-all.js';
import { RemoveIndividual } from './remove-individual.js';
import { ReorderingActions } from './reordering-actions.js';
import { RightFooter } from './right-footer.js';
import { RightHeader } from './right-header.js';
import { RightSide } from './right-side.js';
import { TransferOption } from './transfer-option.js';
import { addAllSelectableSourceOptions, addIndividualSourceOptions, createDoubleClickHandlers, defaultFilterCallback, getOptionClickHandlers, isReorderDownDisabled, isReorderUpDisabled, moveHighlightedPickedOptionDown, moveHighlightedPickedOptionUp, removeAllPickedOptions, removeIndividualPickedOptions, useFilter, useHighlightedOptions } from './transfer/index.js';

const identity = value => value;

export const Transfer = _ref => {
  let {
    options,
    onChange,
    addAllText,
    addIndividualText,
    className,
    dataTest,
    disabled,
    enableOrderChange,
    filterCallback,
    filterCallbackPicked,
    filterLabel,
    filterLabelPicked,
    filterPlaceholder,
    filterPlaceholderPicked,
    filterable,
    filterablePicked,
    height,
    hideFilterInput,
    hideFilterInputPicked,
    initialSearchTerm,
    initialSearchTermPicked,
    leftFooter,
    leftHeader,
    loadingPicked,
    loading,
    maxSelections,
    optionsWidth,
    removeAllText,
    removeIndividualText,
    renderOption,
    rightFooter,
    rightHeader,
    searchTerm,
    searchTermPicked,
    selected,
    selectedEmptyComponent,
    selectedWidth,
    sourceEmptyPlaceholder,
    onFilterChange,
    onFilterChangePicked,
    onEndReached,
    onEndReachedPicked
  } = _ref;

  /* Source options search value:
   * Depending on whether the onFilterChange callback has been provided
   * either the internal or external search value is used */
  const {
    filterValue: actualFilter,
    filter: actualFilterCallback,
    setInternalFilter
  } = useFilter({
    initialSearchTerm,
    onFilterChange,
    externalSearchTerm: searchTerm,
    filterable,
    filterCallback
  });
  /*
   * Actual source options:
   * Extract the not-selected options.
   * Filters options if filterable is true.
   */

  const sourceOptions = actualFilterCallback(options.filter(_ref2 => {
    let {
      value
    } = _ref2;
    return !selected.includes(value);
  }), actualFilter);
  /*
   * Picked options highlighting:
   * These are all the highlighted options on the options side.
   */

  const {
    highlightedOptions: highlightedSourceOptions,
    setHighlightedOptions: setHighlightedSourceOptions,
    toggleHighlightedOption: toggleHighlightedSourceOption
  } = useHighlightedOptions({
    options: sourceOptions,
    disabled,
    maxSelections
  });
  /* Picked options search value:
   * Depending on whether the onFilterChangePicked callback has been provided
   * either the internal or external search value is used */

  const {
    filterValue: actualFilterPicked,
    filter: actualFilterPickedCallback,
    setInternalFilter: setInternalFilterPicked
  } = useFilter({
    filterable: filterablePicked,
    initialSearchTerm: initialSearchTermPicked,
    onFilterChange: onFilterChangePicked,
    externalSearchTerm: searchTermPicked,
    filterCallback: filterCallbackPicked
  });
  /*
   * Actual picked options:
   * Extract the selected options. Can't use `options.filter`
   * because we need to keep the order of `selected`
   */

  const pickedOptions = actualFilterPickedCallback(selected.map(value => options.find(option => value === option.value)) // filter -> in case a selected value has been provided
  // that does not exist as option
  .filter(identity), actualFilterPicked);
  /*
   * Source options highlighting:
   * These are all the highlighted options on the selected side.
   */

  const {
    highlightedOptions: highlightedPickedOptions,
    setHighlightedOptions: setHighlightedPickedOptions,
    toggleHighlightedOption: toggleHighlightedPickedOption
  } = useHighlightedOptions({
    options: pickedOptions,
    disabled,
    maxSelections
  });
  /*
   * Source & Picked options:
   * These are the double click handlers for (de-)selection
   */

  const {
    selectSingleOption,
    deselectSingleOption
  } = createDoubleClickHandlers({
    selected,
    setHighlightedSourceOptions,
    setHighlightedPickedOptions,
    onChange,
    maxSelections
  });
  /**
   * Disabled button states
   */

  const isAddAllDisabled = disabled || sourceOptions.filter(_ref3 => {
    let {
      disabled
    } = _ref3;
    return !disabled;
  }).length === 0;
  const isAddIndividualDisabled = disabled || !highlightedSourceOptions.length;
  const isRemoveAllDisabled = disabled || !selected.length;
  const isRemoveIndividualDisabled = disabled || !highlightedPickedOptions.length;
  return /*#__PURE__*/React.createElement(Container, {
    dataTest: dataTest,
    className: className,
    height: height
  }, /*#__PURE__*/React.createElement(LeftSide, {
    dataTest: "".concat(dataTest, "-leftside"),
    width: optionsWidth
  }, (leftHeader || filterable) && /*#__PURE__*/React.createElement(LeftHeader, {
    dataTest: "".concat(dataTest, "-leftheader")
  }, leftHeader, filterable && !hideFilterInput && /*#__PURE__*/React.createElement(Filter, {
    label: filterLabel,
    placeholder: filterPlaceholder,
    dataTest: "".concat(dataTest, "-filter"),
    filter: actualFilter,
    onChange: onFilterChange ? onFilterChange : _ref4 => {
      let {
        value
      } = _ref4;
      return setInternalFilter(value);
    }
  })), /*#__PURE__*/React.createElement(OptionsContainer, {
    dataTest: "".concat(dataTest, "-sourceoptions"),
    emptyComponent: sourceEmptyPlaceholder,
    getOptionClickHandlers: getOptionClickHandlers,
    highlightedOptions: highlightedSourceOptions,
    loading: loading,
    options: sourceOptions,
    renderOption: renderOption,
    selectionHandler: selectSingleOption,
    toggleHighlightedOption: toggleHighlightedSourceOption,
    onEndReached: onEndReached
  }), leftFooter && /*#__PURE__*/React.createElement(LeftFooter, {
    dataTest: "".concat(dataTest, "-leftfooter")
  }, leftFooter)), /*#__PURE__*/React.createElement(Actions, {
    dataTest: "".concat(dataTest, "-actions")
  }, maxSelections === Infinity && /*#__PURE__*/React.createElement(AddAll, {
    label: addAllText,
    dataTest: "".concat(dataTest, "-actions-addall"),
    disabled: isAddAllDisabled,
    onClick: () => addAllSelectableSourceOptions({
      sourceOptions,
      selected,
      onChange,
      setHighlightedSourceOptions
    })
  }), /*#__PURE__*/React.createElement(AddIndividual, {
    label: addIndividualText,
    dataTest: "".concat(dataTest, "-actions-addindividual"),
    disabled: isAddIndividualDisabled,
    onClick: () => addIndividualSourceOptions({
      filterable,
      sourceOptions,
      highlightedSourceOptions,
      selected,
      maxSelections,
      onChange,
      setHighlightedSourceOptions
    })
  }), maxSelections === Infinity && /*#__PURE__*/React.createElement(RemoveAll, {
    label: removeAllText,
    dataTest: "".concat(dataTest, "-actions-removeall"),
    disabled: isRemoveAllDisabled,
    onClick: () => removeAllPickedOptions({
      setHighlightedPickedOptions,
      onChange
    })
  }), /*#__PURE__*/React.createElement(RemoveIndividual, {
    label: removeIndividualText,
    dataTest: "".concat(dataTest, "-actions-removeindividual"),
    disabled: isRemoveIndividualDisabled,
    onClick: () => removeIndividualPickedOptions({
      filterablePicked,
      pickedOptions,
      highlightedPickedOptions,
      onChange,
      selected,
      setHighlightedPickedOptions
    })
  })), /*#__PURE__*/React.createElement(RightSide, {
    dataTest: "".concat(dataTest, "-rightside"),
    width: selectedWidth
  }, (rightHeader || filterablePicked) && /*#__PURE__*/React.createElement(RightHeader, {
    dataTest: "".concat(dataTest, "-rightheader")
  }, rightHeader, filterablePicked && !hideFilterInputPicked && /*#__PURE__*/React.createElement(Filter, {
    label: filterLabelPicked,
    placeholder: filterPlaceholderPicked,
    dataTest: "".concat(dataTest, "-filter"),
    filter: actualFilterPicked,
    onChange: onFilterChangePicked ? onFilterChangePicked : _ref5 => {
      let {
        value
      } = _ref5;
      return setInternalFilterPicked(value);
    }
  })), /*#__PURE__*/React.createElement(OptionsContainer, {
    selected: true,
    dataTest: "".concat(dataTest, "-pickedoptions"),
    emptyComponent: selectedEmptyComponent,
    getOptionClickHandlers: getOptionClickHandlers,
    highlightedOptions: highlightedPickedOptions,
    loading: loadingPicked,
    options: pickedOptions,
    renderOption: renderOption,
    selectionHandler: deselectSingleOption,
    toggleHighlightedOption: toggleHighlightedPickedOption,
    onEndReached: onEndReachedPicked
  }), (rightFooter || enableOrderChange) && /*#__PURE__*/React.createElement(RightFooter, {
    dataTest: "".concat(dataTest, "-rightfooter")
  }, enableOrderChange && /*#__PURE__*/React.createElement(ReorderingActions, {
    dataTest: "".concat(dataTest, "-reorderingactions"),
    disabledDown: isReorderDownDisabled({
      highlightedPickedOptions,
      selected
    }),
    disabledUp: isReorderUpDisabled({
      highlightedPickedOptions,
      selected
    }),
    onChangeUp: () => moveHighlightedPickedOptionUp({
      selected,
      highlightedPickedOptions,
      onChange
    }),
    onChangeDown: () => {
      moveHighlightedPickedOptionDown({
        selected,
        highlightedPickedOptions,
        onChange
      });
    }
  }), rightFooter)));
};

const defaultRenderOption = option => /*#__PURE__*/React.createElement(TransferOption, option);

Transfer.defaultProps = {
  dataTest: 'dhis2-uicore-transfer',
  height: '240px',
  initialSearchTerm: '',
  initialSearchTermPicked: '',
  maxSelections: Infinity,
  optionsWidth: '320px',
  renderOption: defaultRenderOption,
  selected: [],
  selectedWidth: '320px',
  filterCallback: defaultFilterCallback,
  filterCallbackPicked: defaultFilterCallback
};
Transfer.propTypes = {
  options: PropTypes.arrayOf(PropTypes.shape({
    label: PropTypes.string.isRequired,
    value: PropTypes.string.isRequired,
    disabled: PropTypes.bool
  })).isRequired,
  onChange: PropTypes.func.isRequired,
  addAllText: PropTypes.string,
  addIndividualText: PropTypes.string,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  disabled: PropTypes.bool,
  enableOrderChange: PropTypes.bool,
  filterCallback: PropTypes.func,
  filterCallbackPicked: PropTypes.func,
  filterLabel: PropTypes.string,
  filterLabelPicked: PropTypes.string,
  filterPlaceholder: PropTypes.string,
  filterPlaceholderPicked: PropTypes.string,
  filterable: PropTypes.bool,
  filterablePicked: PropTypes.bool,
  height: PropTypes.string,
  hideFilterInput: PropTypes.bool,
  hideFilterInputPicked: PropTypes.bool,
  initialSearchTerm: PropTypes.string,
  initialSearchTermPicked: PropTypes.string,
  leftFooter: PropTypes.node,
  leftHeader: PropTypes.node,
  loading: PropTypes.bool,
  loadingPicked: PropTypes.bool,
  maxSelections: PropTypes.oneOf([1, Infinity]),
  optionsWidth: PropTypes.string,
  removeAllText: PropTypes.string,
  removeIndividualText: PropTypes.string,
  renderOption: PropTypes.func,
  rightFooter: PropTypes.node,
  rightHeader: PropTypes.node,
  searchTerm: PropTypes.string,
  searchTermPicked: PropTypes.string,
  selected: PropTypes.arrayOf(PropTypes.string),
  selectedEmptyComponent: PropTypes.node,
  selectedWidth: PropTypes.string,
  sourceEmptyPlaceholder: PropTypes.node,
  onEndReached: PropTypes.func,
  onEndReachedPicked: PropTypes.func,
  onFilterChange: PropTypes.func,
  onFilterChangePicked: PropTypes.func
};