"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuItem = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _popper = require("@dhis2-ui/popper");

var _portal = require("@dhis2-ui/portal");

var _uiIcons = require("@dhis2/ui-icons");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _index = require("../index.js");

var _menuItemStyles = _interopRequireDefault(require("./menu-item.styles.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isModifiedEvent = evt => evt.metaKey || evt.altKey || evt.ctrlKey || evt.shiftKey;

const createOnClickHandler = _ref => {
  let {
    onClick,
    toggleSubMenu,
    isLink,
    value
  } = _ref;
  return evt => {
    if (isLink && isModifiedEvent(evt) || !(onClick || toggleSubMenu)) {
      return;
    }

    evt.preventDefault();
    evt.stopPropagation();
    onClick && onClick({
      value
    }, evt);
    toggleSubMenu && toggleSubMenu();
  };
};

const MenuItem = _ref2 => {
  let {
    href,
    onClick,
    children,
    target,
    icon,
    className,
    destructive,
    disabled,
    dense,
    active,
    dataTest,
    chevron,
    value,
    label,
    showSubMenu,
    toggleSubMenu
  } = _ref2;
  const menuItemRef = (0, _react.useRef)();
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("li", {
    ref: menuItemRef,
    "data-test": dataTest,
    className: "jsx-".concat(_menuItemStyles.default.__hash) + " " + ((0, _classnames.default)(className, {
      destructive,
      disabled,
      dense,
      active: active || showSubMenu,
      'with-chevron': chevron
    }) || "")
  }, /*#__PURE__*/_react.default.createElement("a", {
    target: target,
    href: !disabled && href ? href : undefined,
    onClick: !disabled ? createOnClickHandler({
      onClick,
      toggleSubMenu,
      isLink: !!href,
      value
    }) : undefined,
    className: "jsx-".concat(_menuItemStyles.default.__hash)
  }, icon && /*#__PURE__*/_react.default.createElement("span", {
    className: "jsx-".concat(_menuItemStyles.default.__hash) + " " + "icon"
  }, icon), /*#__PURE__*/_react.default.createElement("span", {
    className: "jsx-".concat(_menuItemStyles.default.__hash) + " " + "label"
  }, label), (chevron || children) && /*#__PURE__*/_react.default.createElement("span", {
    className: "jsx-".concat(_menuItemStyles.default.__hash) + " " + "chevron"
  }, /*#__PURE__*/_react.default.createElement(_uiIcons.IconChevronRight24, null))), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: _menuItemStyles.default.__hash
  }, _menuItemStyles.default)), children && showSubMenu && /*#__PURE__*/_react.default.createElement(_portal.Portal, null, /*#__PURE__*/_react.default.createElement(_popper.Popper, {
    placement: "right-start",
    reference: menuItemRef
  }, /*#__PURE__*/_react.default.createElement(_index.FlyoutMenu, {
    dense: dense
  }, children))));
};

exports.MenuItem = MenuItem;
MenuItem.defaultProps = {
  dataTest: 'dhis2-uicore-menuitem'
};
MenuItem.propTypes = {
  active: _propTypes.default.bool,
  chevron: _propTypes.default.bool,

  /**
   * Nested menu items can become submenus.
   * See `showSubMenu` and `toggleSubMenu` props, and 'Children' demo
   */
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,
  dense: _propTypes.default.bool,
  destructive: _propTypes.default.bool,
  disabled: _propTypes.default.bool,

  /** For using menu item as a link */
  href: _propTypes.default.string,

  /** An icon for the left side of the menu item */
  icon: _propTypes.default.node,

  /** Text in the menu item */
  label: _propTypes.default.node,

  /** When true, nested menu items are shown in a Popper */
  showSubMenu: _propTypes.default.bool,

  /** For using menu item as a link */
  target: _propTypes.default.string,

  /** On click, this function is called (without args) */
  toggleSubMenu: _propTypes.default.func,

  /** Value associated with item. Passed as an argument to onClick handler. */
  value: _propTypes.default.string,

  /** Click handler called with signature `({ value: string }, event)` */
  onClick: _propTypes.default.func
};