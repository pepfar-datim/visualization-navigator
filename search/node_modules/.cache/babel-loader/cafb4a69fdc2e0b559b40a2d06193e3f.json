{"ast":null,"code":"import { useState, useRef, useCallback, useDebugValue } from 'react';\nimport { useQuery, setLogger } from 'react-query';\nimport { mergeAndCompareVariables } from './mergeAndCompareVariables';\nimport { useDataEngine } from './useDataEngine';\nimport { useStaticInput } from './useStaticInput';\n\nconst noop = () => {\n  /**\n   * Used to silence the default react-query logger. Eventually we\n   * could expose the setLogger functionality and remove the call\n   * to setLogger here.\n   */\n};\n\nsetLogger({\n  log: noop,\n  warn: noop,\n  error: noop\n});\nexport const useDataQuery = function (query) {\n  let {\n    onComplete: userOnSuccess,\n    onError: userOnError,\n    variables: initialVariables = {},\n    lazy: initialLazy = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const [staticQuery] = useStaticInput(query, {\n    warn: true,\n    name: 'query'\n  });\n  const [variablesUpdateCount, setVariablesUpdateCount] = useState(0);\n  const queryState = useRef({\n    variables: initialVariables,\n    variablesHash: undefined,\n    enabled: !initialLazy,\n    refetchCallback: undefined\n  });\n  /**\n   * Display current query state and refetch count in React DevTools\n   */\n\n  useDebugValue({\n    variablesUpdateCount,\n    enabled: queryState.current.enabled,\n    variables: queryState.current.variables\n  }, debugValue => JSON.stringify(debugValue));\n  /**\n   * User callbacks and refetch handling\n   */\n\n  const onSuccess = data => {\n    var _queryState$current$r, _queryState$current;\n\n    (_queryState$current$r = (_queryState$current = queryState.current).refetchCallback) === null || _queryState$current$r === void 0 ? void 0 : _queryState$current$r.call(_queryState$current, data);\n    queryState.current.refetchCallback = undefined;\n\n    if (userOnSuccess) {\n      userOnSuccess(data);\n    }\n  };\n\n  const onError = error => {\n    // If we'd want to reject on errors we'd call the cb with the error here\n    queryState.current.refetchCallback = undefined;\n\n    if (userOnError) {\n      userOnError(error);\n    }\n  };\n  /**\n   * Setting up react-query\n   */\n\n\n  const engine = useDataEngine();\n  const queryKey = [staticQuery, queryState.current.variables];\n\n  const queryFn = () => engine.query(staticQuery, {\n    variables: queryState.current.variables\n  });\n\n  const {\n    isIdle,\n    isFetching,\n    isLoading,\n    error,\n    data,\n    refetch: queryRefetch\n  } = useQuery(queryKey, queryFn, {\n    enabled: queryState.current.enabled,\n    onSuccess,\n    onError\n  });\n  /**\n   * Refetch allows a user to update the variables or just\n   * trigger a refetch of the query with the current variables.\n   *\n   * We're using useCallback to make the identity of the function\n   * as stable as possible, so that it won't trigger excessive\n   * rerenders when used for side-effects.\n   */\n\n  const refetch = useCallback(newVariables => {\n    const {\n      identical,\n      mergedVariables,\n      mergedVariablesHash\n    } = mergeAndCompareVariables(queryState.current.variables, newVariables, queryState.current.variablesHash);\n    /**\n     * If there are no updates that will trigger an automatic refetch\n     * we'll need to call react-query's refetch directly\n     */\n\n    if (queryState.current.enabled && identical) {\n      return queryRefetch({\n        cancelRefetch: true,\n        throwOnError: false\n      }).then(_ref => {\n        let {\n          data\n        } = _ref;\n        return data;\n      });\n    }\n\n    queryState.current.variables = mergedVariables;\n    queryState.current.variablesHash = mergedVariablesHash;\n    queryState.current.enabled = true; // This promise does not currently reject on errors\n\n    const refetchPromise = new Promise(resolve => {\n      queryState.current.refetchCallback = data => {\n        resolve(data);\n      };\n    }); // Trigger a react-query refetch by incrementing variablesUpdateCount state\n\n    setVariablesUpdateCount(prevCount => prevCount + 1);\n    return refetchPromise;\n  }, [queryRefetch]);\n  /**\n   * react-query returns null or an error, but we return undefined\n   * or an error, so this ensures consistency with the other types.\n   */\n\n  const ourError = error || undefined;\n  return {\n    engine,\n    // A query is idle if it is lazy and no initial data is available.\n    called: !isIdle,\n    loading: isLoading,\n    fetching: isFetching,\n    error: ourError,\n    data,\n    refetch\n  };\n};","map":{"version":3,"names":["useState","useRef","useCallback","useDebugValue","useQuery","setLogger","mergeAndCompareVariables","useDataEngine","useStaticInput","noop","log","warn","error","useDataQuery","query","onComplete","userOnSuccess","onError","userOnError","variables","initialVariables","lazy","initialLazy","staticQuery","name","variablesUpdateCount","setVariablesUpdateCount","queryState","variablesHash","undefined","enabled","refetchCallback","current","debugValue","JSON","stringify","onSuccess","data","_queryState$current$r","_queryState$current","call","engine","queryKey","queryFn","isIdle","isFetching","isLoading","refetch","queryRefetch","newVariables","identical","mergedVariables","mergedVariablesHash","cancelRefetch","throwOnError","then","refetchPromise","Promise","resolve","prevCount","ourError","called","loading","fetching"],"sources":["/home/jake/SRC/visualization-navigator-ts/node_modules/@dhis2/app-runtime/node_modules/@dhis2/app-service-data/build/es/react/hooks/useDataQuery.js"],"sourcesContent":["import { useState, useRef, useCallback, useDebugValue } from 'react';\nimport { useQuery, setLogger } from 'react-query';\nimport { mergeAndCompareVariables } from './mergeAndCompareVariables';\nimport { useDataEngine } from './useDataEngine';\nimport { useStaticInput } from './useStaticInput';\n\nconst noop = () => {\n  /**\n   * Used to silence the default react-query logger. Eventually we\n   * could expose the setLogger functionality and remove the call\n   * to setLogger here.\n   */\n};\n\nsetLogger({\n  log: noop,\n  warn: noop,\n  error: noop\n});\nexport const useDataQuery = (query, {\n  onComplete: userOnSuccess,\n  onError: userOnError,\n  variables: initialVariables = {},\n  lazy: initialLazy = false\n} = {}) => {\n  const [staticQuery] = useStaticInput(query, {\n    warn: true,\n    name: 'query'\n  });\n  const [variablesUpdateCount, setVariablesUpdateCount] = useState(0);\n  const queryState = useRef({\n    variables: initialVariables,\n    variablesHash: undefined,\n    enabled: !initialLazy,\n    refetchCallback: undefined\n  });\n  /**\n   * Display current query state and refetch count in React DevTools\n   */\n\n  useDebugValue({\n    variablesUpdateCount,\n    enabled: queryState.current.enabled,\n    variables: queryState.current.variables\n  }, debugValue => JSON.stringify(debugValue));\n  /**\n   * User callbacks and refetch handling\n   */\n\n  const onSuccess = data => {\n    var _queryState$current$r, _queryState$current;\n\n    (_queryState$current$r = (_queryState$current = queryState.current).refetchCallback) === null || _queryState$current$r === void 0 ? void 0 : _queryState$current$r.call(_queryState$current, data);\n    queryState.current.refetchCallback = undefined;\n\n    if (userOnSuccess) {\n      userOnSuccess(data);\n    }\n  };\n\n  const onError = error => {\n    // If we'd want to reject on errors we'd call the cb with the error here\n    queryState.current.refetchCallback = undefined;\n\n    if (userOnError) {\n      userOnError(error);\n    }\n  };\n  /**\n   * Setting up react-query\n   */\n\n\n  const engine = useDataEngine();\n  const queryKey = [staticQuery, queryState.current.variables];\n\n  const queryFn = () => engine.query(staticQuery, {\n    variables: queryState.current.variables\n  });\n\n  const {\n    isIdle,\n    isFetching,\n    isLoading,\n    error,\n    data,\n    refetch: queryRefetch\n  } = useQuery(queryKey, queryFn, {\n    enabled: queryState.current.enabled,\n    onSuccess,\n    onError\n  });\n  /**\n   * Refetch allows a user to update the variables or just\n   * trigger a refetch of the query with the current variables.\n   *\n   * We're using useCallback to make the identity of the function\n   * as stable as possible, so that it won't trigger excessive\n   * rerenders when used for side-effects.\n   */\n\n  const refetch = useCallback(newVariables => {\n    const {\n      identical,\n      mergedVariables,\n      mergedVariablesHash\n    } = mergeAndCompareVariables(queryState.current.variables, newVariables, queryState.current.variablesHash);\n    /**\n     * If there are no updates that will trigger an automatic refetch\n     * we'll need to call react-query's refetch directly\n     */\n\n    if (queryState.current.enabled && identical) {\n      return queryRefetch({\n        cancelRefetch: true,\n        throwOnError: false\n      }).then(({\n        data\n      }) => data);\n    }\n\n    queryState.current.variables = mergedVariables;\n    queryState.current.variablesHash = mergedVariablesHash;\n    queryState.current.enabled = true; // This promise does not currently reject on errors\n\n    const refetchPromise = new Promise(resolve => {\n      queryState.current.refetchCallback = data => {\n        resolve(data);\n      };\n    }); // Trigger a react-query refetch by incrementing variablesUpdateCount state\n\n    setVariablesUpdateCount(prevCount => prevCount + 1);\n    return refetchPromise;\n  }, [queryRefetch]);\n  /**\n   * react-query returns null or an error, but we return undefined\n   * or an error, so this ensures consistency with the other types.\n   */\n\n  const ourError = error || undefined;\n  return {\n    engine,\n    // A query is idle if it is lazy and no initial data is available.\n    called: !isIdle,\n    loading: isLoading,\n    fetching: isFetching,\n    error: ourError,\n    data,\n    refetch\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}