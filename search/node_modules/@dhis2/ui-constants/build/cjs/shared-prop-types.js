"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.statusPropType = exports.statusArgType = exports.sizePropType = exports.sizeArgType = exports.popperReferencePropType = exports.popperReferenceArgType = exports.popperPlacementPropType = exports.popperPlacementArgType = exports.insideAlignmentPropType = exports.insideAlignmentArgType = exports.buttonVariantPropType = exports.buttonVariantArgType = void 0;

var _propTypes = require("@dhis2/prop-types");

var _propTypes2 = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Status propType
 * @return {PropType} Mutually exclusive status: valid/warning/error
 */
const statusPropType = (0, _propTypes.mutuallyExclusive)(['valid', 'warning', 'error'], _propTypes2.default.bool); // Exported for storybook

exports.statusPropType = statusPropType;
const statusArgType = {
  table: {
    type: {
      summary: 'bool',
      detail: "'valid', 'warning', and 'error' are mutually exclusive props"
    }
  },
  control: {
    type: 'boolean'
  }
};
/**
 * Button variant propType
 * @return {PropType} Mutually exclusive variants:
 * primary/secondary/destructive
 */

exports.statusArgType = statusArgType;
const buttonVariantPropType = (0, _propTypes.mutuallyExclusive)(['primary', 'secondary', 'destructive'], _propTypes2.default.bool);
exports.buttonVariantPropType = buttonVariantPropType;
const buttonVariantArgType = {
  // No description because it should be set for the component description
  table: {
    type: {
      summary: 'bool',
      detail: "'primary', 'secondary', and 'destructive' are mutually exclusive props"
    }
  },
  control: {
    type: 'boolean'
  }
};
/**
 * Size variant propType
 * @return {PropType} Mutually exclusive variants:
 * small/large
 */

exports.buttonVariantArgType = buttonVariantArgType;
const sizePropType = (0, _propTypes.mutuallyExclusive)(['small', 'large', 'extrasmall', 'fluid'], _propTypes2.default.bool);
exports.sizePropType = sizePropType;
const sizeArgType = {
  // No description because it should be set in the component description
  table: {
    type: {
      summary: 'bool',
      detail: 'size props are mutually exclusive'
    }
  },
  control: {
    type: 'boolean'
  }
};
/**
 * Inside alignment props
 * @return {PropType} PropType that validates the inside alignment.
 */

exports.sizeArgType = sizeArgType;

const insideAlignmentPropType = _propTypes2.default.oneOf(['top', 'middle', 'bottom']);

exports.insideAlignmentPropType = insideAlignmentPropType;
const insideAlignmentArgType = {
  description: 'Inside alignment of the component',
  table: {
    type: {
      summary: "'top' | 'middle' | 'bottom'"
    }
  },
  control: {
    type: 'select',
    options: ['top', 'middle', 'bottom']
  }
};
/**
 * Placement properties against reference element
 * @return {PropType} PropType that validates placements.
 */

exports.insideAlignmentArgType = insideAlignmentArgType;

const popperPlacementPropType = _propTypes2.default.oneOf(['auto', 'auto-start', 'auto-end', 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'right', 'right-start', 'right-end', 'left', 'left-start', 'left-end']);

exports.popperPlacementPropType = popperPlacementPropType;
const popperPlacementArgType = {
  description: 'Placement properties relative to reference element',
  table: {
    type: {
      summary: 'string (one of several)',
      detail: 'see options in menu'
    }
  },
  control: {
    type: 'select',
    options: ['auto', 'auto-start', 'auto-end', 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'right', 'right-start', 'right-end', 'left', 'left-start', 'left-end']
  }
};
/**
 * Either a DOM node, React ref or a virtual element
 * @return {PropType} Validate that prop is either a function or an
 * instance of an Element.
 */

exports.popperPlacementArgType = popperPlacementArgType;

const popperReferencePropType = _propTypes2.default.oneOfType([// DOM node
_propTypes2.default.instanceOf(Element), // React ref - React.useRef() or React.createRef()
_propTypes2.default.shape({
  current: _propTypes2.default.instanceOf(Element)
}), // Virtual element
_propTypes2.default.shape({
  getBoundingClientRect: _propTypes2.default.func
})]);

exports.popperReferencePropType = popperReferencePropType;
const popperReferenceArgType = {
  description: 'A reference to the element to position against: either a DOM node, React ref, \
        or an instance of an element',
  table: {
    type: {
      summary: 'DOM node | React ref | Virtual element'
    }
  },
  control: {
    type: null
  }
};
exports.popperReferenceArgType = popperReferenceArgType;