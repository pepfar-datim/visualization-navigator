import _JSXStyle from "styled-jsx/style";
import { spacers } from '@dhis2/ui-constants';
import cx from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import { findOptionChild } from '../select/index.js';

const Selection = _ref => {
  let {
    options,
    selected,
    className
  } = _ref;
  const selectedOption = findOptionChild(selected, options);

  if (!selectedOption) {
    const message = "There is no option with the value: \"".concat(selected, "\". ") + 'Make sure that the value passed to the selected ' + 'prop matches the value of an existing option.';
    throw new Error(message);
  }

  const icon = selectedOption.props.icon;
  const label = selectedOption.props.label;
  return /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["2249594316", [spacers.dp8, spacers.dp16, spacers.dp16]]]) + " " + (cx(className, 'root') || "")
  }, icon && /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["2249594316", [spacers.dp8, spacers.dp16, spacers.dp16]]]) + " " + "root-icon"
  }, icon), label, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2249594316",
    dynamic: [spacers.dp8, spacers.dp16, spacers.dp16]
  }, [".root.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}", ".root-icon.__jsx-style-dynamic-selector{margin-right:".concat(spacers.dp8, ";width:").concat(spacers.dp16, ";height:").concat(spacers.dp16, ";overflow:hidden;-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;}")]));
};

Selection.propTypes = {
  className: PropTypes.string,
  options: PropTypes.node,
  selected: PropTypes.string
};
export { Selection };