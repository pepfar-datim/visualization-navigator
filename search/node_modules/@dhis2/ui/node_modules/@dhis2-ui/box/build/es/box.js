import _JSXStyle from "styled-jsx/style";
import PropTypes from 'prop-types';
import React from 'react';
export const Box = _ref => {
  let {
    overflow,
    height,
    minHeight,
    maxHeight,
    width,
    minWidth,
    maxWidth,
    marginTop,
    children,
    dataTest,
    className
  } = _ref;
  return /*#__PURE__*/React.createElement("div", {
    "data-test": dataTest,
    className: _JSXStyle.dynamic([["3369228338", [marginTop ? "margin-top: ".concat(marginTop, ";") : '', height ? "height: ".concat(height, ";") : '', minHeight ? "min-height: ".concat(minHeight, ";") : '', maxHeight ? "max-height: ".concat(maxHeight, ";") : '', width ? "width: ".concat(width, ";") : '', minWidth ? "min-width: ".concat(minWidth, ";") : '', maxWidth ? "max-width: ".concat(maxWidth, ";") : '', overflow ? "overflow: ".concat(overflow, ";") : '']]]) + " " + (className || "")
  }, children, /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "3369228338",
    dynamic: [marginTop ? "margin-top: ".concat(marginTop, ";") : '', height ? "height: ".concat(height, ";") : '', minHeight ? "min-height: ".concat(minHeight, ";") : '', maxHeight ? "max-height: ".concat(maxHeight, ";") : '', width ? "width: ".concat(width, ";") : '', minWidth ? "min-width: ".concat(minWidth, ";") : '', maxWidth ? "max-width: ".concat(maxWidth, ";") : '', overflow ? "overflow: ".concat(overflow, ";") : '']
  }, ["div.__jsx-style-dynamic-selector{".concat(marginTop ? "margin-top: ".concat(marginTop, ";") : '', " ").concat(height ? "height: ".concat(height, ";") : '', " ").concat(minHeight ? "min-height: ".concat(minHeight, ";") : '', " ").concat(maxHeight ? "max-height: ".concat(maxHeight, ";") : '', " ").concat(width ? "width: ".concat(width, ";") : '', " ").concat(minWidth ? "min-width: ".concat(minWidth, ";") : '', " ").concat(maxWidth ? "max-width: ".concat(maxWidth, ";") : '', " ").concat(overflow ? "overflow: ".concat(overflow, ";") : '', ";}")]));
};
Box.defaultProps = {
  dataTest: 'dhis2-uicore-box'
};
Box.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  dataTest: PropTypes.string,
  height: PropTypes.string,
  marginTop: PropTypes.string,
  maxHeight: PropTypes.string,
  maxWidth: PropTypes.string,
  minHeight: PropTypes.string,
  minWidth: PropTypes.string,
  overflow: PropTypes.string,
  width: PropTypes.string
};