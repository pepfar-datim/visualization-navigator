"use strict";

var _appRuntime = require("@dhis2/app-runtime");

var _react = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

require("@testing-library/jest-dom");

var _react2 = _interopRequireWildcard(require("react"));

var _sharingAutocomplete = require("./sharing-autocomplete.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

jest.mock('../helpers/index.js', () => ({
  debounce: fn => fn
}));

const Wrapper = () => {
  const [selected, setSelected] = (0, _react2.useState)();
  return /*#__PURE__*/_react2.default.createElement(_sharingAutocomplete.SharingAutocomplete, {
    selected: selected,
    onSelection: user => setSelected(user === null || user === void 0 ? void 0 : user.displayName)
  });
};

describe('SharingAutocomplete', () => {
  it('hides autocompletion results after selection', async () => {
    const userDisplayName = 'Some User';
    const dataProviderData = {
      'sharing/search': jest.fn(() => ({
        users: [{
          id: 'user-1',
          displayName: userDisplayName
        }]
      }))
    };
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_appRuntime.CustomDataProvider, {
      data: dataProviderData
    }, /*#__PURE__*/_react2.default.createElement(Wrapper, null)));
    const searchString = userDisplayName.slice(0, 3);

    _userEvent.default.type(_react.screen.getByRole('textbox'), searchString);

    expect(_react.screen.getByRole('textbox')).toHaveValue(searchString);
    await (0, _react.waitFor)(() => _react.screen.getByRole('listitem'));

    _userEvent.default.click(_react.screen.getByRole('listitem').querySelector('a'));

    expect(_react.screen.getByRole('textbox')).toHaveValue(userDisplayName);

    try {
      await (0, _react.waitFor)(() => _react.screen.getByRole('listitem'), {
        timeout: 1
      });
    } catch (error) {
      if (!error.message.startsWith('Unable to find role="listitem"')) {
        throw error;
      }
    }

    expect(_react.screen.queryByRole('listitem')).not.toBeInTheDocument();
  });
});