"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataProvider = exports.queryClientOptions = void 0;

var _appServiceConfig = require("@dhis2/app-service-config");

var _react = _interopRequireDefault(require("react"));

var _reactQuery = require("react-query");

var _engine = require("../../engine");

var _links = require("../../links");

var _DataContext = require("../context/DataContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const queryClientOptions = {
  defaultOptions: {
    queries: {
      // Disable automatic error retries
      retry: false,
      // Retry on mount if query has errored
      retryOnMount: true,
      // Refetch on mount if data is stale
      refetchOnMount: true,
      // Don't refetch when the window regains focus
      refetchOnWindowFocus: false,
      // Don't refetch after connection issues
      refetchOnReconnect: false
    }
  }
};
exports.queryClientOptions = queryClientOptions;
const queryClient = new _reactQuery.QueryClient(queryClientOptions);

const DataProvider = props => {
  const config = { ...(0, _appServiceConfig.useConfig)(),
    ...props
  };
  const link = new _links.RestAPILink(config);
  const engine = new _engine.DataEngine(link);
  const context = {
    engine
  };
  return /*#__PURE__*/_react.default.createElement(_reactQuery.QueryClientProvider, {
    client: queryClient
  }, /*#__PURE__*/_react.default.createElement(_DataContext.DataContext.Provider, {
    value: context
  }, props.children));
};

exports.DataProvider = DataProvider;