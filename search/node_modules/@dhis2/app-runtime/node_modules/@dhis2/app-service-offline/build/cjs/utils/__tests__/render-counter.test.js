"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Rerenderer = void 0;

var _react = require("@testing-library/react");

var _react2 = _interopRequireDefault(require("react"));

var _renderCounter = require("../render-counter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const renderCounts = {};

const Rerenderer = () => {
  const [, setState] = _react2.default.useState(true);

  const toggleState = () => setState(prevState => !prevState);

  return /*#__PURE__*/_react2.default.createElement(_react2.default.Fragment, null, /*#__PURE__*/_react2.default.createElement("button", {
    onClick: toggleState,
    role: "button"
  }), /*#__PURE__*/_react2.default.createElement(_renderCounter.RenderCounter, {
    id: 'rc1',
    countsObj: renderCounts
  }));
};

exports.Rerenderer = Rerenderer;
afterEach(() => {
  (0, _renderCounter.resetRenderCounts)(renderCounts);
});
it('increments the counter when rerendered', () => {
  (0, _react.render)( /*#__PURE__*/_react2.default.createElement(Rerenderer, null));
  const {
    getByTestId,
    getByRole
  } = _react.screen;
  expect(getByTestId('rc1')).toHaveTextContent('1');
  (0, _react.act)(() => {
    _react.fireEvent.click(getByRole('button'));
  });
  expect(getByTestId('rc1')).toHaveTextContent('2');
  (0, _react.act)(() => {
    _react.fireEvent.click(getByRole('button'));
  });
  expect(getByTestId('rc1')).toHaveTextContent('3');
});
it('resets the render counter successfully', () => {
  (0, _react.render)( /*#__PURE__*/_react2.default.createElement(Rerenderer, null));
  expect(_react.screen.getByTestId('rc1')).toHaveTextContent('1');
});