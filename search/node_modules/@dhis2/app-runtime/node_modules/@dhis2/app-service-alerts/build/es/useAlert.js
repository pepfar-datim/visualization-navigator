import { useContext, useRef, useCallback } from 'react';
import { AlertsManagerContext } from './AlertsManagerContext';
export const useAlert = (message, options = {}) => {
  const {
    add
  } = useContext(AlertsManagerContext);
  const alertRef = useRef(null);
  const show = useCallback(props => {
    const resolvedMessage = String(typeof message === 'function' ? message(props) : message);
    const resolvedOptions = typeof options === 'function' ? options(props) : options;
    alertRef.current = add({
      message: resolvedMessage,
      options: resolvedOptions
    }, alertRef);
  }, [add, message, options]);
  const hide = useCallback(() => {
    var _alertRef$current, _alertRef$current$rem;

    (_alertRef$current = alertRef.current) === null || _alertRef$current === void 0 ? void 0 : (_alertRef$current$rem = _alertRef$current.remove) === null || _alertRef$current$rem === void 0 ? void 0 : _alertRef$current$rem.call(_alertRef$current);
  }, []);
  return {
    show,
    hide
  };
};