{"ast":null,"code":"var instanceOfComponentFactory = function instanceOfComponentFactory(Component, isRequired) {\n  return function (props, propSelector, // normally a propName, but when wrapped in arrayOf an index\n  componentName, _location, propFullName // normally null but a string like \"propName[index]\" when wrapped in arrayOf\n  ) {\n    var child = props[propSelector];\n    var propName = propFullName || propSelector;\n    var hasRenderableChild = child === 0 || !!child;\n    var baseMsg = \"Invalid prop `\".concat(propName, \"` supplied to `\").concat(componentName, \"`,\");\n\n    if (Array.isArray(child)) {\n      return new Error(\"\".concat(baseMsg, \" expected a single component instance but received an array.\"));\n    }\n\n    if (!hasRenderableChild) {\n      if (isRequired) {\n        return new Error(\"\".concat(baseMsg, \" this is a required property but its value is `\").concat(child, \"`.\"));\n      } else {\n        return null;\n      }\n    }\n\n    var expectedComponentName = typeof Component === 'string' ? Component : Component.name || Component.displayName;\n    var foundComponentName = typeof child.type !== 'string' ? child.type && child.type.name ? child.type.name : child.type : child.type && (child.type.name || child.type.displayName);\n\n    if (!foundComponentName) {\n      return new Error(\"\".concat(baseMsg, \" could not read component name. Property value does not look like a component instance.\"));\n    }\n\n    if (child.type !== Component) {\n      return new Error(\"\".concat(baseMsg, \" expected an instance of `\").concat(expectedComponentName, \"` but found an instance of `\").concat(foundComponentName, \"`.\"));\n    }\n\n    return null;\n  };\n};\n/**\n * Ensure the prop value is an instance of a certain component\n * @param {function|string} Component - The component that is expected. Can either be a React component,\n * or a string for built-in components, such as 'span', 'div', etc.\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import { instanceOfComponent } from '@dhis2/prop-types'\n * import { Button } from './Button'\n *\n * const ButtonWrap = ({ children }) => <div>{children}</div>\n * // This would allow the ButtonWrap to be empty\n * ButtonWrap.propTypes = {\n *     children: instanceOfComponent(Button)\n * }\n *\n * // Enforce presence of a Button instance\n * ButtonWrap.propTypes = {\n *     children: instanceOfComponent(Button).isRequired\n * }\n *\n * // Enforce presence of a multiple children, all Button instances\n * ButtonWrap.propTypes = {\n *     children: proptypes.arrayOf(instanceOfComponent(Button)).isRequired\n * }\n */\n\n\nexport function instanceOfComponent(Component) {\n  var fn = instanceOfComponentFactory(Component, false);\n  fn.isRequired = instanceOfComponentFactory(Component, true);\n  return fn;\n}","map":{"version":3,"names":["instanceOfComponentFactory","Component","isRequired","props","propSelector","componentName","_location","propFullName","child","propName","hasRenderableChild","baseMsg","Array","isArray","Error","expectedComponentName","name","displayName","foundComponentName","type","instanceOfComponent","fn"],"sources":["/home/jake/SRC/visualization-navigator-ts/node_modules/@dhis2/prop-types/build/es/instanceOfComponent.js"],"sourcesContent":["const instanceOfComponentFactory = (Component, isRequired) => (props, propSelector, // normally a propName, but when wrapped in arrayOf an index\ncomponentName, _location, propFullName // normally null but a string like \"propName[index]\" when wrapped in arrayOf\n) => {\n  const child = props[propSelector];\n  const propName = propFullName || propSelector;\n  const hasRenderableChild = child === 0 || !!child;\n  const baseMsg = `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`,`;\n\n  if (Array.isArray(child)) {\n    return new Error(`${baseMsg} expected a single component instance but received an array.`);\n  }\n\n  if (!hasRenderableChild) {\n    if (isRequired) {\n      return new Error(`${baseMsg} this is a required property but its value is \\`${child}\\`.`);\n    } else {\n      return null;\n    }\n  }\n\n  const expectedComponentName = typeof Component === 'string' ? Component : Component.name || Component.displayName;\n  const foundComponentName = typeof child.type !== 'string' ? child.type && child.type.name ? child.type.name : child.type : child.type && (child.type.name || child.type.displayName);\n\n  if (!foundComponentName) {\n    return new Error(`${baseMsg} could not read component name. Property value does not look like a component instance.`);\n  }\n\n  if (child.type !== Component) {\n    return new Error(`${baseMsg} expected an instance of \\`${expectedComponentName}\\` but found an instance of \\`${foundComponentName}\\`.`);\n  }\n\n  return null;\n};\n/**\n * Ensure the prop value is an instance of a certain component\n * @param {function|string} Component - The component that is expected. Can either be a React component,\n * or a string for built-in components, such as 'span', 'div', etc.\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import { instanceOfComponent } from '@dhis2/prop-types'\n * import { Button } from './Button'\n *\n * const ButtonWrap = ({ children }) => <div>{children}</div>\n * // This would allow the ButtonWrap to be empty\n * ButtonWrap.propTypes = {\n *     children: instanceOfComponent(Button)\n * }\n *\n * // Enforce presence of a Button instance\n * ButtonWrap.propTypes = {\n *     children: instanceOfComponent(Button).isRequired\n * }\n *\n * // Enforce presence of a multiple children, all Button instances\n * ButtonWrap.propTypes = {\n *     children: proptypes.arrayOf(instanceOfComponent(Button)).isRequired\n * }\n */\n\n\nexport function instanceOfComponent(Component) {\n  const fn = instanceOfComponentFactory(Component, false);\n  fn.isRequired = instanceOfComponentFactory(Component, true);\n  return fn;\n}"],"mappings":"AAAA,IAAMA,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,SAAD,EAAYC,UAAZ;EAAA,OAA2B,UAACC,KAAD,EAAQC,YAAR,EAAsB;EACpFC,aAD8D,EAC/CC,SAD+C,EACpCC,YADoC,CACvB;EADuB,EAEzD;IACH,IAAMC,KAAK,GAAGL,KAAK,CAACC,YAAD,CAAnB;IACA,IAAMK,QAAQ,GAAGF,YAAY,IAAIH,YAAjC;IACA,IAAMM,kBAAkB,GAAGF,KAAK,KAAK,CAAV,IAAe,CAAC,CAACA,KAA5C;IACA,IAAMG,OAAO,2BAAqBF,QAArB,4BAAiDJ,aAAjD,OAAb;;IAEA,IAAIO,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;MACxB,OAAO,IAAIM,KAAJ,WAAaH,OAAb,kEAAP;IACD;;IAED,IAAI,CAACD,kBAAL,EAAyB;MACvB,IAAIR,UAAJ,EAAgB;QACd,OAAO,IAAIY,KAAJ,WAAaH,OAAb,4DAAuEH,KAAvE,QAAP;MACD,CAFD,MAEO;QACL,OAAO,IAAP;MACD;IACF;;IAED,IAAMO,qBAAqB,GAAG,OAAOd,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4CA,SAAS,CAACe,IAAV,IAAkBf,SAAS,CAACgB,WAAtG;IACA,IAAMC,kBAAkB,GAAG,OAAOV,KAAK,CAACW,IAAb,KAAsB,QAAtB,GAAiCX,KAAK,CAACW,IAAN,IAAcX,KAAK,CAACW,IAAN,CAAWH,IAAzB,GAAgCR,KAAK,CAACW,IAAN,CAAWH,IAA3C,GAAkDR,KAAK,CAACW,IAAzF,GAAgGX,KAAK,CAACW,IAAN,KAAeX,KAAK,CAACW,IAAN,CAAWH,IAAX,IAAmBR,KAAK,CAACW,IAAN,CAAWF,WAA7C,CAA3H;;IAEA,IAAI,CAACC,kBAAL,EAAyB;MACvB,OAAO,IAAIJ,KAAJ,WAAaH,OAAb,6FAAP;IACD;;IAED,IAAIH,KAAK,CAACW,IAAN,KAAelB,SAAnB,EAA8B;MAC5B,OAAO,IAAIa,KAAJ,WAAaH,OAAb,uCAAkDI,qBAAlD,yCAAwGG,kBAAxG,QAAP;IACD;;IAED,OAAO,IAAP;EACD,CAhCkC;AAAA,CAAnC;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASE,mBAAT,CAA6BnB,SAA7B,EAAwC;EAC7C,IAAMoB,EAAE,GAAGrB,0BAA0B,CAACC,SAAD,EAAY,KAAZ,CAArC;EACAoB,EAAE,CAACnB,UAAH,GAAgBF,0BAA0B,CAACC,SAAD,EAAY,IAAZ,CAA1C;EACA,OAAOoB,EAAP;AACD"},"metadata":{},"sourceType":"module"}