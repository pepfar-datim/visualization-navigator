import _JSXStyle from "styled-jsx/style";
import { Divider } from '@dhis2-ui/divider';
import { SingleSelectField, SingleSelectOption } from '@dhis2-ui/select';
import { useOnlineStatus } from '@dhis2/app-runtime';
import { colors } from '@dhis2/ui-constants';
import PropTypes from 'prop-types';
import React, { useContext } from 'react';
import { SHARE_TARGET_PUBLIC, SHARE_TARGET_GROUP, SHARE_TARGET_USER, ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT } from '../constants.js';
import { DestructiveSelectOption } from '../destructive-select-option/index.js';
import { FetchingContext } from '../fetching-context/index.js';
import { isRemovableTarget } from '../helpers/index.js';
import i18n from '../locales/index.js';
import { ListItemContext } from './list-item-context.js';
import { ListItemIcon } from './list-item-icon.js';
export const ListItem = _ref => {
  let {
    name,
    target,
    access,
    accessOptions,
    disabled,
    onChange,
    onRemove
  } = _ref;
  const isFetching = useContext(FetchingContext);
  const {
    offline
  } = useOnlineStatus();
  const valueToLabel = {
    ACCESS_NONE: i18n.t('No access'),
    ACCESS_VIEW_ONLY: i18n.t('View only'),
    ACCESS_VIEW_AND_EDIT: i18n.t('View and edit')
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["2357183757", [colors.grey900]]]) + " " + "wrapper"
  }, /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["2357183757", [colors.grey900]]]) + " " + "details"
  }, /*#__PURE__*/React.createElement(ListItemIcon, {
    target: target,
    name: name
  }), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["2357183757", [colors.grey900]]]) + " " + "details-text"
  }, /*#__PURE__*/React.createElement("p", {
    className: _JSXStyle.dynamic([["2357183757", [colors.grey900]]]) + " " + "details-name"
  }, name), /*#__PURE__*/React.createElement(ListItemContext, {
    access: access
  }))), /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["2357183757", [colors.grey900]]]) + " " + "select"
  }, /*#__PURE__*/React.createElement(SingleSelectField, {
    disabled: disabled || offline || isFetching,
    prefix: i18n.t('Metadata'),
    selected: access,
    helpText: offline ? i18n.t('Not available offline') : '',
    onChange: _ref2 => {
      let {
        selected
      } = _ref2;
      return onChange(selected);
    }
  }, accessOptions.map(value => /*#__PURE__*/React.createElement(SingleSelectOption, {
    key: value,
    label: valueToLabel[value],
    value: value,
    active: value === access
  })), isRemovableTarget(target) && /*#__PURE__*/React.createElement(DestructiveSelectOption, {
    onClick: onRemove,
    label: i18n.t('Remove access')
  })))), /*#__PURE__*/React.createElement(Divider, null), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2357183757",
    dynamic: [colors.grey900]
  }, [".wrapper.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;padding:4px 8px;}", ".details.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:2;-ms-flex:2;flex:2;}", ".details-text.__jsx-style-dynamic-selector{margin-left:8px;}", ".details-name.__jsx-style-dynamic-selector{font-size:15px;font-weight:500;color:".concat(colors.grey900, ";margin:0;padding:0;}"), ".select.__jsx-style-dynamic-selector{-webkit-flex:1;-ms-flex:1;flex:1;}"]));
};
ListItem.propTypes = {
  access: PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT]).isRequired,
  accessOptions: PropTypes.arrayOf(PropTypes.oneOf([ACCESS_NONE, ACCESS_VIEW_ONLY, ACCESS_VIEW_AND_EDIT])).isRequired,
  name: PropTypes.string.isRequired,
  target: PropTypes.oneOf([SHARE_TARGET_PUBLIC, SHARE_TARGET_GROUP, SHARE_TARGET_USER]).isRequired,
  onChange: PropTypes.func.isRequired,
  disabled: PropTypes.bool,
  onRemove: PropTypes.func
};