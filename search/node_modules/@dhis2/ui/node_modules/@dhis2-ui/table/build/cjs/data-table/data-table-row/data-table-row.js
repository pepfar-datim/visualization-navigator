"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataTableRow = void 0;

var _propTypes = require("@dhis2/prop-types");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _index = require("../table-elements/index.js");

var _dataTableRowStyles = _interopRequireDefault(require("./data-table-row.styles.js"));

var _dragHandleCell = require("./drag-handle-cell.js");

var _expandHandleCell = require("./expand-handle-cell.js");

var _expandedRow = require("./expanded-row.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DataTableRow = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
  let {
    children,
    className,
    dataTest,
    expandableContent,
    expanded,
    selected,
    draggable,
    role,
    onExpandToggle
  } = _ref;
  const [isHoveringExpandedContent, setIsHoveringExpandedContent] = (0, _react.useState)(false);
  const classes = (0, _classnames.default)(className, _dataTableRowStyles.default.className, {
    expanded,
    selected,
    draggable,
    isHoveringExpandedContent
  });

  const childCount = _react.default.Children.count(children);

  const colSpan = String(draggable || expandableContent ? childCount + 1 : childCount);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_index.TableRow, {
    ref: ref,
    className: classes,
    dataTest: dataTest,
    selected: selected,
    draggable: draggable,
    role: role
  }, draggable && /*#__PURE__*/_react.default.createElement(_dragHandleCell.DragHandleCell, null), expandableContent && /*#__PURE__*/_react.default.createElement(_expandHandleCell.ExpandHandleCell, {
    expanded: expanded,
    onClick: onExpandToggle
  }), children, _dataTableRowStyles.default.styles), expandableContent && expanded && /*#__PURE__*/_react.default.createElement(_expandedRow.ExpandedRow, {
    className: className,
    dataTest: dataTest,
    setIsHoveringExpandedContent: setIsHoveringExpandedContent,
    colSpan: colSpan,
    selected: selected
  }, expandableContent));
});
exports.DataTableRow = DataTableRow;
DataTableRow.displayName = 'DataTableRow';
DataTableRow.defaultProps = {
  dataTest: 'dhis2-uicore-datatablerow'
};
DataTableRow.propTypes = {
  /** Should be `<DataTableCell>` or `<DataTableCellHead>` components */
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  dataTest: _propTypes2.default.string,

  /** Renders and additional table cell with drag icon and applies draggable styles */
  draggable: _propTypes2.default.bool,

  /** This content will be rendered into an additional row with fullwidth cell and the presence of this prop will display an additional table cell with expand icon */
  expandableContent: (0, _propTypes.requiredIf)(props => props.onExpandToggle, _propTypes2.default.node),

  /** Toggles expand icon (up/down) and expandable content visibility */
  expanded: _propTypes2.default.bool,
  role: _propTypes2.default.string,

  /** Adds a green background color */
  selected: _propTypes2.default.bool,

  /** Callback for expand icon cell clicks */
  onExpandToggle: (0, _propTypes.requiredIf)(props => props.expandableContent, _propTypes2.default.func)
};