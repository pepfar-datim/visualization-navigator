import { act, fireEvent, render, screen } from '@testing-library/react';
import React from 'react';
import { RenderCounter, resetRenderCounts } from '../render-counter';
const renderCounts = {};
export const Rerenderer = () => {
  const [, setState] = React.useState(true);

  const toggleState = () => setState(prevState => !prevState);

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("button", {
    onClick: toggleState,
    role: "button"
  }), /*#__PURE__*/React.createElement(RenderCounter, {
    id: 'rc1',
    countsObj: renderCounts
  }));
};
afterEach(() => {
  resetRenderCounts(renderCounts);
});
it('increments the counter when rerendered', () => {
  render( /*#__PURE__*/React.createElement(Rerenderer, null));
  const {
    getByTestId,
    getByRole
  } = screen;
  expect(getByTestId('rc1')).toHaveTextContent('1');
  act(() => {
    fireEvent.click(getByRole('button'));
  });
  expect(getByTestId('rc1')).toHaveTextContent('2');
  act(() => {
    fireEvent.click(getByRole('button'));
  });
  expect(getByTestId('rc1')).toHaveTextContent('3');
});
it('resets the render counter successfully', () => {
  render( /*#__PURE__*/React.createElement(Rerenderer, null));
  expect(screen.getByTestId('rc1')).toHaveTextContent('1');
});