"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FileListItemWithRemove = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _index = require("../index.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class FileListItemWithRemove extends _react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleRemove", event => {
      const {
        onRemove,
        file
      } = this.props;
      onRemove({
        file
      }, event);
    });
  }

  render() {
    const {
      label,
      removeText,
      className
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_index.FileListItem, {
      label: label,
      removeText: removeText,
      onRemove: this.handleRemove,
      className: className
    });
  }

}

exports.FileListItemWithRemove = FileListItemWithRemove;
FileListItemWithRemove.propTypes = {
  label: _propTypes.default.string.isRequired,
  removeText: _propTypes.default.string.isRequired,
  onRemove: _propTypes.default.func.isRequired,
  className: _propTypes.default.string,
  file: _propTypes.default.instanceOf(File)
};