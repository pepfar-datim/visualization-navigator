"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScrollBar = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _uiIcons = require("@dhis2/ui-icons");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _animatedSideScroll = require("./animated-side-scroll.js");

var _detectHorizontalScrollbarHeight = require("./detect-horizontal-scrollbar-height.js");

var _scrollButton = require("./scroll-button.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ScrollBar extends _react.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "scrollBox", /*#__PURE__*/(0, _react.createRef)());

    _defineProperty(this, "scrollArea", /*#__PURE__*/(0, _react.createRef)());

    _defineProperty(this, "horizontalScrollBarHeight", (0, _detectHorizontalScrollbarHeight.detectHorizontalScrollbarHeight)());

    _defineProperty(this, "scrollBoxResizeObserver", null);

    _defineProperty(this, "calculateShouldHideButtons", () => {
      this.setState({
        hideScrollButtonsInitialized: false
      });
      const {
        current: scrollBox
      } = this.scrollBox;
      const {
        current: scrollArea
      } = this.scrollArea;
      const areaWidth = scrollArea.offsetWidth;
      const boxWidth = scrollBox.offsetWidth;
      const hideScrollButtons = areaWidth <= boxWidth;
      this.setState({
        hideScrollButtons
      });

      if (!hideScrollButtons) {
        if (this.state.scrolledToStart) {
          this.scrollLeft();
        }

        if (this.state.scrolledToEnd) {
          this.scrollRight();
        }
      }

      this.setState({
        hideScrollButtonsInitialized: true
      });
    });

    _defineProperty(this, "scrollRight", () => this.scroll());

    _defineProperty(this, "scrollLeft", () => this.scroll(true));

    _defineProperty(this, "animatedScrollCallback", () => {
      this.updateScrolledToStates();
      this.attachSideScrollListener();
    });

    _defineProperty(this, "updateScrolledToStates", () => {
      const {
        scrollLeft,
        offsetWidth
      } = this.scrollBox.current;
      const {
        offsetWidth: areaOffsetWidth
      } = this.scrollArea.current;
      const scrolledToStart = scrollLeft <= 0;
      const scrolledToEnd = scrollLeft + offsetWidth >= areaOffsetWidth;

      if (this.state.scrolledToStart !== scrolledToStart || this.state.scrolledToEnd !== scrolledToEnd) {
        this.setState({
          scrolledToStart,
          scrolledToEnd
        });
      }
    });

    this.state = {
      scrolledToStart: true,
      scrolledToEnd: false,
      // used to initially hide the entire content to prevent flickering
      hideScrollButtonsInitialized: false,
      // hide buttons initially to simplify calculations
      hideScrollButtons: false
    };
    this.scrollBoxResizeObserver = new ResizeObserver(this.calculateShouldHideButtons);
  }

  componentDidMount() {
    this.scrollSelectedTabIntoView();
    this.attachSideScrollListener();
    this.manageShouldHideButtons();
  }

  componentWillUnmount() {
    this.removeSideScrollListener();
    this.scrollBoxResizeObserver.disconnect();
  }

  manageShouldHideButtons() {
    const {
      current: scrollBox
    } = this.scrollBox;
    this.scrollBoxResizeObserver.observe(scrollBox);
    this.calculateShouldHideButtons();
  }

  scroll(goBackwards) {
    this.removeSideScrollListener();
    (0, _animatedSideScroll.animatedSideScroll)(this.scrollBox.current, this.animatedScrollCallback, goBackwards);
  }

  scrollSelectedTabIntoView() {
    const scrollBoxEl = this.scrollBox.current;
    const tab = scrollBoxEl.querySelector('.tab.selected');

    if (tab) {
      const tabEnd = tab.offsetLeft + tab.offsetWidth;

      if (tabEnd > scrollBoxEl.offsetWidth) {
        scrollBoxEl.scrollLeft = tabEnd - scrollBoxEl.offsetWidth;
      }
    }
  }

  attachSideScrollListener() {
    this.scrollBox.current.addEventListener('scroll', this.updateScrolledToStates);
  }

  removeSideScrollListener() {
    this.scrollBox.current.removeEventListener('scroll', this.updateScrolledToStates);
  }

  render() {
    const {
      scrolledToStart,
      scrolledToEnd,
      hideScrollButtonsInitialized,
      hideScrollButtons: hideScrollButtonsState
    } = this.state;
    const {
      children,
      className,
      dataTest
    } = this.props;
    const hideScrollButtons = !hideScrollButtonsInitialized || hideScrollButtonsState;
    return /*#__PURE__*/_react.default.createElement("div", {
      "data-test": dataTest,
      className: "jsx-191575146 " + _style.default.dynamic([["4174900658", [-this.horizontalScrollBarHeight]]]) + " " + ((0, _classnames.default)('scroll-bar', className) || "")
    }, /*#__PURE__*/_react.default.createElement(_scrollButton.ScrollButton, {
      disabled: scrolledToStart,
      onClick: this.scrollLeft,
      hidden: hideScrollButtons
    }, /*#__PURE__*/_react.default.createElement(_uiIcons.IconChevronLeft16, null)), /*#__PURE__*/_react.default.createElement("div", {
      className: "jsx-191575146 " + _style.default.dynamic([["4174900658", [-this.horizontalScrollBarHeight]]]) + " " + "scroll-box-clipper"
    }, /*#__PURE__*/_react.default.createElement("div", {
      ref: this.scrollBox,
      className: "jsx-191575146 " + _style.default.dynamic([["4174900658", [-this.horizontalScrollBarHeight]]]) + " " + "scroll-box"
    }, /*#__PURE__*/_react.default.createElement("div", {
      ref: this.scrollArea,
      className: "jsx-191575146 " + _style.default.dynamic([["4174900658", [-this.horizontalScrollBarHeight]]]) + " " + "scroll-area"
    }, children))), /*#__PURE__*/_react.default.createElement(_scrollButton.ScrollButton, {
      disabled: scrolledToEnd,
      onClick: this.scrollRight,
      hidden: hideScrollButtons
    }, /*#__PURE__*/_react.default.createElement(_uiIcons.IconChevronRight16, null)), /*#__PURE__*/_react.default.createElement(_style.default, {
      id: "4174900658",
      dynamic: [-this.horizontalScrollBarHeight]
    }, [".scroll-box.__jsx-style-dynamic-selector{margin-bottom:".concat(-this.horizontalScrollBarHeight, "px;}")]), /*#__PURE__*/_react.default.createElement(_style.default, {
      id: "191575146"
    }, [".scroll-bar.jsx-191575146{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-wrap:nowrap;-ms-flex-wrap:nowrap;flex-wrap:nowrap;}", ".scroll-box-clipper.jsx-191575146{overflow-y:hidden;-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;}", ".scroll-box.jsx-191575146{-webkit-box-flex:1;-webkit-flex-grow:1;-ms-flex-positive:1;flex-grow:1;overflow-x:scroll;-webkit-overflow-scrolling:touch;display:-ms-flexbox;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", ".scroll-box.jsx-191575146::-webkit-scrollbar{display:none;}", ".scroll-area.jsx-191575146{position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex:1 0 auto;-ms-flex:1 0 auto;flex:1 0 auto;overflow-x:hidden;}"]));
  }

}

exports.ScrollBar = ScrollBar;
ScrollBar.propTypes = {
  children: _propTypes.default.node.isRequired,
  dataTest: _propTypes.default.string.isRequired,
  className: _propTypes.default.string
};