{"ast":null,"code":"import { useConfig } from '@dhis2/app-service-config';\nimport React from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { DataEngine } from '../../engine';\nimport { RestAPILink } from '../../links';\nimport { DataContext } from '../context/DataContext';\nexport const queryClientOptions = {\n  defaultOptions: {\n    queries: {\n      // Disable automatic error retries\n      retry: false,\n      // Retry on mount if query has errored\n      retryOnMount: true,\n      // Refetch on mount if data is stale\n      refetchOnMount: true,\n      // Don't refetch when the window regains focus\n      refetchOnWindowFocus: false,\n      // Don't refetch after connection issues\n      refetchOnReconnect: false\n    }\n  }\n};\nconst queryClient = new QueryClient(queryClientOptions);\nexport const DataProvider = props => {\n  const config = { ...useConfig(),\n    ...props\n  };\n  const link = new RestAPILink(config);\n  const engine = new DataEngine(link);\n  const context = {\n    engine\n  };\n  return /*#__PURE__*/React.createElement(QueryClientProvider, {\n    client: queryClient\n  }, /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: context\n  }, props.children));\n};","map":{"version":3,"names":["useConfig","React","QueryClient","QueryClientProvider","DataEngine","RestAPILink","DataContext","queryClientOptions","defaultOptions","queries","retry","retryOnMount","refetchOnMount","refetchOnWindowFocus","refetchOnReconnect","queryClient","DataProvider","props","config","link","engine","context","createElement","client","Provider","value","children"],"sources":["/home/jake/SRC/landing-page/node_modules/@dhis2/app-runtime/node_modules/@dhis2/app-service-data/build/es/react/components/DataProvider.js"],"sourcesContent":["import { useConfig } from '@dhis2/app-service-config';\nimport React from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { DataEngine } from '../../engine';\nimport { RestAPILink } from '../../links';\nimport { DataContext } from '../context/DataContext';\nexport const queryClientOptions = {\n  defaultOptions: {\n    queries: {\n      // Disable automatic error retries\n      retry: false,\n      // Retry on mount if query has errored\n      retryOnMount: true,\n      // Refetch on mount if data is stale\n      refetchOnMount: true,\n      // Don't refetch when the window regains focus\n      refetchOnWindowFocus: false,\n      // Don't refetch after connection issues\n      refetchOnReconnect: false\n    }\n  }\n};\nconst queryClient = new QueryClient(queryClientOptions);\nexport const DataProvider = props => {\n  const config = { ...useConfig(),\n    ...props\n  };\n  const link = new RestAPILink(config);\n  const engine = new DataEngine(link);\n  const context = {\n    engine\n  };\n  return /*#__PURE__*/React.createElement(QueryClientProvider, {\n    client: queryClient\n  }, /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: context\n  }, props.children));\n};"],"mappings":"AAAA,SAASA,SAAT,QAA0B,2BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,mBAAtB,QAAiD,aAAjD;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAO,MAAMC,kBAAkB,GAAG;EAChCC,cAAc,EAAE;IACdC,OAAO,EAAE;MACP;MACAC,KAAK,EAAE,KAFA;MAGP;MACAC,YAAY,EAAE,IAJP;MAKP;MACAC,cAAc,EAAE,IANT;MAOP;MACAC,oBAAoB,EAAE,KARf;MASP;MACAC,kBAAkB,EAAE;IAVb;EADK;AADgB,CAA3B;AAgBP,MAAMC,WAAW,GAAG,IAAIb,WAAJ,CAAgBK,kBAAhB,CAApB;AACA,OAAO,MAAMS,YAAY,GAAGC,KAAK,IAAI;EACnC,MAAMC,MAAM,GAAG,EAAE,GAAGlB,SAAS,EAAd;IACb,GAAGiB;EADU,CAAf;EAGA,MAAME,IAAI,GAAG,IAAId,WAAJ,CAAgBa,MAAhB,CAAb;EACA,MAAME,MAAM,GAAG,IAAIhB,UAAJ,CAAee,IAAf,CAAf;EACA,MAAME,OAAO,GAAG;IACdD;EADc,CAAhB;EAGA,OAAO,aAAanB,KAAK,CAACqB,aAAN,CAAoBnB,mBAApB,EAAyC;IAC3DoB,MAAM,EAAER;EADmD,CAAzC,EAEjB,aAAad,KAAK,CAACqB,aAAN,CAAoBhB,WAAW,CAACkB,QAAhC,EAA0C;IACxDC,KAAK,EAAEJ;EADiD,CAA1C,EAEbJ,KAAK,CAACS,QAFO,CAFI,CAApB;AAKD,CAdM"},"metadata":{},"sourceType":"module"}