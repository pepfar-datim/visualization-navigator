"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WithIcon = exports.Small = exports.Secondary = exports.Primary = exports.Large = exports.InitialFocus = exports.Disabled = exports.Destructive = exports.Default = void 0;

var _uiConstants = require("@dhis2/ui-constants");

var _react = _interopRequireDefault(require("react"));

var _splitButton = require("./split-button.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const description = "\nSimilar to the dropdown button, but can be triggered independently of opening the contained action list. The main action may be 'Save' and the contained actions may be \"Save and add another\" and \"Save and open\".\n\n```js\nimport { SplitButton } from '@dhis2/ui'\n```\n";

window.onClick = (payload, event) => {
  console.log('onClick payload', payload);
  console.log('onClick event', event);
};

const onClick = function () {
  return window.onClick(...arguments);
};

const DropdownComponent = /*#__PURE__*/_react.default.createElement("span", null, "Dropdown component");

var _default = {
  title: 'Split Button',
  component: _splitButton.SplitButton,
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  args: {
    name: 'buttonName',
    value: 'buttonValue',
    component: DropdownComponent,
    onClick: onClick,
    children: 'Label me!'
  },
  argTypes: {
    small: { ..._uiConstants.sharedPropTypes.sizeArgType
    },
    large: { ..._uiConstants.sharedPropTypes.sizeArgType
    },
    primary: { ..._uiConstants.sharedPropTypes.buttonVariantArgType
    },
    secondary: { ..._uiConstants.sharedPropTypes.buttonVariantArgType
    },
    destructive: { ..._uiConstants.sharedPropTypes.buttonVariantArgType
    }
  }
};
exports.default = _default;

const Template = args => /*#__PURE__*/_react.default.createElement(_splitButton.SplitButton, args);

const Default = Template.bind({});
exports.Default = Default;
const Primary = Template.bind({});
exports.Primary = Primary;
Primary.args = {
  primary: true
};
Primary.parameters = {
  docs: {
    description: {
      story: "_**Note**: The dropdown components in the following examples do not appear in the right place on this page. View the following examples in the 'Canvas' tab for the correct placement._"
    }
  }
};
const Secondary = Template.bind({});
exports.Secondary = Secondary;
Secondary.args = {
  secondary: true
};
const Destructive = Template.bind({});
exports.Destructive = Destructive;
Destructive.props = {
  destructive: true
};
const Disabled = Template.bind({});
exports.Disabled = Disabled;
Disabled.args = {
  disabled: true
};
const Small = Template.bind({});
exports.Small = Small;
Small.args = {
  small: true
};
const Large = Template.bind({});
exports.Large = Large;
Large.args = {
  large: true
};
const InitialFocus = Template.bind({});
exports.InitialFocus = InitialFocus;
InitialFocus.args = {
  initialFocus: true
}; // Disable this on docs page because grabbing focus repeatedly is annoying

InitialFocus.parameters = {
  docs: {
    disable: true
  }
};
const WithIcon = Template.bind({});
exports.WithIcon = WithIcon;
WithIcon.args = {
  children: 'Children',
  component: /*#__PURE__*/_react.default.createElement("div", null, "Component"),
  icon: /*#__PURE__*/_react.default.createElement("div", null, "Icon")
};