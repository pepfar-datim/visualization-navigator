{"ast":null,"code":"import isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useCallback, useContext, useState } from 'react'; // This file creates a redux-like state management service using React context\n// that minimizes unnecessary rerenders that consume the context.\n// See more at https://github.com/amcgee/state-service-poc\n\nconst identity = state => state;\n\nexport const createStore = function () {\n  let initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const subscriptions = new Set();\n  let state = initialState;\n  return {\n    getState: () => state,\n    subscribe: callback => {\n      subscriptions.add(callback);\n    },\n    unsubscribe: callback => {\n      subscriptions.delete(callback);\n    },\n    mutate: mutation => {\n      state = mutation(state);\n\n      for (const callback of subscriptions) {\n        callback(state);\n      }\n    }\n  };\n};\nconst GlobalStateContext = /*#__PURE__*/React.createContext(createStore());\n\nconst useGlobalStateStore = () => useContext(GlobalStateContext);\n\nexport const GlobalStateProvider = _ref => {\n  let {\n    store,\n    children\n  } = _ref;\n  return /*#__PURE__*/React.createElement(GlobalStateContext.Provider, {\n    value: store\n  }, children);\n};\nGlobalStateProvider.propTypes = {\n  children: PropTypes.node,\n  store: PropTypes.shape({})\n};\nexport const useGlobalState = function () {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : identity;\n  const store = useGlobalStateStore();\n  const [selectedState, setSelectedState] = useState(selector(store.getState()));\n  useEffect(() => {\n    // NEW: deep equality check before updating\n    const callback = state => {\n      const newSelectedState = selector(state); // Second condition handles case where a selected object gets\n      // deleted, but state does not update\n\n      if (!isEqual(selectedState, newSelectedState) || selectedState === undefined) setSelectedState(newSelectedState);\n    };\n\n    store.subscribe(callback); // Make sure to update state when selector changes\n\n    callback(store.getState());\n    return () => store.unsubscribe(callback);\n  }, [store, selector]);\n  /* eslint-disable-line react-hooks/exhaustive-deps */\n\n  return [selectedState, store.mutate];\n};\nexport function useGlobalStateMutation(mutationCreator) {\n  const store = useGlobalStateStore();\n  return useCallback(function () {\n    store.mutate(mutationCreator(...arguments));\n  }, [mutationCreator, store]);\n}","map":{"version":3,"names":["isEqual","PropTypes","React","useEffect","useCallback","useContext","useState","identity","state","createStore","initialState","subscriptions","Set","getState","subscribe","callback","add","unsubscribe","delete","mutate","mutation","GlobalStateContext","createContext","useGlobalStateStore","GlobalStateProvider","store","children","createElement","Provider","value","propTypes","node","shape","useGlobalState","selector","selectedState","setSelectedState","newSelectedState","undefined","useGlobalStateMutation","mutationCreator"],"sources":["/home/jake/SRC/landing-page/node_modules/@dhis2/app-runtime/node_modules/@dhis2/app-service-offline/build/es/lib/global-state-service.js"],"sourcesContent":["import isEqual from 'lodash/isEqual';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useCallback, useContext, useState } from 'react';\n\n// This file creates a redux-like state management service using React context\n// that minimizes unnecessary rerenders that consume the context.\n// See more at https://github.com/amcgee/state-service-poc\nconst identity = state => state;\n\nexport const createStore = (initialState = {}) => {\n  const subscriptions = new Set();\n  let state = initialState;\n  return {\n    getState: () => state,\n    subscribe: callback => {\n      subscriptions.add(callback);\n    },\n    unsubscribe: callback => {\n      subscriptions.delete(callback);\n    },\n    mutate: mutation => {\n      state = mutation(state);\n\n      for (const callback of subscriptions) {\n        callback(state);\n      }\n    }\n  };\n};\nconst GlobalStateContext = /*#__PURE__*/React.createContext(createStore());\n\nconst useGlobalStateStore = () => useContext(GlobalStateContext);\n\nexport const GlobalStateProvider = ({\n  store,\n  children\n}) => /*#__PURE__*/React.createElement(GlobalStateContext.Provider, {\n  value: store\n}, children);\nGlobalStateProvider.propTypes = {\n  children: PropTypes.node,\n  store: PropTypes.shape({})\n};\nexport const useGlobalState = (selector = identity) => {\n  const store = useGlobalStateStore();\n  const [selectedState, setSelectedState] = useState(selector(store.getState()));\n  useEffect(() => {\n    // NEW: deep equality check before updating\n    const callback = state => {\n      const newSelectedState = selector(state); // Second condition handles case where a selected object gets\n      // deleted, but state does not update\n\n      if (!isEqual(selectedState, newSelectedState) || selectedState === undefined) setSelectedState(newSelectedState);\n    };\n\n    store.subscribe(callback); // Make sure to update state when selector changes\n\n    callback(store.getState());\n    return () => store.unsubscribe(callback);\n  }, [store, selector]);\n  /* eslint-disable-line react-hooks/exhaustive-deps */\n\n  return [selectedState, store.mutate];\n};\nexport function useGlobalStateMutation(mutationCreator) {\n  const store = useGlobalStateStore();\n  return useCallback((...args) => {\n    store.mutate(mutationCreator(...args));\n  }, [mutationCreator, store]);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}