"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WithValue = exports.ValueTextOverflow = exports.StatusWarning = exports.StatusValid = exports.StatusLoading = exports.StatusError = exports.ReadOnly = exports.PlaceholderNoValue = exports.NumberMaxMinStep = exports.NoPlaceholderNoValue = exports.Focus = exports.Disabled = exports.Dense = exports.Default = void 0;

var _uiConstants = require("@dhis2/ui-constants");

var _react = _interopRequireDefault(require("react"));

var _index = require("./index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const description = "\nAn input allows a user to enter data, usually text.\n\nInputs are used wherever a user needs to input standard text information. Inputs are often used as part of forms. An input can also be used to capture information outside of a form, perhaps as a 'Filter' or 'Search' field.\n\nTo use a label and validation text, consider the `InputField` component.\n\nRead more about Inputs and InputFields at [Design System: Inputs](https://github.com/dhis2/design-system/blob/master/atoms/inputfield.md).\n\n```js\nimport { Input } from '@dhis/ui'\n```\n";
const inputTypeArgType = {
  table: {
    type: {
      summary: 'string'
    }
  },
  control: {
    type: 'select',
    options: ['text', 'number', 'password', 'email', 'url', 'tel', 'date', 'datetime', 'datetime-local', 'month', 'week', 'time', 'search']
  }
};

const logger = _ref => {
  let {
    name,
    value
  } = _ref;
  return console.log("Name: ".concat(name, ", value: ").concat(value));
};

var _default = {
  title: 'Input',
  component: _index.Input,
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  args: {
    name: 'defaultName',
    onChange: logger
  },
  argTypes: {
    type: { ...inputTypeArgType
    },
    valid: { ..._uiConstants.sharedPropTypes.statusArgType
    },
    warning: { ..._uiConstants.sharedPropTypes.statusArgType
    },
    error: { ..._uiConstants.sharedPropTypes.statusArgType
    }
  }
};
exports.default = _default;

const Template = args => /*#__PURE__*/_react.default.createElement(_index.Input, args);

const Default = Template.bind({});
exports.Default = Default;
const NoPlaceholderNoValue = Template.bind({});
exports.NoPlaceholderNoValue = NoPlaceholderNoValue;
NoPlaceholderNoValue.storyName = 'No placeholder, no value';
const PlaceholderNoValue = Template.bind({});
exports.PlaceholderNoValue = PlaceholderNoValue;
PlaceholderNoValue.args = {
  placeholder: 'Hold the place'
};
PlaceholderNoValue.storyName = 'Placeholder, no value';
const WithValue = Template.bind({});
exports.WithValue = WithValue;
WithValue.args = {
  value: 'This is set through the value prop, which means the component is controlled.'
};
const NumberMaxMinStep = Template.bind({});
exports.NumberMaxMinStep = NumberMaxMinStep;
NumberMaxMinStep.args = {
  type: 'number',
  max: '3',
  min: '0',
  step: '0.5'
};
const Focus = Template.bind({});
exports.Focus = Focus;
Focus.args = {
  initialFocus: true
}; // Disabled initial focus stories on docs page

Focus.parameters = {
  docs: {
    disable: true
  }
};
const StatusValid = Template.bind({});
exports.StatusValid = StatusValid;
StatusValid.args = {
  valid: true,
  value: 'This value is valid'
};
StatusValid.storyName = 'Status: Valid';
const StatusWarning = Template.bind({});
exports.StatusWarning = StatusWarning;
StatusWarning.args = {
  warning: true,
  value: 'This value produces a warning'
};
StatusWarning.storyName = 'Status: Warning';
const StatusError = Template.bind({});
exports.StatusError = StatusError;
StatusError.args = {
  error: true,
  value: 'This value produces an error'
};
StatusError.storyName = 'Status: Error';
const StatusLoading = Template.bind({});
exports.StatusLoading = StatusLoading;
StatusLoading.args = {
  loading: true,
  value: 'This value produces a loading state'
};
StatusLoading.storyName = 'Status: Loading';
const Disabled = Template.bind({});
exports.Disabled = Disabled;
Disabled.args = {
  disabled: true,
  value: 'This field is disabled'
};
const ReadOnly = Template.bind({});
exports.ReadOnly = ReadOnly;
ReadOnly.args = {
  readOnly: true,
  value: 'This field is read-only'
};
const Dense = Template.bind({});
exports.Dense = Dense;
Dense.args = {
  dense: true,
  value: 'This field is dense'
};
const ValueTextOverflow = Template.bind({});
exports.ValueTextOverflow = ValueTextOverflow;
ValueTextOverflow.args = {
  value: "This value is too long in order to show on a single line of the input field. It should stay on one line, not in an extra line and which wouldn't look like a standard input",
  dense: true,
  warning: true
};