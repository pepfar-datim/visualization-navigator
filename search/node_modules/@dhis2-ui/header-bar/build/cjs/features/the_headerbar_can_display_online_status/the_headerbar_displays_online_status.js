"use strict";

var _steps = require("cypress-cucumber-preprocessor/steps");

require("../common/index.js");

// https://www.cypress.io/blog/2020/11/12/testing-application-in-offline-network-mode/
const goOffline = () => {
  cy.log('**go offline**').then(() => {
    return Cypress.automation('remote:debugger:protocol', {
      command: 'Network.enable'
    });
  }).then(() => {
    return Cypress.automation('remote:debugger:protocol', {
      command: 'Network.emulateNetworkConditions',
      params: {
        offline: true,
        latency: -1,
        downloadThroughput: -1,
        uploadThroughput: -1
      }
    });
  });
};

const goOnline = () => {
  // disable offline mode, otherwise we will break our tests :)
  cy.log('**go online**').then(() => {
    // https://chromedevtools.github.io/devtools-protocol/1-3/Network/#method-emulateNetworkConditions
    return Cypress.automation('remote:debugger:protocol', {
      command: 'Network.emulateNetworkConditions',
      params: {
        offline: false,
        latency: -1,
        downloadThroughput: -1,
        uploadThroughput: -1
      }
    });
  }).then(() => {
    return Cypress.automation('remote:debugger:protocol', {
      command: 'Network.disable'
    });
  });
};

(0, _steps.Before)(() => goOnline());
(0, _steps.After)(() => goOnline());
(0, _steps.Given)('the HeaderBar loads without error with showOnlineStatus configured', () => {
  cy.visitStory('HeaderBarTesting', 'Show Online Status');
});
(0, _steps.Given)('the HeaderBar loads without error when PWA is enabled', () => {
  cy.visitStory('HeaderBarTesting', 'PWA Enabled');
});
(0, _steps.Given)("the HeaderBar loads without error with 'LAST_ONLINE' configured", () => {
  cy.visitStory('HeaderBarTesting', 'With Last Online');
});
(0, _steps.And)('the viewport is narrower than 480px', () => {
  cy.viewport(460, 660);
});
(0, _steps.Then)('the HeaderBar does not render online status', () => {
  cy.get('[data-test="headerbar-online-status"]').should('not.exist');
});
(0, _steps.Then)('the HeaderBar renders online status', () => {
  cy.get('[data-test="headerbar-online-status"]').should('exist');
});
(0, _steps.Then)('the HeaderBar displays only the desktop status badge', () => {
  // This assumes default viewport size: 1000x660
  cy.get('[data-test="headerbar-online-status"].badge').should('be.visible');
  cy.get('[data-test="headerbar-online-status"].bar').should('not.be.visible');
});
(0, _steps.And)('the status badge shows online', () => {
  cy.get('[data-test="headerbar-online-status"].badge .label').should($label => {
    expect($label.text()).to.equal('Online');
  });
  cy.get('[data-test="headerbar-online-status"].badge .icon').should($icon => {
    expect($icon).to.have.class('online');
  });
});
(0, _steps.Then)('the HeaderBar displays only the mobile status bar', () => {
  cy.get('[data-test="headerbar-online-status"].bar').should('be.visible');
  cy.get('[data-test="headerbar-online-status"].badge').should('not.be.visible');
});
(0, _steps.And)('the browser goes offline', () => {
  goOffline();
});
(0, _steps.Then)('the status badge shows offline', () => {
  cy.get('[data-test="headerbar-online-status"].badge .label').should($label => {
    expect($label.text()).to.equal('Offline');
  });
  cy.get('[data-test="headerbar-online-status"].badge .icon').should($icon => {
    expect($icon).to.have.class('offline');
  });
});
(0, _steps.Then)('no info text is displayed', () => {
  cy.get('[data-test="headerbar-online-status"] .info').should('not.exist');
  cy.get('[data-test="headerbar-online-status"] .info-dense').should('not.exist');
});
(0, _steps.Then)('last online text is displayed in the status badge', () => {
  cy.get('[data-test="headerbar-online-status"].badge .info').should('include.text', 'Last online');
});
(0, _steps.Then)('last online text is displayed in the mobile status bar', () => {
  cy.get('[data-test="headerbar-online-status"].bar .info-dense').should('include.text', 'Last online');
});