"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MultipleRootSubAndOneMainOrgUnit = void 0;

var _react = _interopRequireWildcard(require("react"));

var _index = require("../index.js");

var _common = require("./common.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = {
  title: 'OrganisationUnitTree',
  decorators: [(0, _common.createDecoratorStatefulMultiSelection)(), (0, _common.createDecoratorCustomDataProvider)()]
};
exports.default = _default;

const MultipleRootSubAndOneMainOrgUnit = (_, _ref) => {
  let {
    selected,
    onChange
  } = _ref;
  const [filter, setFilter] = (0, _react.useState)('');
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("input", {
    type: "input",
    onChange: e => setFilter(e.target.value)
  }), /*#__PURE__*/_react.default.createElement(_index.OrganisationUnitTree, {
    filter: filter ? filter.split(',') : [],
    onChange: onChange,
    selected: selected,
    roots: ['A0000000000', 'A0000000001', 'A0000000002']
  }));
};

exports.MultipleRootSubAndOneMainOrgUnit = MultipleRootSubAndOneMainOrgUnit;