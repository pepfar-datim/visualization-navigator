"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OfflineInterfaceProvider = OfflineInterfaceProvider;
exports.useOfflineInterface = useOfflineInterface;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This is to prevent 'offlineInterface could be null' type-checking errors
const noopOfflineInterface = {
  pwaEnabled: false,
  startRecording: async () => undefined,
  getCachedSections: async () => [],
  removeSection: async () => false
};
const OfflineInterfaceContext = /*#__PURE__*/(0, _react.createContext)(noopOfflineInterface);

/**
 * Receives an OfflineInterface instance as a prop (presumably from the app
 * adapter) and provides it as context for other offline tools.
 *
 * On mount, it initializes the offline interface, which (among other things)
 * checks for service worker updates and, if updates are ready, prompts the
 * user with an alert to skip waiting and reload the page to use new content.
 */
function OfflineInterfaceProvider({
  offlineInterface,
  children
}) {
  return /*#__PURE__*/_react.default.createElement(OfflineInterfaceContext.Provider, {
    value: offlineInterface
  }, children);
}

OfflineInterfaceProvider.propTypes = {
  children: _propTypes.default.node,
  offlineInterface: _propTypes.default.shape({
    init: _propTypes.default.func
  })
};

function useOfflineInterface() {
  const offlineInterface = (0, _react.useContext)(OfflineInterfaceContext);

  if (offlineInterface === undefined) {
    throw new Error('Offline interface context not found. If this app is using the app platform, make sure `pwa: { enabled: true }` is in d2.config.js. If this is not a platform app, make sure your app is wrapped with an app-runtime <Provider> or an <OfflineProvider> from app-service-offline.');
  }

  return offlineInterface;
}