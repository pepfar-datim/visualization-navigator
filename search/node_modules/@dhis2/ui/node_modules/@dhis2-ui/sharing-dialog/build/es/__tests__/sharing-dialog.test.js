function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { CustomDataProvider } from '@dhis2/app-runtime';
import { mount } from 'enzyme';
import React from 'react';
import { SharingDialog } from '../sharing-dialog.js';
describe('<SharingDialog />', () => {
  it('calls the onClose callback when the close button is clicked', () => {
    const requiredProps = {
      id: 'sharing-test',
      type: 'visualization',
      onClose: () => {}
    };
    const spy = jest.fn();
    const wrapper = mount( /*#__PURE__*/React.createElement(SharingDialog, _extends({}, requiredProps, {
      onClose: spy
    })), {
      wrappingComponent: CustomDataProvider
    });
    const elements = wrapper.find('button').filterWhere(el => el.text().includes('Close'));
    expect(elements).toHaveLength(1);
    expect(spy).toHaveBeenCalledTimes(0);
    elements.first().simulate('click');
    expect(spy).toHaveBeenCalledTimes(1);
  });
});