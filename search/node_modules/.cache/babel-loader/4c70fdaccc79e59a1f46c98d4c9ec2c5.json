{"ast":null,"code":"import { ErrorType } from \"../../types/http.types\";\n\nfunction getErrorMessage(errorType, apiResponse) {\n  switch (errorType) {\n    case ErrorType.cannotParse:\n      return `Unsupported server response. Cannot retrieve response body.`;\n\n    case ErrorType.silentRedirect:\n      return `Wrong request. Response status ${apiResponse.rawResponse.status}, Redirected to ${apiResponse.rawResponse.url}\\n\\tThis likely means either wrong url or invalid authentication`;\n\n    case ErrorType.httpError:\n      return `Response status ${apiResponse.rawResponse.status} ${apiResponse.rawResponse.statusText}\\n\\tUrl: ${apiResponse.rawResponse.url}`;\n\n    case ErrorType.alreadyExists:\n      return `Object already exists. ${apiResponse.responseBody.typeReports[0].objectReports[0].errorReports[0].message}`;\n\n    case ErrorType.dhis2ErrorSpecified:\n      return `Server response: ${apiResponse.responseBody.typeReports[0].objectReports[0].errorReports[0].message}`;\n\n    case ErrorType.dhis2ErrorUnspecified:\n      return `Server responded with status 200 but error in response body. Cannot retrieve error message.`;\n  }\n}\n\nclass FailService {\n  constructor(apiResponse) {\n    this.apiResponse = void 0;\n    this.responseBody = void 0;\n    this.apiResponse = apiResponse;\n  }\n\n  fail(errorType) {\n    this.apiResponse.success = false;\n    this.apiResponse.errorType = errorType;\n    this.apiResponse.errorMessage = getErrorMessage(errorType, this.apiResponse);\n    return this.apiResponse;\n  }\n\n  success() {\n    this.apiResponse.success = true;\n    return this.apiResponse;\n  }\n\n}\n\nexport async function inspectResponse(rawResponse) {\n  let apiResponse = {\n    success: false,\n    rawResponse\n  };\n  let failService = new FailService(apiResponse);\n  if (!rawResponse.ok) return failService.fail(ErrorType.httpError);\n  if (rawResponse.redirected && rawResponse.url.includes('login')) return failService.fail(ErrorType.silentRedirect);\n  if (rawResponse.status === 204 && !rawResponse.redirected) return failService.success();\n\n  try {\n    let responseBody = JSON.parse(await rawResponse.text());\n    failService.apiResponse.responseBody = responseBody;\n    if (responseBody.status === 'ERROR') try {\n      if (responseBody.typeReports[0].objectReports[0].errorReports[0].message.includes('matching')) return failService.fail(ErrorType.alreadyExists);else return failService.fail(ErrorType.dhis2ErrorSpecified);\n    } catch (e) {\n      return failService.fail(ErrorType.dhis2ErrorUnspecified);\n    }\n  } catch (e) {\n    return failService.fail(ErrorType.cannotParse);\n  }\n\n  return failService.success();\n}","map":{"version":3,"names":["ErrorType","getErrorMessage","errorType","apiResponse","cannotParse","silentRedirect","rawResponse","status","url","httpError","statusText","alreadyExists","responseBody","typeReports","objectReports","errorReports","message","dhis2ErrorSpecified","dhis2ErrorUnspecified","FailService","constructor","fail","success","errorMessage","inspectResponse","failService","ok","redirected","includes","JSON","parse","text","e"],"sources":["/home/jake/SRC/visualization-navigator-ts/node_modules/@pepfar-react-lib/datim-api/services/methods/inspectResponse.service.ts"],"sourcesContent":["import {ApiResponse, ErrorType} from \"../../types/http.types\";\n\nfunction getErrorMessage(errorType:ErrorType, apiResponse:ApiResponse):string{\n    switch (errorType){\n        case ErrorType.cannotParse:\n            return `Unsupported server response. Cannot retrieve response body.`\n        case ErrorType.silentRedirect:\n            return `Wrong request. Response status ${apiResponse.rawResponse.status}, Redirected to ${apiResponse.rawResponse.url}\\n\\tThis likely means either wrong url or invalid authentication`\n        case ErrorType.httpError:\n            return `Response status ${apiResponse.rawResponse.status} ${apiResponse.rawResponse.statusText}\\n\\tUrl: ${apiResponse.rawResponse.url}`\n        case ErrorType.alreadyExists:\n            return `Object already exists. ${apiResponse.responseBody.typeReports[0].objectReports[0].errorReports[0].message}`\n        case ErrorType.dhis2ErrorSpecified:\n            return `Server response: ${apiResponse.responseBody.typeReports[0].objectReports[0].errorReports[0].message}`\n        case ErrorType.dhis2ErrorUnspecified:\n            return `Server responded with status 200 but error in response body. Cannot retrieve error message.`\n    }\n}\n\nclass FailService {\n    apiResponse:ApiResponse;\n    responseBody:any;\n    constructor(apiResponse:ApiResponse) {\n        this.apiResponse = apiResponse;\n    }\n    fail(errorType:ErrorType):ApiResponse{\n        this.apiResponse.success = false;\n        this.apiResponse.errorType = errorType;\n        this.apiResponse.errorMessage = getErrorMessage(errorType, this.apiResponse)\n        return this.apiResponse;\n    }\n    success():ApiResponse{\n        this.apiResponse.success = true;\n        return this.apiResponse;\n    }\n}\n\nexport async function inspectResponse(rawResponse:Response|any):Promise<ApiResponse>{\n    let apiResponse:ApiResponse = {\n        success: false,\n        rawResponse\n    }\n    let failService = new FailService(apiResponse);\n    if (!rawResponse.ok) return failService.fail(ErrorType.httpError);\n    if (rawResponse.redirected&&rawResponse.url.includes('login')) return failService.fail(ErrorType.silentRedirect)\n    if (rawResponse.status===204&&!rawResponse.redirected) return failService.success();\n    try {\n        let responseBody:any = JSON.parse(await rawResponse.text() as any);\n        failService.apiResponse.responseBody = responseBody;\n        if (responseBody.status==='ERROR') try {\n            if (responseBody.typeReports[0].objectReports[0].errorReports[0].message.includes('matching')) return failService.fail(ErrorType.alreadyExists)\n            else return failService.fail(ErrorType.dhis2ErrorSpecified)\n        } catch(e){\n            return failService.fail(ErrorType.dhis2ErrorUnspecified)\n        }\n    } catch (e){\n        return failService.fail(ErrorType.cannotParse);\n    }\n    return failService.success();\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}