"use strict";

var _layer = require("@dhis2-ui/layer");

var _popper = require("@dhis2-ui/popper");

var _enzyme = require("enzyme");

var _react = _interopRequireDefault(require("react"));

var _testUtils = require("react-dom/test-utils");

var _index = require("../../index.js");

var _dropdownButton = require("../dropdown-button.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<DropdownButton>', () => {
  describe('controlled mode', () => {
    describe('open state', () => {
      const onClick = jest.fn();

      const Component = /*#__PURE__*/_react.default.createElement(_dropdownButton.DropdownButton, {
        onClick: onClick,
        open: true,
        component: /*#__PURE__*/_react.default.createElement("span", null, "test")
      });

      it('shows the Popper when open is true', async () => {
        // TODO: https://github.com/popperjs/react-popper/issues/350
        const wrapper = (0, _enzyme.mount)(Component);
        await (0, _testUtils.act)(async () => await null);
        const popper = wrapper.find(_popper.Popper);
        expect(popper).toHaveLength(1);
        expect(popper.find('span').text()).toEqual('test');
      });
      it('passes an "open" property to the callback payload with the next open state', async () => {
        // TODO: https://github.com/popperjs/react-popper/issues/350
        const wrapper = (0, _enzyme.mount)(Component);
        await (0, _testUtils.act)(async () => await null);
        wrapper.find(_layer.Layer).simulate('click');
        expect(onClick).toHaveBeenCalledTimes(1);
        const args = onClick.mock.calls[0];
        expect(args).toHaveLength(2);
        expect(args[0]).toEqual(expect.objectContaining({
          open: false
        }));
      });
    });
    describe('closed state', () => {
      const onClick = jest.fn();
      const wrapper = (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_dropdownButton.DropdownButton, {
        onClick: onClick,
        open: false,
        component: /*#__PURE__*/_react.default.createElement("span", null, "test")
      }));
      it('it does not show the Popper when open is false', () => {
        const popper = wrapper.find(_popper.Popper);
        expect(popper).toHaveLength(0);
      });
      it('passes an "open" property to the callback payload with the next open state (false)', () => {
        wrapper.find(_index.Button).simulate('click');
        expect(onClick).toHaveBeenCalledTimes(1);
        const args = onClick.mock.calls[0];
        expect(args).toHaveLength(2);
        expect(args[0]).toEqual(expect.objectContaining({
          open: true
        }));
      });
    });
  });
});