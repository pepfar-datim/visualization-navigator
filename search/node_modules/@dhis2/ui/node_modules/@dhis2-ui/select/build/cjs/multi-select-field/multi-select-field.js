"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultiSelectField = void 0;

var _box = require("@dhis2-ui/box");

var _field = require("@dhis2-ui/field");

var _uiConstants = require("@dhis2/ui-constants");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _index = require("../index.js");

var _index2 = _interopRequireDefault(require("../locales/index.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: translate
const translate = (prop, interpolationObject) => {
  if (typeof prop === 'function') {
    return prop(interpolationObject);
  }

  return prop;
};

class MultiSelectField extends _react.default.Component {
  render() {
    const {
      className,
      onChange,
      onFocus,
      onBlur,
      required,
      label,
      valid,
      error,
      disabled,
      warning,
      loading,
      selected,
      tabIndex,
      helpText,
      validationText,
      maxHeight,
      inputMaxHeight,
      inputWidth,
      children,
      clearable,
      clearText,
      filterable,
      filterPlaceholder,
      placeholder,
      prefix,
      empty,
      loadingText,
      noMatchText,
      initialFocus,
      dense,
      dataTest
    } = this.props;
    return /*#__PURE__*/_react.default.createElement(_field.Field, {
      className: className,
      dataTest: dataTest,
      disabled: disabled,
      required: required,
      label: label,
      helpText: helpText,
      validationText: validationText,
      error: error,
      warning: warning,
      valid: valid
    }, /*#__PURE__*/_react.default.createElement(_box.Box, {
      width: inputWidth,
      minWidth: "100px"
    }, /*#__PURE__*/_react.default.createElement(_index.MultiSelect, {
      selected: selected,
      tabIndex: tabIndex,
      maxHeight: maxHeight,
      inputMaxHeight: inputMaxHeight,
      onChange: onChange,
      onFocus: onFocus,
      onBlur: onBlur,
      loading: loading,
      error: error,
      warning: warning,
      valid: valid,
      disabled: disabled,
      clearable: clearable,
      clearText: translate(clearText),
      filterable: filterable,
      filterPlaceholder: translate(filterPlaceholder),
      placeholder: placeholder,
      prefix: prefix,
      empty: translate(empty),
      loadingText: translate(loadingText),
      noMatchText: translate(noMatchText),
      initialFocus: initialFocus,
      dense: dense
    }, children)));
  }

}

exports.MultiSelectField = MultiSelectField;
MultiSelectField.defaultProps = {
  selected: [],
  dataTest: 'dhis2-uiwidgets-multiselectfield',
  clearText: () => _index2.default.t('Clear'),
  empty: () => _index2.default.t('No data found'),
  filterPlaceholder: () => _index2.default.t('Type to filter options'),
  loadingText: () => _index2.default.t('Loading options'),
  noMatchText: () => _index2.default.t('No options found')
};
MultiSelectField.propTypes = {
  /** Should be `MultiSelectOption` components */
  children: _propTypes.default.node,
  className: _propTypes.default.string,

  /** Label for the button that clears selections */
  clearText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),

  /** Adds a button to the MultiSelect that clears selections when pressed */
  clearable: _propTypes.default.bool,
  dataTest: _propTypes.default.string,

  /** Makes the MultiSelect smaller */
  dense: _propTypes.default.bool,

  /** Disables the MultiSelect */
  disabled: _propTypes.default.bool,

  /** Text to display when there are no options */
  empty: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /** Adds 'error' appearance for validation feedback. Mutually exclusive with 'valid' and 'warning' props */
  error: _uiConstants.sharedPropTypes.statusPropType,

  /** Placeholder text to show in the filter field when it is empty */
  filterPlaceholder: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),

  /** Adds a field to filter options */
  filterable: _propTypes.default.bool,

  /** Useful guiding text to display below the MultiSelect */
  helpText: _propTypes.default.string,

  /** Grabs initial focus on the page */
  initialFocus: _propTypes.default.bool,

  /** Constrains the height of the input */
  inputMaxHeight: _propTypes.default.string,

  /** Sets the width of the input. Can be any valid CSS measurement */
  inputWidth: _propTypes.default.string,

  /** Text for the label above the MultiSelect */
  label: _propTypes.default.string,

  /** Applies a loading appearance to the dropdown options */
  loading: _propTypes.default.bool,

  /** Text to display when `loading` is true */
  loadingText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),

  /** Constrains height of the MultiSelect */
  maxHeight: _propTypes.default.string,

  /** Text to display when there are no filter results */
  noMatchText: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.func]),

  /** Placeholder text when the MultiSelect is empty */
  placeholder: _propTypes.default.string,

  /** Leading text to prefix selections */
  prefix: _propTypes.default.string,

  /** Indicates that a selection is required */
  required: _propTypes.default.bool,

  /** Selected items in the MultiSelect (each string should refer to the item's `value` attribute) */
  selected: _propTypes.default.arrayOf(_propTypes.default.string),
  tabIndex: _propTypes.default.string,

  /** Adds 'valid' appearance for validation feedback. Mutually exclusive with 'error' and 'warning' props */
  valid: _uiConstants.sharedPropTypes.statusPropType,

  /** Text to provide form validation feedback. Receives styles according to validation status */
  validationText: _propTypes.default.string,

  /** Adds 'warning' appearance for validation feedback. Mutually exclusive with 'valid' and 'error' props */
  warning: _uiConstants.sharedPropTypes.statusPropType,

  /** Called with signature `({ selected: [String] }, event)` */
  onBlur: _propTypes.default.func,

  /** Called with signature `({ selected: [String] }, event)` */
  onChange: _propTypes.default.func,

  /** Called with signature `({ selected: [String] }, event)` */
  onFocus: _propTypes.default.func
};