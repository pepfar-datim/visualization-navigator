{"ast":null,"code":"import _objectSpread from \"/home/jake/SRC/landing-page/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/home/jake/SRC/landing-page/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/home/jake/SRC/landing-page/node_modules/@babel/runtime/regenerator/index.js\";\nimport { FetchError } from '../../engine';\nexport var parseContentType = function parseContentType(contentType) {\n  return contentType ? contentType.split(';')[0].trim().toLowerCase() : '';\n};\nexport var parseStatus = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n    var accessError, message, details, _message, _details;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            accessError = response.status === 401 || response.status === 403 || response.status === 409;\n\n            if (!accessError) {\n              _context.next = 14;\n              break;\n            }\n\n            details = {};\n            _context.prev = 3;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            details = _context.sent;\n            message = details.message;\n            _context.next = 12;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](3);\n\n          case 12:\n            // Set a message in case of invalid json, or json without 'message' property\n            if (!message) {\n              message = response.status === 401 ? 'Unauthorized' : 'Forbidden';\n            }\n\n            throw new FetchError({\n              type: 'access',\n              message: message,\n              details: details\n            });\n\n          case 14:\n            if (!(response.status < 200 || response.status >= 400)) {\n              _context.next = 26;\n              break;\n            }\n\n            _message = \"An unknown error occurred - \".concat(response.statusText, \" (\").concat(response.status, \")\");\n            _details = {};\n            _context.prev = 17;\n            _context.next = 20;\n            return response.json();\n\n          case 20:\n            _details = _context.sent;\n            _context.next = 25;\n            break;\n\n          case 23:\n            _context.prev = 23;\n            _context.t1 = _context[\"catch\"](17);\n\n          case 25:\n            throw new FetchError({\n              type: 'unknown',\n              message: _message,\n              details: _details\n            });\n\n          case 26:\n            return _context.abrupt(\"return\", response);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 10], [17, 23]]);\n  }));\n\n  return function parseStatus(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport function fetchData(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return fetch(url, _objectSpread(_objectSpread({}, options), {}, {\n    credentials: 'include',\n    headers: _objectSpread({\n      'X-Requested-With': 'XMLHttpRequest',\n      Accept: 'application/json'\n    }, options.headers)\n  })).catch(function (err) {\n    throw new FetchError({\n      type: 'network',\n      message: 'An unknown network error occurred',\n      details: err\n    });\n  }).then(parseStatus).then( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(response) {\n      var contentType;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              contentType = parseContentType(response.headers.get('Content-Type')); // 'application/json'\n\n              if (!(contentType === 'application/json')) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 4;\n              return response.json();\n\n            case 4:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 5:\n              if (!/^text\\/[a-z0-9.-]+$/.test(contentType)) {\n                _context2.next = 9;\n                break;\n              }\n\n              _context2.next = 8;\n              return response.text();\n\n            case 8:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 9:\n              _context2.next = 11;\n              return response.blob();\n\n            case 11:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n}","map":{"version":3,"names":["FetchError","parseContentType","contentType","split","trim","toLowerCase","parseStatus","response","accessError","status","details","json","message","type","concat","statusText","fetchData","url","options","fetch","credentials","headers","Accept","catch","err","then","get","test","text","blob"],"sources":["/home/jake/SRC/landing-page/node_modules/@dhis2/app-runtime/node_modules/@dhis2/app-service-data/build/es/links/RestAPILink/fetchData.js"],"sourcesContent":["import { FetchError } from '../../engine';\nexport const parseContentType = contentType => contentType ? contentType.split(';')[0].trim().toLowerCase() : '';\nexport const parseStatus = async response => {\n  const accessError = response.status === 401 || response.status === 403 || response.status === 409;\n\n  if (accessError) {\n    let message;\n    let details = {};\n\n    try {\n      details = await response.json();\n      message = details.message;\n    } catch (e) {// Do nothing\n    } // Set a message in case of invalid json, or json without 'message' property\n\n\n    if (!message) {\n      message = response.status === 401 ? 'Unauthorized' : 'Forbidden';\n    }\n\n    throw new FetchError({\n      type: 'access',\n      message,\n      details\n    });\n  }\n\n  if (response.status < 200 || response.status >= 400) {\n    const message = \"An unknown error occurred - \".concat(response.statusText, \" (\").concat(response.status, \")\");\n    let details = {};\n\n    try {\n      details = await response.json();\n    } catch (e) {// We can leave details as is if parsing fails\n    }\n\n    throw new FetchError({\n      type: 'unknown',\n      message,\n      details\n    });\n  }\n\n  return response;\n};\nexport function fetchData(url, options = {}) {\n  return fetch(url, { ...options,\n    credentials: 'include',\n    headers: {\n      'X-Requested-With': 'XMLHttpRequest',\n      Accept: 'application/json',\n      ...options.headers\n    }\n  }).catch(err => {\n    throw new FetchError({\n      type: 'network',\n      message: 'An unknown network error occurred',\n      details: err\n    });\n  }).then(parseStatus).then(async response => {\n    const contentType = parseContentType(response.headers.get('Content-Type')); // 'application/json'\n\n    if (contentType === 'application/json') {\n      return await response.json(); // Will throw if invalid JSON!\n    } // 'text/*'\n\n\n    if (/^text\\/[a-z0-9.-]+$/.test(contentType)) {\n      return await response.text();\n    }\n\n    return await response.blob();\n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}