"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TableHeaderCell = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _propTypes = require("@dhis2/prop-types");

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes2 = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _tableHeaderCellStyles = _interopRequireDefault(require("./table-header-cell.styles.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const AUTO = 'auto';
const TableHeaderCell = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
  let {
    active,
    align,
    bordered,
    children,
    className,
    colSpan,
    dataTest,
    error,
    fixed,
    large,
    left,
    muted,
    rowSpan,
    role,
    scope,
    staticStyle,
    top,
    valid,
    width,
    onClick,
    ...props
  } = _ref;
  return /*#__PURE__*/_react.default.createElement("th", _extends({}, props, {
    ref: ref,
    colSpan: colSpan,
    rowSpan: rowSpan,
    onClick: onClick,
    "data-test": dataTest,
    role: role,
    scope: scope,
    className: "jsx-".concat(_tableHeaderCellStyles.default.__hash) + " " + _style.default.dynamic([["1837557188", [left, top, align, width]]]) + " " + ((0, _classnames.default)(className, {
      active,
      bordered,
      error,
      fixed,
      fixedHorizontally: fixed && left !== AUTO,
      large,
      muted,
      staticStyle,
      valid
    }) || "")
  }), children, /*#__PURE__*/_react.default.createElement(_style.default, {
    id: _tableHeaderCellStyles.default.__hash
  }, _tableHeaderCellStyles.default), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "1837557188",
    dynamic: [left, top, align, width]
  }, ["th.__jsx-style-dynamic-selector{left:".concat(left, ";top:").concat(top, ";text-align:").concat(align, ";width:").concat(width, ";}")]));
});
exports.TableHeaderCell = TableHeaderCell;
TableHeaderCell.displayName = 'TableHeaderCell';
TableHeaderCell.defaultProps = {
  align: 'left',
  dataTest: 'dhis2-uicore-tablecell',
  left: AUTO,
  width: AUTO,
  top: AUTO
};
const stylePropType = (0, _propTypes.mutuallyExclusive)(['valid', 'error', 'muted'], _propTypes2.default.bool);
TableHeaderCell.propTypes = {
  /** To toggle background color, for example for editing */
  active: _propTypes2.default.bool,
  align: _propTypes2.default.oneOf(['left', 'center', 'right']),
  bordered: _propTypes2.default.bool,
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  colSpan: _propTypes2.default.string,
  dataTest: _propTypes2.default.string,

  /** Mutually exclusive with muted and valid */
  error: stylePropType,
  fixed: _propTypes2.default.bool,
  large: _propTypes2.default.bool,

  /** Left or top required when fixed */
  left: (0, _propTypes.requiredIf)(props => props.fixed && !props.top, _propTypes2.default.string),

  /** Mutually exclusive with error and valid */
  muted: stylePropType,
  role: _propTypes2.default.string,
  rowSpan: _propTypes2.default.string,
  scope: _propTypes2.default.string,

  /** Surpress hover and active event styles */
  staticStyle: _propTypes2.default.bool,

  /** Left or top required when fixed */
  top: (0, _propTypes.requiredIf)(props => props.fixed && !props.left, _propTypes2.default.string),

  /** Mutually exclusive with error and muted */
  valid: stylePropType,
  width: _propTypes2.default.string,
  onClick: _propTypes2.default.func
};