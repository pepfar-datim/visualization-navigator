"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FilterableMenu = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _filterInput = require("./filter-input.js");

var _noMatch = require("./no-match.js");

var _optionHelpers = require("./option-helpers.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class FilterableMenu extends _react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "state", {
      filter: ''
    });

    _defineProperty(this, "onFilterChange", _ref => {
      let {
        value
      } = _ref;
      this.setState({
        filter: value
      });
    });
  }

  render() {
    const {
      dataTest,
      options,
      onChange,
      selected,
      empty,
      handleClose,
      handleFocusInput,
      placeholder,
      noMatchText,
      Menu
    } = this.props;
    const {
      filter
    } = this.state;
    const menuProps = {
      onChange,
      selected,
      empty,
      handleClose,
      handleFocusInput,
      dataTest
    };
    const renderedOptions = (0, _optionHelpers.filterIgnored)(options); // If there are no options or there's no filter, just pass everything through

    if (_react.default.Children.count(renderedOptions) === 0 || !filter) {
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_filterInput.FilterInput, {
        dataTest: "".concat(dataTest, "-filterinput"),
        placeholder: placeholder,
        value: filter,
        onChange: this.onFilterChange
      }), /*#__PURE__*/_react.default.createElement(Menu, _extends({}, menuProps, {
        options: options
      })));
    }

    const filtered = _react.default.Children.map(options, child => {
      const isValidOption = (0, _optionHelpers.checkIfValidOption)(child); // Filter it out if it's an invalid option

      if (!isValidOption) {
        return null;
      }

      const {
        label
      } = child.props; // Filter by label, because that's the part of an option that's displayed to the user

      const match = label.toLowerCase().includes(filter.toLowerCase());
      return match ? child : null;
    });

    const hasMatch = _react.default.Children.count(filtered) > 0;
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_filterInput.FilterInput, {
      dataTest: "".concat(dataTest, "-filterinput"),
      placeholder: placeholder,
      value: filter,
      onChange: this.onFilterChange
    }), hasMatch ? /*#__PURE__*/_react.default.createElement(Menu, _extends({}, menuProps, {
      options: filtered
    })) : /*#__PURE__*/_react.default.createElement(_noMatch.NoMatch, {
      message: noMatchText
    }));
  }

}

exports.FilterableMenu = FilterableMenu;
FilterableMenu.propTypes = {
  Menu: _propTypes.default.elementType.isRequired,
  dataTest: _propTypes.default.string.isRequired,
  noMatchText: _propTypes.default.string.isRequired,
  selected: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.arrayOf(_propTypes.default.string)]).isRequired,
  empty: _propTypes.default.node,
  handleClose: _propTypes.default.func,
  handleFocusInput: _propTypes.default.func,
  options: _propTypes.default.node,
  placeholder: _propTypes.default.string,
  onChange: _propTypes.default.func
};