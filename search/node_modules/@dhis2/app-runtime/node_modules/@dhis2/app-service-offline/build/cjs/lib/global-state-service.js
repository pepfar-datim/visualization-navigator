"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useGlobalStateMutation = useGlobalStateMutation;
exports.useGlobalState = exports.GlobalStateProvider = exports.createStore = void 0;

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// This file creates a redux-like state management service using React context
// that minimizes unnecessary rerenders that consume the context.
// See more at https://github.com/amcgee/state-service-poc
const identity = state => state;

const createStore = (initialState = {}) => {
  const subscriptions = new Set();
  let state = initialState;
  return {
    getState: () => state,
    subscribe: callback => {
      subscriptions.add(callback);
    },
    unsubscribe: callback => {
      subscriptions.delete(callback);
    },
    mutate: mutation => {
      state = mutation(state);

      for (const callback of subscriptions) {
        callback(state);
      }
    }
  };
};

exports.createStore = createStore;

const GlobalStateContext = /*#__PURE__*/_react.default.createContext(createStore());

const useGlobalStateStore = () => (0, _react.useContext)(GlobalStateContext);

const GlobalStateProvider = ({
  store,
  children
}) => /*#__PURE__*/_react.default.createElement(GlobalStateContext.Provider, {
  value: store
}, children);

exports.GlobalStateProvider = GlobalStateProvider;
GlobalStateProvider.propTypes = {
  children: _propTypes.default.node,
  store: _propTypes.default.shape({})
};

const useGlobalState = (selector = identity) => {
  const store = useGlobalStateStore();
  const [selectedState, setSelectedState] = (0, _react.useState)(selector(store.getState()));
  (0, _react.useEffect)(() => {
    // NEW: deep equality check before updating
    const callback = state => {
      const newSelectedState = selector(state); // Second condition handles case where a selected object gets
      // deleted, but state does not update

      if (!(0, _isEqual.default)(selectedState, newSelectedState) || selectedState === undefined) setSelectedState(newSelectedState);
    };

    store.subscribe(callback); // Make sure to update state when selector changes

    callback(store.getState());
    return () => store.unsubscribe(callback);
  }, [store, selector]);
  /* eslint-disable-line react-hooks/exhaustive-deps */

  return [selectedState, store.mutate];
};

exports.useGlobalState = useGlobalState;

function useGlobalStateMutation(mutationCreator) {
  const store = useGlobalStateStore();
  return (0, _react.useCallback)((...args) => {
    store.mutate(mutationCreator(...args));
  }, [mutationCreator, store]);
}