"use strict";

var _steps = require("cypress-cucumber-preprocessor/steps");

(0, _steps.Given)('the detector is not intersecting with the root', () => {
  cy.visitStory('IntersectionDetector', 'Out Of View');
  cy.window().then(win => {
    cy.wrap(win.onChange).as('onChangeStub').should('be.calledOnce').should('be.calledWith', {
      isIntersecting: false
    });
  });
});
(0, _steps.Given)('the detector is intersecting with the root', () => {
  cy.visitStory('IntersectionDetector', 'In View');
  cy.window().then(win => {
    cy.wrap(win.onChange).as('onChangeStub').should('be.calledOnce').should('be.calledWith', {
      isIntersecting: true
    });
  });
});
(0, _steps.When)('the user scrolls the detector into view', () => {
  // using 311 to scroll 1px more than "just enough"
  cy.get('[data-test="scroll-container"]').scrollTo(0, 311);
});
(0, _steps.When)('the user scrolls the detector out of view', () => {
  // Scroll 1px more than "just enough" to make sure
  // the detector is completely hidden
  cy.get('[data-test="scroll-container"]').scrollTo(0, 201);
});
(0, _steps.Then)('the callback passed to onChange should be called', () => {
  cy.get('@onChangeStub').should(stub => {
    expect(stub).to.be.calledTwice;
  });
});
(0, _steps.Then)('the isIntersecting prop of its payload should be true', () => {
  cy.get('@onChangeStub').should('be.calledWith', {
    isIntersecting: true
  });
});
(0, _steps.Then)('the isIntersecting prop of its payload should be false', () => {
  cy.get('@onChangeStub').should('be.calledWith', {
    isIntersecting: false
  });
});