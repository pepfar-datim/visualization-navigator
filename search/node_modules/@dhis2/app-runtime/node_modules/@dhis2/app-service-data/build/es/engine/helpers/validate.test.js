import { getResourceQueryErrors, validateResourceQuery, validateResourceQueries } from './validate';
describe('query validation', () => {
  describe('getResourceQueryErrors', () => {
    it('should pass with a simple valid query', () => {
      expect(getResourceQueryErrors('read', {
        resource: 'me'
      })).toHaveLength(0);
    });
    it('should pass with a simple valid mutation', () => {
      expect(getResourceQueryErrors('create', {
        resource: 'indicators',
        data: {
          this: 'is a test'
        }
      })).toHaveLength(0);
    });
    it('should fail if an unknown type is specified', () => {
      const errors = getResourceQueryErrors('rainbow', {
        resource: 'me'
      });
      expect(errors).toHaveLength(1);
      expect(errors).toMatchInlineSnapshot("\n                Array [\n                  \"Unknown query or mutation type rainbow\",\n                ]\n            ");
    });
    it('should fail if query is not an object', () => {
      let errors = getResourceQueryErrors('read', 'query');
      expect(errors).toHaveLength(1);
      expect(errors).toMatchInlineSnapshot("\n                Array [\n                  \"A query or mutation must be a javascript object\",\n                ]\n            ");
      errors = getResourceQueryErrors('read', 42);
      expect(errors).toHaveLength(1);
      expect(errors).toMatchInlineSnapshot("\n                Array [\n                  \"A query or mutation must be a javascript object\",\n                ]\n            ");
    });
    it('should fail if query is missing resource property', () => {
      const errors = getResourceQueryErrors('read', {});
      expect(errors).toHaveLength(1);
      expect(errors).toMatchInlineSnapshot("\n                Array [\n                  \"Property resource must be a string\",\n                ]\n            ");
    });
    it('should fail if query is missing resource property', () => {
      const errors = getResourceQueryErrors('read', {});
      expect(errors).toHaveLength(1);
      expect(errors).toMatchInlineSnapshot("\n                Array [\n                  \"Property resource must be a string\",\n                ]\n            ");
    });
    it('should fail if query is create mutation with id prop', () => {
      const errors = getResourceQueryErrors('create', {
        resource: 'indicators',
        id: 'something'
      });
      expect(errors).toHaveLength(1);
      expect(errors).toMatchInlineSnapshot("\n                Array [\n                  \"Mutation type 'create' does not support property 'id'\",\n                ]\n            ");
    });
    it('should fail if id prop is not a string', () => {
      const errors = getResourceQueryErrors('update', {
        resource: 'indicators',
        id: 42
      });
      expect(errors).toHaveLength(1);
      expect(errors).toMatchInlineSnapshot("\n                Array [\n                  \"Property id must be a string\",\n                ]\n            ");
    });
    it('should fail if params prop is not an object', () => {
      const errors = getResourceQueryErrors('update', {
        resource: 'indicators',
        id: '42',
        params: 'querystring=42'
      });
      expect(errors).toHaveLength(1);
      expect(errors).toMatchInlineSnapshot("\n                Array [\n                  \"Property params must be an object\",\n                ]\n            ");
    });
    it('should fail if query is delete mutation with data prop', () => {
      const errors = getResourceQueryErrors('delete', {
        resource: 'indicators',
        id: '42',
        data: 'querystring=42'
      });
      expect(errors).toHaveLength(1);
      expect(errors).toMatchInlineSnapshot("\n                Array [\n                  \"Mutation type 'delete' does not support property 'data'\",\n                ]\n            ");
    });
    it('should fail if query is json-patch mutation with non-array data prop', () => {
      const errors = getResourceQueryErrors('json-patch', {
        resource: 'metadata',
        data: {}
      });
      expect(errors).toHaveLength(1);
      expect(errors).toMatchInlineSnapshot("\n                Array [\n                  \"Mutation type 'json-patch' requires property 'data' to be of type Array\",\n                ]\n            ");
    });
    it('should fail if unrecognized keys are passed to query', () => {
      const errors = getResourceQueryErrors('update', {
        resource: 'indicators',
        id: '42',
        query: 'something',
        foo: 'bar'
      });
      expect(errors).toHaveLength(2);
      expect(errors).toMatchInlineSnapshot("\n                Array [\n                  \"Property query is not supported\",\n                  \"Property foo is not supported\",\n                ]\n            ");
    });
  });
  describe('validateResourceQuery', () => {
    it('should pass with a valid query', () => {
      expect(() => validateResourceQuery('read', {
        resource: 'me'
      })).not.toThrowError();
    });
    it('should throw an error with an invalid query', () => {
      expect(() => validateResourceQuery('create', {
        resource: 'me',
        id: '42'
      })).toThrowErrorMatchingInlineSnapshot("\n\"Invalid query\n - Mutation type 'create' does not support property 'id'\"\n");
    });
    it('should throw an error with an invalid query', () => {
      expect(() => validateResourceQuery('create', {
        resource: 'me',
        answer: 42
      })).toThrowErrorMatchingInlineSnapshot("\n\"Invalid query\n - Property answer is not supported\"\n");
    });
  });
  describe('validateResourceQueries', () => {
    it('should pass with valid queries', () => {
      expect(() => validateResourceQueries([{
        resource: 'me'
      }, {
        resource: 'indicators'
      }], ['me', 'ind'])).not.toThrowError();
    });
    it('should throw if any query is invalid', () => {
      expect(() => validateResourceQueries([{
        resource: 'me'
      }, {
        resource: 'indicators',
        params: 'parameters'
      }, {
        resource: 'me',
        id: 42
      }])).toThrowErrorMatchingInlineSnapshot("\n\"Invalid query\n - [query#1] Property params must be an object\n - [query#2] Property id must be a string\"\n");
    });
    it('should throw if any query is invalid, prefixing with relevant name', () => {
      expect(() => validateResourceQueries([{
        resource: 'me'
      }, {
        resource: 'indicators',
        params: 'parameters'
      }, {
        resource: 'me',
        id: 42
      }], ['me', 'inds'])).toThrowErrorMatchingInlineSnapshot("\n\"Invalid query\n - [inds] Property params must be an object\n - [query#2] Property id must be a string\"\n");
    });
  });
});