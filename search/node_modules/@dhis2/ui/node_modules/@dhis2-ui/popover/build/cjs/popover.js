"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Popover = void 0;

var _style = _interopRequireDefault(require("styled-jsx/style"));

var _layer = require("@dhis2-ui/layer");

var _popper = require("@dhis2-ui/popper");

var _uiConstants = require("@dhis2/ui-constants");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _arrow = require("./arrow.js");

var _modifiers = require("./modifiers.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const Popover = _ref => {
  let {
    children,
    reference,
    arrow,
    className,
    dataTest,
    elevation,
    maxWidth,
    observePopperResize,
    observeReferenceResize,
    placement,
    onClickOutside
  } = _ref;
  const referenceElement = (0, _popper.getReferenceElement)(reference);
  const [popperElement, setPopperElement] = (0, _react.useState)(null);
  const [arrowElement, setArrowElement] = (0, _react.useState)(null);
  const modifiers = (0, _react.useMemo)(() => (0, _modifiers.combineModifiers)(arrow, arrowElement, {
    observePopperResize,
    observeReferenceResize
  }), [arrow, arrowElement, observePopperResize, observeReferenceResize]);
  const {
    styles,
    attributes
  } = (0, _popper.usePopper)(referenceElement, popperElement, {
    placement,
    modifiers
  });
  return /*#__PURE__*/_react.default.createElement(_layer.Layer, {
    onClick: onClickOutside
  }, /*#__PURE__*/_react.default.createElement("div", _extends({
    "data-test": dataTest,
    ref: setPopperElement,
    style: styles.popper
  }, attributes.popper, {
    className: _style.default.dynamic([["632767479", [maxWidth, elevation, _uiConstants.colors.white]]]) + " " + (attributes.popper && attributes.popper.className != null && attributes.popper.className || className || "")
  }), children, arrow && /*#__PURE__*/_react.default.createElement(_arrow.Arrow, {
    hidden: attributes.arrow && attributes.arrow['data-arrow-hidden'],
    popperPlacement: attributes.popper && attributes.popper['data-popper-placement'],
    ref: setArrowElement,
    styles: styles.arrow
  }), /*#__PURE__*/_react.default.createElement(_style.default, {
    id: "632767479",
    dynamic: [maxWidth, elevation, _uiConstants.colors.white]
  }, ["div.__jsx-style-dynamic-selector{max-width:".concat(maxWidth, "px;box-shadow:").concat(elevation, ";background-color:").concat(_uiConstants.colors.white, ";border-radius:4px;}")])));
};

exports.Popover = Popover;
Popover.defaultProps = {
  arrow: true,
  dataTest: 'dhis2-uicore-popover',
  elevation: _uiConstants.elevations.e200,
  maxWidth: 360,
  placement: 'top'
};
Popover.propTypes = {
  children: _propTypes.default.node.isRequired,

  /** Show or hide the arrow */
  arrow: _propTypes.default.bool,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,

  /** Box-shadow to create appearance of elevation.  Use `elevations` constants from the UI library. */
  elevation: _propTypes.default.string,
  maxWidth: _propTypes.default.number,
  observePopperResize: _propTypes.default.bool,
  observeReferenceResize: _propTypes.default.bool,
  placement: _uiConstants.sharedPropTypes.popperPlacementPropType,

  /** A React ref that refers to the element the Popover should position against */
  reference: _uiConstants.sharedPropTypes.popperReferencePropType,
  onClickOutside: _propTypes.default.func
};