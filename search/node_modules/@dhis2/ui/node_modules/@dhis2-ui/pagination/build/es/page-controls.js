import _JSXStyle from "styled-jsx/style";
import { Button } from '@dhis2-ui/button';
import { spacers } from '@dhis2/ui-constants';
import { IconChevronLeft16, IconChevronRight16 } from '@dhis2/ui-icons';
import PropTypes from 'prop-types';
import React from 'react';

const translate = (prop, interpolationObject) => {
  if (typeof prop === 'function') {
    return prop(interpolationObject);
  }

  return prop;
};

const PageControls = _ref => {
  let {
    dataTest,
    isNextDisabled,
    isPreviousDisabled,
    nextPageText,
    page,
    previousPageText,
    onClick
  } = _ref;
  return /*#__PURE__*/React.createElement("div", {
    "data-test": "".concat(dataTest, "-pagecontrols"),
    className: _JSXStyle.dynamic([["2407365506", [spacers.dp4]]])
  }, /*#__PURE__*/React.createElement(Button, {
    secondary: true,
    className: "button-previous",
    small: true,
    disabled: isPreviousDisabled,
    onClick: () => onClick(page - 1),
    dataTest: "".concat(dataTest, "-page-previous")
  }, /*#__PURE__*/React.createElement(IconChevronLeft16, null), translate(previousPageText)), /*#__PURE__*/React.createElement(Button, {
    secondary: true,
    className: "button-next",
    small: true,
    disabled: isNextDisabled,
    onClick: () => onClick(page + 1),
    dataTest: "".concat(dataTest, "-page-next")
  }, translate(nextPageText), /*#__PURE__*/React.createElement(IconChevronRight16, null)), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "2407365506",
    dynamic: [spacers.dp4]
  }, ["div.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}", "div.__jsx-style-dynamic-selector .button-previous{height:32px;padding-left:0;}", "div.__jsx-style-dynamic-selector .button-next{height:32px;padding-right:0;margin-left:".concat(spacers.dp4, ";}")]));
};

PageControls.propTypes = {
  dataTest: PropTypes.string.isRequired,
  nextPageText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,
  page: PropTypes.number.isRequired,
  previousPageText: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,
  onClick: PropTypes.func.isRequired,
  isNextDisabled: PropTypes.bool,
  isPreviousDisabled: PropTypes.bool
};
export { PageControls };