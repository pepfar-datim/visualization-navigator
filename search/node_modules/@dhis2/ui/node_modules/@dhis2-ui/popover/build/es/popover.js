import _JSXStyle from "styled-jsx/style";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { Layer } from '@dhis2-ui/layer';
import { getReferenceElement, usePopper } from '@dhis2-ui/popper';
import { colors, elevations, sharedPropTypes } from '@dhis2/ui-constants';
import PropTypes from 'prop-types';
import React, { useState, useMemo } from 'react';
import { Arrow } from './arrow.js';
import { combineModifiers } from './modifiers.js';

const Popover = _ref => {
  let {
    children,
    reference,
    arrow,
    className,
    dataTest,
    elevation,
    maxWidth,
    observePopperResize,
    observeReferenceResize,
    placement,
    onClickOutside
  } = _ref;
  const referenceElement = getReferenceElement(reference);
  const [popperElement, setPopperElement] = useState(null);
  const [arrowElement, setArrowElement] = useState(null);
  const modifiers = useMemo(() => combineModifiers(arrow, arrowElement, {
    observePopperResize,
    observeReferenceResize
  }), [arrow, arrowElement, observePopperResize, observeReferenceResize]);
  const {
    styles,
    attributes
  } = usePopper(referenceElement, popperElement, {
    placement,
    modifiers
  });
  return /*#__PURE__*/React.createElement(Layer, {
    onClick: onClickOutside
  }, /*#__PURE__*/React.createElement("div", _extends({
    "data-test": dataTest,
    ref: setPopperElement,
    style: styles.popper
  }, attributes.popper, {
    className: _JSXStyle.dynamic([["632767479", [maxWidth, elevation, colors.white]]]) + " " + (attributes.popper && attributes.popper.className != null && attributes.popper.className || className || "")
  }), children, arrow && /*#__PURE__*/React.createElement(Arrow, {
    hidden: attributes.arrow && attributes.arrow['data-arrow-hidden'],
    popperPlacement: attributes.popper && attributes.popper['data-popper-placement'],
    ref: setArrowElement,
    styles: styles.arrow
  }), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "632767479",
    dynamic: [maxWidth, elevation, colors.white]
  }, ["div.__jsx-style-dynamic-selector{max-width:".concat(maxWidth, "px;box-shadow:").concat(elevation, ";background-color:").concat(colors.white, ";border-radius:4px;}")])));
};

Popover.defaultProps = {
  arrow: true,
  dataTest: 'dhis2-uicore-popover',
  elevation: elevations.e200,
  maxWidth: 360,
  placement: 'top'
};
Popover.propTypes = {
  children: PropTypes.node.isRequired,

  /** Show or hide the arrow */
  arrow: PropTypes.bool,
  className: PropTypes.string,
  dataTest: PropTypes.string,

  /** Box-shadow to create appearance of elevation.  Use `elevations` constants from the UI library. */
  elevation: PropTypes.string,
  maxWidth: PropTypes.number,
  observePopperResize: PropTypes.bool,
  observeReferenceResize: PropTypes.bool,
  placement: sharedPropTypes.popperPlacementPropType,

  /** A React ref that refers to the element the Popover should position against */
  reference: sharedPropTypes.popperReferencePropType,
  onClickOutside: PropTypes.func
};
export { Popover };