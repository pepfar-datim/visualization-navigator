{"ast":null,"code":"import _objectSpread from\"/home/jake/SRC/visualization-navigator-ts/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/home/jake/SRC/visualization-navigator-ts/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/home/jake/SRC/visualization-navigator-ts/node_modules/@babel/runtime/regenerator/index.js\";import{config,getAuthorization,getFullUrl,isTestEnv}from\"../config.service\";import{getMockedResponse,isGetMocked}from\"../mock/getMock.serivce\";import{getCachedResponse,isResponseCached,saveResponseToCache}from\"../cache/getCache.service\";import{ContentType}from\"../../types/http.types\";var mergeOptions=function mergeOptions(options,acceptType){return Object.assign({headers:{Accept:acceptType}},options);};export function getJson(_x,_x2){return _getJson.apply(this,arguments);}function _getJson(){_getJson=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(endpointUrl,options){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getData(endpointUrl,mergeOptions(options,ContentType.json)).then(function(r){return r.json();}).catch(function(error){console.error(\"Request failed\",endpointUrl,error);throw error;});case 2:response=_context.sent;if(isTestEnv()&&!isGetMocked(endpointUrl))saveResponseToCache(config.testUsername,endpointUrl,response);return _context.abrupt(\"return\",response);case 5:case\"end\":return _context.stop();}}},_callee);}));return _getJson.apply(this,arguments);}export function getText(endpointUrl,options){return getData(endpointUrl,mergeOptions(options,ContentType.text)).then(function(r){return r.text();});}function getData(endpointUrl,options){if(isTestEnv()&&isGetMocked(endpointUrl))return Promise.resolve(getMockedResponse(endpointUrl));if(isTestEnv()&&isResponseCached(config.testUsername,endpointUrl))return Promise.resolve(getCachedResponse(config.testUsername,endpointUrl));if(isTestEnv())options.headers['authorization']=getAuthorization();if(isTestEnv())console.log(\"Request not cached \".concat(endpointUrl));return fetch(getFullUrl(endpointUrl),_objectSpread({credentials:'include'},options));}","map":{"version":3,"names":["config","getAuthorization","getFullUrl","isTestEnv","getMockedResponse","isGetMocked","getCachedResponse","isResponseCached","saveResponseToCache","ContentType","mergeOptions","options","acceptType","Object","assign","headers","Accept","getJson","endpointUrl","getData","json","then","r","catch","error","console","response","testUsername","getText","text","Promise","resolve","log","fetch","credentials"],"sources":["/home/jake/SRC/visualization-navigator-ts/node_modules/@pepfar-react-lib/datim-api/services/methods/get.service.ts"],"sourcesContent":["import {config, getAuthorization, getFullUrl, isTestEnv} from \"../config.service\";\nimport {getMockedResponse, isGetMocked} from \"../mock/getMock.serivce\";\nimport {getCachedResponse, isResponseCached, saveResponseToCache} from \"../cache/getCache.service\";\nimport {ContentType} from \"../../types/http.types\";\n\nconst mergeOptions = (options:RequestInit,acceptType:string)=>Object.assign({headers:{Accept: acceptType}},options);\n\nexport async function getJson(endpointUrl:string,options?:RequestInit):Promise<any>{\n    let response = await getData(endpointUrl,mergeOptions(options,ContentType.json)).then(r=>r.json()).catch(error=>{\n        console.error(`Request failed`,endpointUrl,error);\n        throw error;\n    });\n    if (isTestEnv()&&!isGetMocked(endpointUrl)) saveResponseToCache(config.testUsername,endpointUrl,response);\n    return response;\n}\n\nexport function getText(endpointUrl:string, options?:RequestInit):Promise<any>{\n    return getData(endpointUrl,mergeOptions(options,ContentType.text)).then(r=>r.text());\n}\n\nfunction getData(endpointUrl, options?:RequestInit):Promise<any>{\n    if (isTestEnv()&&isGetMocked(endpointUrl)) return Promise.resolve(getMockedResponse(endpointUrl));\n    if (isTestEnv()&&isResponseCached(config.testUsername,endpointUrl)) return Promise.resolve(getCachedResponse(config.testUsername,endpointUrl))\n    if (isTestEnv()) options.headers['authorization'] = getAuthorization();\n    if (isTestEnv()) console.log(`Request not cached ${endpointUrl}`)\n    return fetch(getFullUrl(endpointUrl),{credentials: 'include', ...options})\n}"],"mappings":"+XAAA,OAAQA,MAAR,CAAgBC,gBAAhB,CAAkCC,UAAlC,CAA8CC,SAA9C,KAA8D,mBAA9D,CACA,OAAQC,iBAAR,CAA2BC,WAA3B,KAA6C,yBAA7C,CACA,OAAQC,iBAAR,CAA2BC,gBAA3B,CAA6CC,mBAA7C,KAAuE,2BAAvE,CACA,OAAQC,WAAR,KAA0B,wBAA1B,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,OAAD,CAAqBC,UAArB,QAAyCC,CAAAA,MAAM,CAACC,MAAP,CAAc,CAACC,OAAO,CAAC,CAACC,MAAM,CAAEJ,UAAT,CAAT,CAAd,CAA6CD,OAA7C,CAAzC,EAArB,CAEA,eAAsBM,CAAAA,OAAtB,gD,qFAAO,iBAAuBC,WAAvB,CAA0CP,OAA1C,qJACkBQ,CAAAA,OAAO,CAACD,WAAD,CAAaR,YAAY,CAACC,OAAD,CAASF,WAAW,CAACW,IAArB,CAAzB,CAAP,CAA4DC,IAA5D,CAAiE,SAAAC,CAAC,QAAEA,CAAAA,CAAC,CAACF,IAAF,EAAF,EAAlE,EAA8EG,KAA9E,CAAoF,SAAAC,KAAK,CAAE,CAC5GC,OAAO,CAACD,KAAR,kBAA+BN,WAA/B,CAA2CM,KAA3C,EACA,KAAMA,CAAAA,KAAN,CACH,CAHoB,CADlB,QACCE,QADD,eAKH,GAAIvB,SAAS,IAAI,CAACE,WAAW,CAACa,WAAD,CAA7B,CAA4CV,mBAAmB,CAACR,MAAM,CAAC2B,YAAR,CAAqBT,WAArB,CAAiCQ,QAAjC,CAAnB,CALzC,gCAMIA,QANJ,wD,0CASP,MAAO,SAASE,CAAAA,OAAT,CAAiBV,WAAjB,CAAqCP,OAArC,CAAuE,CAC1E,MAAOQ,CAAAA,OAAO,CAACD,WAAD,CAAaR,YAAY,CAACC,OAAD,CAASF,WAAW,CAACoB,IAArB,CAAzB,CAAP,CAA4DR,IAA5D,CAAiE,SAAAC,CAAC,QAAEA,CAAAA,CAAC,CAACO,IAAF,EAAF,EAAlE,CAAP,CACH,CAED,QAASV,CAAAA,OAAT,CAAiBD,WAAjB,CAA8BP,OAA9B,CAAgE,CAC5D,GAAIR,SAAS,IAAIE,WAAW,CAACa,WAAD,CAA5B,CAA2C,MAAOY,CAAAA,OAAO,CAACC,OAAR,CAAgB3B,iBAAiB,CAACc,WAAD,CAAjC,CAAP,CAC3C,GAAIf,SAAS,IAAII,gBAAgB,CAACP,MAAM,CAAC2B,YAAR,CAAqBT,WAArB,CAAjC,CAAoE,MAAOY,CAAAA,OAAO,CAACC,OAAR,CAAgBzB,iBAAiB,CAACN,MAAM,CAAC2B,YAAR,CAAqBT,WAArB,CAAjC,CAAP,CACpE,GAAIf,SAAS,EAAb,CAAiBQ,OAAO,CAACI,OAAR,CAAgB,eAAhB,EAAmCd,gBAAgB,EAAnD,CACjB,GAAIE,SAAS,EAAb,CAAiBsB,OAAO,CAACO,GAAR,8BAAkCd,WAAlC,GACjB,MAAOe,CAAAA,KAAK,CAAC/B,UAAU,CAACgB,WAAD,CAAX,gBAA0BgB,WAAW,CAAE,SAAvC,EAAqDvB,OAArD,EAAZ,CACH"},"metadata":{},"sourceType":"module"}