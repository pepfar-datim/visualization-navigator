"use strict";

var _RestAPILink = require("../RestAPILink");

var _queryToResourcePath = require("./queryToResourcePath");

const createLink = config => new _RestAPILink.RestAPILink(config);

const defaultConfig = {
  basePath: '<base>',
  apiVersion: '37',
  serverVersion: {
    major: 2,
    minor: 37,
    patch: 11
  }
};
const link = createLink(defaultConfig);
const apiPath = link.versionedApiPath;
const actionPrefix = "dhis-web-commons/";
const actionPostfix = '.action';
describe('queryToResourcePath', () => {
  describe('action', () => {
    it('should return action URL with no querystring if not query parameters are passed', () => {
      const query = {
        resource: 'action::test'
      };
      expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(actionPrefix, "test").concat(actionPostfix));
    });
    it('should return action URL with a simple querystring if query parameters are passed', () => {
      const query = {
        resource: 'action::test',
        params: {
          key: 'value'
        }
      };
      expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(actionPrefix, "test").concat(actionPostfix, "?key=value"));
    });
  });
  describe('resource with dot', () => {
    it('should leave dots in resources', () => {
      const query = {
        resource: 'svg.pdf'
      };
      expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(apiPath, "/svg.pdf"));
    });
  });
  it('should return resource url with no querystring if not query parameters are passed', () => {
    const query = {
      resource: 'test'
    };
    expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(apiPath, "/test"));
  });
  it('should return resource url and singular parameter separated by ?', () => {
    const query = {
      resource: 'test',
      params: {
        key: 'value'
      }
    };
    expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(apiPath, "/test?key=value"));
  });
  it('should return resource url and multiple parameters separated by ? and &', () => {
    const query = {
      resource: 'test',
      params: {
        key: 'value',
        param: 'value2'
      }
    };
    expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(apiPath, "/test?key=value&param=value2"));
  });
  it('should url encode special characters in query keys', () => {
    const query = {
      resource: 'test',
      params: {
        'key=42&val': 'value'
      }
    };
    expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(apiPath, "/test?key%3D42%26val=value"));
  });
  it('should url encode special characters in string parameters', () => {
    const query = {
      resource: 'test',
      params: {
        key: 'value?=42',
        param: 'value2&& 53'
      }
    };
    expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(apiPath, "/test?key=value%3F%3D42&param=value2%26%26%2053"));
  });
  it('should support numeric (integer and float) parameters', () => {
    const query = {
      resource: 'test',
      params: {
        key: 42,
        param: 193.75
      }
    };
    expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(apiPath, "/test?key=42&param=193.75"));
  });
  it('should support boolean parameters', () => {
    const query = {
      resource: 'test',
      params: {
        key: 42,
        someflag: true
      }
    };
    expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(apiPath, "/test?key=42&someflag=true"));
  });
  it('should join array parameters with commas', () => {
    const query = {
      resource: 'test',
      params: {
        key: ['asdf', 123]
      }
    };
    expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(apiPath, "/test?key=asdf,123"));
  });
  it('should include multiple filter parameters when array of filters provided', () => {
    const query = {
      resource: 'test',
      params: {
        filter: ['asdf', 123]
      }
    };
    expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(apiPath, "/test?filter=asdf&filter=123"));
  });
  it('should NOT YET support name-aliased parameters', () => {
    const query = {
      resource: 'test',
      params: {
        key: {
          asdf: 'fdsa'
        }
      }
    };
    expect(() => (0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toThrow();
  });
  it('should throw if passed something crazy like a function', () => {
    const query = {
      resource: 'test',
      params: {
        key: a => a
      }
    };
    expect(() => (0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toThrow();
  });
  it('should return an unversioned endpoint for the new tracker importer (in version 2.37)', () => {
    const query = {
      resource: 'tracker'
    };
    expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(link.unversionedApiPath, "/tracker"));
  });
  it('should return an unversioned endpoint sub-resources of the new tracker importer (in version 2.37)', () => {
    const query = {
      resource: 'tracker/test'
    };
    expect((0, _queryToResourcePath.queryToResourcePath)(link, query, 'read')).toBe("".concat(link.unversionedApiPath, "/tracker/test"));
  });
  it('should return a VERSIONED endpoint for the new tracker importer (in version 2.38)', () => {
    const query = {
      resource: 'tracker'
    };
    const v38config = { ...defaultConfig,
      serverVersion: {
        major: 2,
        minor: 38,
        patch: 0
      }
    };
    expect((0, _queryToResourcePath.queryToResourcePath)(createLink(v38config), query, 'read')).toBe("".concat(link.versionedApiPath, "/tracker"));
  });
});