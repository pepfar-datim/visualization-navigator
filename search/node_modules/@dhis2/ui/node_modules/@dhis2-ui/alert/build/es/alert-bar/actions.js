import _JSXStyle from "styled-jsx/style";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { arrayWithLength } from '@dhis2/prop-types';
import { spacers } from '@dhis2/ui-constants';
import PropTypes from 'prop-types';
import React from 'react';
import { Action } from './action.js';

const Actions = _ref => {
  let {
    actions,
    hide,
    dataTest
  } = _ref;

  if (!actions) {
    return null;
  }

  return /*#__PURE__*/React.createElement("div", {
    className: _JSXStyle.dynamic([["961263490", [spacers.dp48, spacers.dp12]]])
  }, actions.map(action => /*#__PURE__*/React.createElement(Action, _extends({
    key: action.label
  }, action, {
    hide: hide,
    dataTest: "".concat(dataTest, "-action")
  }))), /*#__PURE__*/React.createElement(_JSXStyle, {
    id: "961263490",
    dynamic: [spacers.dp48, spacers.dp12]
  }, ["div.__jsx-style-dynamic-selector{margin-left:".concat(spacers.dp48, ";margin-right:-").concat(spacers.dp12, ";}")]));
};

const actionsPropType = arrayWithLength(0, 2, PropTypes.shape({
  label: PropTypes.string.isRequired,
  onClick: PropTypes.func.isRequired
}));
Actions.propTypes = {
  dataTest: PropTypes.string.isRequired,
  hide: PropTypes.func.isRequired,
  actions: actionsPropType
};
export { Actions, actionsPropType };