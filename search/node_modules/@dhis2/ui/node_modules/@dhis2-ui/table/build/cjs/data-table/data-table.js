"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataTable = void 0;

var _classnames = _interopRequireDefault(require("classnames"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _index = require("./table-elements/index.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DataTable = /*#__PURE__*/(0, _react.forwardRef)((_ref, ref) => {
  let {
    children,
    className,
    dataTest,
    layout,
    role,
    scrollHeight,
    scrollWidth,
    width
  } = _ref;
  const scrollable = !!(scrollHeight || scrollWidth);

  const table = /*#__PURE__*/_react.default.createElement(_index.Table, {
    borderless: scrollable,
    className: className,
    dataTest: dataTest,
    layout: layout,
    ref: ref,
    role: role,
    width: width
  }, children);

  return !scrollable ? table : /*#__PURE__*/_react.default.createElement(_index.TableScrollBox, {
    className: (0, _classnames.default)(className, 'tablescrollbox'),
    dataTest: "".concat(dataTest, "-scrollbox"),
    maxHeight: scrollHeight,
    maxWidth: scrollWidth
  }, table);
});
exports.DataTable = DataTable;
DataTable.displayName = 'DataTable';
DataTable.defaultProps = {
  dataTest: 'dhis2-uicore-datatable',
  width: '100%',
  layout: 'auto'
};
DataTable.propTypes = {
  /**
   * Should be `<DataTableHead>`, `<DataTableBody>`, and `<DataTableFoot>` components
   */
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  dataTest: _propTypes.default.string,

  /**
   * Sets the `datatable-layout` property. Switching to `fixed` can prevent style
   * issues when dealing with a datatable with multiple frozen columns or when dealing
   * with filter elements in the datatable headers.
   */
  layout: _propTypes.default.oneOf(['auto', 'fixed', 'initial', 'inherit']),
  role: _propTypes.default.string,

  /** Sets max-height of scrollbox */
  scrollHeight: _propTypes.default.string,

  /** Sets max-width of scrollbox */
  scrollWidth: _propTypes.default.string,

  /**
   * Sets the `width` property. Providing an explicit width can prevent style
   * issues when dealing with horizontally scrolling datatables with a fixed layout.
   */
  width: _propTypes.default.string
};