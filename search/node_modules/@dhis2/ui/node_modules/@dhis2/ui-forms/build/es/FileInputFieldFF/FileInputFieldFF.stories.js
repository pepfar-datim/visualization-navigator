import React from 'react';
import { Field } from 'react-final-form';
import { formDecorator } from '../formDecorator.js';
import { inputArgType, metaArgType } from '../shared/propTypes.js';
import { hasValue } from '../validators/index.js';
import { FileInputFieldFF } from './FileInputFieldFF.js';
const description = "\nThe `FileInputFieldFF` is a wrapper around a `FileInputField` that enables it to work with Final Form, the preferred library in DHIS 2 apps for form validation and utilities.\n\n#### Final Form\n\nSee how to use Final Form at [Final Form - Getting Started](https://final-form.org/docs/react-final-form/getting-started).\n\nInside a Final Form `<Form>` component, these 'FF' UI components are intended to be used in the `component` prop of the [Final Form `<Field>` components](https://final-form.org/docs/react-final-form/api/Field) where they will receive some props from the Field, e.g. `<Field component={FileInputFieldFF} />`.  See the code samples below for examples.\n\n#### Props\n\nThe props shown in the table below are generally provided to the `FileInputFieldFF` wrapper by the Final Form `Field`.\n\nNote that any props beyond the API of the `Field` component will be spread to the `FileInputFieldFF`, which passes any extra props to the underlying `FileInputField` using `{...rest}`.\n\nTherefore, to add any props to the `FileInputFieldFF` or `FileInputField`, add those props to the parent Final Form `Field` component.\n\nAlso see `FileInput` and `FileInputField` for notes about props and implementation.\n\n```js\nimport { FileInputFieldFF } from '@dhis2/ui'\n```\n\nPress **Submit** to see the form values logged to the console.\n";
const files = [new File([], 'file1.txt'), new File([], 'file2.txt')];
export default {
  title: 'File Input Field (Final Form)',
  component: FileInputFieldFF,
  decorators: [formDecorator],
  parameters: {
    docs: {
      description: {
        component: description
      }
    }
  },
  argTypes: {
    input: { ...inputArgType
    },
    meta: { ...metaArgType
    }
  }
};
export const Default = () => /*#__PURE__*/React.createElement(Field, {
  component: FileInputFieldFF,
  name: "upload",
  label: "This is a file upload"
});
export const Required = () => /*#__PURE__*/React.createElement(Field, {
  component: FileInputFieldFF,
  name: "upload",
  label: "This is a file upload",
  required: true,
  validate: hasValue
});
export const Multifile = () => /*#__PURE__*/React.createElement(Field, {
  component: FileInputFieldFF,
  name: "upload",
  label: "This is a file upload",
  multifile: true
});
export const WithValues = () => /*#__PURE__*/React.createElement(Field, {
  component: FileInputFieldFF,
  name: "upload",
  label: "This is a file upload",
  required: true,
  multifile: true,
  initialValue: files,
  validate: hasValue
});
WithValues.storyName = 'With values';
export const PreventPlaceholder = () => /*#__PURE__*/React.createElement(Field, {
  component: FileInputFieldFF,
  name: "upload",
  label: "This is a file upload",
  placeholder: ""
});
PreventPlaceholder.storyName = 'Prevent placeholder';