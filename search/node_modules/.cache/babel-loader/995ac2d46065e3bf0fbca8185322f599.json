{"ast":null,"code":"import propTypes from 'prop-types';\n\nconst isEmpty = value => typeof value === 'undefined' || value === null || value === '';\n\nconst requiredIfFactory = (condition, propType, isRequired) => (props, propName, componentName) => {\n  const propValue = props[propName]; // Usage errors\n\n  if (isRequired) {\n    return new Error(`Property \\`${propName}\\` on component \\`${componentName}\\` is using the \\`requiredIf\\` prop-validator combined with \\`.isRequired\\`. This is an invalid combination.`);\n  }\n\n  if (typeof condition !== 'function') {\n    return new Error(`The \\`condition\\` argument passed to the \\`requiredIf\\` prop-validator was not a function.`);\n  }\n\n  if (typeof propType !== 'function') {\n    return new Error(`The \\`propType\\` argument passed to the \\`requiredIf\\` prop-validator was not a function.`);\n  } // Validation errors\n\n\n  if (condition(props) && isEmpty(propValue)) {\n    return new Error(`Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`, this prop is conditionally required but has value \\`${propValue}\\`. The condition that made this prop required is: \\`${condition.toString()}\\`.`);\n  } // This is how to programatically invoke a propTypes check\n  // https://github.com/facebook/prop-types#proptypescheckproptypes\n\n\n  propTypes.checkPropTypes({\n    [propName]: propType\n  }, props, 'prop', componentName);\n  return null;\n};\n/**\n * Ensure the prop has a value (i.e. treat it as required) when a given sibling prop\n * also has a value, and ensure the prop is of the correct prop-type\n * @param {function} siblingPropName - The name of the sibling prop\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import { requiredIf } from '@dhis2/prop-types'\n *\n * const Test = ({ someBool, someString }) => (\n *     <div>\n *         <h1>someBool: {someBool ? 'true' : 'false'}</h1>\n *         <h1>someString: {someString}</h1>\n *     </div>\n * )\n * Test.propTypes = {\n *     someBool: propTypes.bool,\n *     someString: requiredIf(props => props.someBool, propTypes.string),\n * }\n */\n\n\nexport function requiredIf(condition, propType) {\n  const fn = requiredIfFactory(condition, propType, false);\n  fn.isRequired = requiredIfFactory(condition, propType, true);\n  return fn;\n}","map":{"version":3,"names":["propTypes","isEmpty","value","requiredIfFactory","condition","propType","isRequired","props","propName","componentName","propValue","Error","toString","checkPropTypes","requiredIf","fn"],"sources":["/home/jake/SRC/visualization-navigator-ts/node_modules/@dhis2/prop-types/build/es/requiredIf.js"],"sourcesContent":["import propTypes from 'prop-types';\n\nconst isEmpty = value => typeof value === 'undefined' || value === null || value === '';\n\nconst requiredIfFactory = (condition, propType, isRequired) => (props, propName, componentName) => {\n  const propValue = props[propName]; // Usage errors\n\n  if (isRequired) {\n    return new Error(`Property \\`${propName}\\` on component \\`${componentName}\\` is using the \\`requiredIf\\` prop-validator combined with \\`.isRequired\\`. This is an invalid combination.`);\n  }\n\n  if (typeof condition !== 'function') {\n    return new Error(`The \\`condition\\` argument passed to the \\`requiredIf\\` prop-validator was not a function.`);\n  }\n\n  if (typeof propType !== 'function') {\n    return new Error(`The \\`propType\\` argument passed to the \\`requiredIf\\` prop-validator was not a function.`);\n  } // Validation errors\n\n\n  if (condition(props) && isEmpty(propValue)) {\n    return new Error(`Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`, this prop is conditionally required but has value \\`${propValue}\\`. The condition that made this prop required is: \\`${condition.toString()}\\`.`);\n  } // This is how to programatically invoke a propTypes check\n  // https://github.com/facebook/prop-types#proptypescheckproptypes\n\n\n  propTypes.checkPropTypes({\n    [propName]: propType\n  }, props, 'prop', componentName);\n  return null;\n};\n/**\n * Ensure the prop has a value (i.e. treat it as required) when a given sibling prop\n * also has a value, and ensure the prop is of the correct prop-type\n * @param {function} siblingPropName - The name of the sibling prop\n * @return {Error|null} Returns null if all conditions are met, or an error\n * @example\n * import React from 'react'\n * import { requiredIf } from '@dhis2/prop-types'\n *\n * const Test = ({ someBool, someString }) => (\n *     <div>\n *         <h1>someBool: {someBool ? 'true' : 'false'}</h1>\n *         <h1>someString: {someString}</h1>\n *     </div>\n * )\n * Test.propTypes = {\n *     someBool: propTypes.bool,\n *     someString: requiredIf(props => props.someBool, propTypes.string),\n * }\n */\n\n\nexport function requiredIf(condition, propType) {\n  const fn = requiredIfFactory(condition, propType, false);\n  fn.isRequired = requiredIfFactory(condition, propType, true);\n  return fn;\n}"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,OAAO,GAAGC,KAAK,IAAI,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAK,IAA1C,IAAkDA,KAAK,KAAK,EAArF;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,UAAtB,KAAqC,CAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,KAAoC;EACjG,MAAMC,SAAS,GAAGH,KAAK,CAACC,QAAD,CAAvB,CADiG,CAC9D;;EAEnC,IAAIF,UAAJ,EAAgB;IACd,OAAO,IAAIK,KAAJ,CAAW,cAAaH,QAAS,qBAAoBC,aAAc,8GAAnE,CAAP;EACD;;EAED,IAAI,OAAOL,SAAP,KAAqB,UAAzB,EAAqC;IACnC,OAAO,IAAIO,KAAJ,CAAW,4FAAX,CAAP;EACD;;EAED,IAAI,OAAON,QAAP,KAAoB,UAAxB,EAAoC;IAClC,OAAO,IAAIM,KAAJ,CAAW,2FAAX,CAAP;EACD,CAbgG,CAa/F;;;EAGF,IAAIP,SAAS,CAACG,KAAD,CAAT,IAAoBN,OAAO,CAACS,SAAD,CAA/B,EAA4C;IAC1C,OAAO,IAAIC,KAAJ,CAAW,kBAAiBH,QAAS,oBAAmBC,aAAc,2DAA0DC,SAAU,wDAAuDN,SAAS,CAACQ,QAAV,EAAqB,KAAtN,CAAP;EACD,CAlBgG,CAkB/F;EACF;;;EAGAZ,SAAS,CAACa,cAAV,CAAyB;IACvB,CAACL,QAAD,GAAYH;EADW,CAAzB,EAEGE,KAFH,EAEU,MAFV,EAEkBE,aAFlB;EAGA,OAAO,IAAP;AACD,CA1BD;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASK,UAAT,CAAoBV,SAApB,EAA+BC,QAA/B,EAAyC;EAC9C,MAAMU,EAAE,GAAGZ,iBAAiB,CAACC,SAAD,EAAYC,QAAZ,EAAsB,KAAtB,CAA5B;EACAU,EAAE,CAACT,UAAH,GAAgBH,iBAAiB,CAACC,SAAD,EAAYC,QAAZ,EAAsB,IAAtB,CAAjC;EACA,OAAOU,EAAP;AACD"},"metadata":{},"sourceType":"module"}