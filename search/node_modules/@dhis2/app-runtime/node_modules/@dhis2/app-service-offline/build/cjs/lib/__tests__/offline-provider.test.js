"use strict";

var _react = require("@testing-library/react");

var _react2 = _interopRequireDefault(require("react"));

var _testMocks = require("../../utils/test-mocks");

var _cacheableSection = require("../cacheable-section");

var _cacheableSectionState = require("../cacheable-section-state");

var _offlineProvider = require("../offline-provider");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Suppress 'act' warning for these tests
const originalError = console.error;
beforeEach(() => {
  jest.spyOn(console, 'error').mockImplementation((...args) => {
    const pattern = /Warning: An update to .* inside a test was not wrapped in act/;

    if (typeof args[0] === 'string' && pattern.test(args[0])) {
      return;
    }

    return originalError.call(console, ...args);
  });
});
afterEach(() => {
  jest.clearAllMocks() // syntax needed to appease typescript
  ;
  console.error.mockRestore();
});
describe('Testing offline provider', () => {
  it('Should render without failing', () => {
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_offlineProvider.OfflineProvider, {
      offlineInterface: _testMocks.mockOfflineInterface
    }, /*#__PURE__*/_react2.default.createElement("div", {
      "data-testid": "test-div"
    })));
    expect(_react.screen.getByTestId('test-div')).toBeInTheDocument();
  });
  it('Should sync cached sections with indexedDB', async () => {
    const testOfflineInterface = { ..._testMocks.mockOfflineInterface,
      getCachedSections: jest.fn().mockResolvedValue([{
        sectionId: '1',
        lastUpdated: 'date1'
      }, {
        sectionId: '2',
        lastUpdated: 'date2'
      }])
    };

    const CachedSections = () => {
      const {
        cachedSections
      } = (0, _cacheableSectionState.useCachedSections)();
      return /*#__PURE__*/_react2.default.createElement("div", {
        "data-testid": "sections"
      }, JSON.stringify(cachedSections));
    };

    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_offlineProvider.OfflineProvider, {
      offlineInterface: testOfflineInterface
    }, /*#__PURE__*/_react2.default.createElement(CachedSections, null)));
    const {
      getByTestId
    } = _react.screen;
    expect(testOfflineInterface.getCachedSections).toHaveBeenCalled();
    await (0, _react.waitFor)(() => getByTestId('sections').textContent !== '{}');
    const textContent = JSON.parse(getByTestId('sections').textContent || '');
    expect(textContent).toEqual({
      1: {
        lastUpdated: 'date1'
      },
      2: {
        lastUpdated: 'date2'
      }
    });
  });
  it('Should provide the relevant contexts to consumers', () => {
    const TestConsumer = () => {
      (0, _cacheableSection.useCacheableSection)('id');
      return /*#__PURE__*/_react2.default.createElement(_cacheableSection.CacheableSection, {
        loadingMask: /*#__PURE__*/_react2.default.createElement("div", null),
        id: 'id'
      }, /*#__PURE__*/_react2.default.createElement("div", {
        "data-testid": "test-div"
      }));
    };

    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_offlineProvider.OfflineProvider, {
      offlineInterface: _testMocks.mockOfflineInterface
    }, /*#__PURE__*/_react2.default.createElement(TestConsumer, null)));
    expect(_react.screen.getByTestId('test-div')).toBeInTheDocument();
  });
  it('Should render without failing when no offlineInterface is provided', () => {
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_offlineProvider.OfflineProvider, null, /*#__PURE__*/_react2.default.createElement("div", {
      "data-testid": "test-div"
    })));
    expect(_react.screen.getByTestId('test-div')).toBeInTheDocument();
  });
  it('Should render without failing if PWA is not enabled', () => {
    const testOfflineInterface = { ..._testMocks.mockOfflineInterface,
      pwaEnabled: false
    };
    (0, _react.render)( /*#__PURE__*/_react2.default.createElement(_offlineProvider.OfflineProvider, {
      offlineInterface: testOfflineInterface
    }, /*#__PURE__*/_react2.default.createElement("div", {
      "data-testid": "test-div"
    })));
    expect(_react.screen.getByTestId('test-div')).toBeInTheDocument();
  });
});